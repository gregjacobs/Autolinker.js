{"version":3,"file":"autolinker.js","sources":["../node_modules/.pnpm/@rollup+plugin-typescript@12.1.2_rollup@4.40.0_tslib@2.8.1_typescript@5.8.3/node_modules/tslib/tslib.es6.js","../src/version.ts","../src/utils.ts","../src/html-tag.ts","../src/truncate/truncate-smart.ts","../src/truncate/truncate-middle.ts","../src/truncate/truncate-end.ts","../src/anchor-tag-builder.ts","../src/match/abstract-match.ts","../src/char-utils.ts","../src/parser/known-tlds.ts","../src/parser/uri-utils.ts","../src/match/url-match.ts","../src/parser/email-utils.ts","../src/match/email-match.ts","../src/parser/hashtag-utils.ts","../src/match/hashtag-match.ts","../src/parser/mention-utils.ts","../src/match/mention-match.ts","../src/parser/phone-number-utils.ts","../src/match/phone-match.ts","../src/parser/parse-matches.ts","../src/htmlParser/parse-html.ts","../src/autolinker.ts"],"sourcesContent":["/******************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise, SuppressedError, Symbol, Iterator */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    if (typeof b !== \"function\" && b !== null)\r\n        throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __esDecorate(ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {\r\n    function accept(f) { if (f !== void 0 && typeof f !== \"function\") throw new TypeError(\"Function expected\"); return f; }\r\n    var kind = contextIn.kind, key = kind === \"getter\" ? \"get\" : kind === \"setter\" ? \"set\" : \"value\";\r\n    var target = !descriptorIn && ctor ? contextIn[\"static\"] ? ctor : ctor.prototype : null;\r\n    var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});\r\n    var _, done = false;\r\n    for (var i = decorators.length - 1; i >= 0; i--) {\r\n        var context = {};\r\n        for (var p in contextIn) context[p] = p === \"access\" ? {} : contextIn[p];\r\n        for (var p in contextIn.access) context.access[p] = contextIn.access[p];\r\n        context.addInitializer = function (f) { if (done) throw new TypeError(\"Cannot add initializers after decoration has completed\"); extraInitializers.push(accept(f || null)); };\r\n        var result = (0, decorators[i])(kind === \"accessor\" ? { get: descriptor.get, set: descriptor.set } : descriptor[key], context);\r\n        if (kind === \"accessor\") {\r\n            if (result === void 0) continue;\r\n            if (result === null || typeof result !== \"object\") throw new TypeError(\"Object expected\");\r\n            if (_ = accept(result.get)) descriptor.get = _;\r\n            if (_ = accept(result.set)) descriptor.set = _;\r\n            if (_ = accept(result.init)) initializers.unshift(_);\r\n        }\r\n        else if (_ = accept(result)) {\r\n            if (kind === \"field\") initializers.unshift(_);\r\n            else descriptor[key] = _;\r\n        }\r\n    }\r\n    if (target) Object.defineProperty(target, contextIn.name, descriptor);\r\n    done = true;\r\n};\r\n\r\nexport function __runInitializers(thisArg, initializers, value) {\r\n    var useValue = arguments.length > 2;\r\n    for (var i = 0; i < initializers.length; i++) {\r\n        value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);\r\n    }\r\n    return useValue ? value : void 0;\r\n};\r\n\r\nexport function __propKey(x) {\r\n    return typeof x === \"symbol\" ? x : \"\".concat(x);\r\n};\r\n\r\nexport function __setFunctionName(f, name, prefix) {\r\n    if (typeof name === \"symbol\") name = name.description ? \"[\".concat(name.description, \"]\") : \"\";\r\n    return Object.defineProperty(f, \"name\", { configurable: true, value: prefix ? \"\".concat(prefix, \" \", name) : name });\r\n};\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g = Object.create((typeof Iterator === \"function\" ? Iterator : Object).prototype);\r\n    return g.next = verb(0), g[\"throw\"] = verb(1), g[\"return\"] = verb(2), typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (g && (g = 0, op[0] && (_ = 0)), _) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport var __createBinding = Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    var desc = Object.getOwnPropertyDescriptor(m, k);\r\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\r\n        desc = { enumerable: true, get: function() { return m[k]; } };\r\n    }\r\n    Object.defineProperty(o, k2, desc);\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n});\r\n\r\nexport function __exportStar(m, o) {\r\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n}\r\n\r\nexport function __spreadArray(to, from, pack) {\r\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\r\n        if (ar || !(i in from)) {\r\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\r\n            ar[i] = from[i];\r\n        }\r\n    }\r\n    return to.concat(ar || Array.prototype.slice.call(from));\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = Object.create((typeof AsyncIterator === \"function\" ? AsyncIterator : Object).prototype), verb(\"next\"), verb(\"throw\"), verb(\"return\", awaitReturn), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function awaitReturn(f) { return function (v) { return Promise.resolve(v).then(f, reject); }; }\r\n    function verb(n, f) { if (g[n]) { i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; if (f) i[n] = f(i[n]); } }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: false } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nvar __setModuleDefault = Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n};\r\n\r\nvar ownKeys = function(o) {\r\n    ownKeys = Object.getOwnPropertyNames || function (o) {\r\n        var ar = [];\r\n        for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;\r\n        return ar;\r\n    };\r\n    return ownKeys(o);\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== \"default\") __createBinding(result, mod, k[i]);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, state, kind, f) {\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\r\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, state, value, kind, f) {\r\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\r\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\r\n}\r\n\r\nexport function __classPrivateFieldIn(state, receiver) {\r\n    if (receiver === null || (typeof receiver !== \"object\" && typeof receiver !== \"function\")) throw new TypeError(\"Cannot use 'in' operator on non-object\");\r\n    return typeof state === \"function\" ? receiver === state : state.has(receiver);\r\n}\r\n\r\nexport function __addDisposableResource(env, value, async) {\r\n    if (value !== null && value !== void 0) {\r\n        if (typeof value !== \"object\" && typeof value !== \"function\") throw new TypeError(\"Object expected.\");\r\n        var dispose, inner;\r\n        if (async) {\r\n            if (!Symbol.asyncDispose) throw new TypeError(\"Symbol.asyncDispose is not defined.\");\r\n            dispose = value[Symbol.asyncDispose];\r\n        }\r\n        if (dispose === void 0) {\r\n            if (!Symbol.dispose) throw new TypeError(\"Symbol.dispose is not defined.\");\r\n            dispose = value[Symbol.dispose];\r\n            if (async) inner = dispose;\r\n        }\r\n        if (typeof dispose !== \"function\") throw new TypeError(\"Object not disposable.\");\r\n        if (inner) dispose = function() { try { inner.call(this); } catch (e) { return Promise.reject(e); } };\r\n        env.stack.push({ value: value, dispose: dispose, async: async });\r\n    }\r\n    else if (async) {\r\n        env.stack.push({ async: true });\r\n    }\r\n    return value;\r\n\r\n}\r\n\r\nvar _SuppressedError = typeof SuppressedError === \"function\" ? SuppressedError : function (error, suppressed, message) {\r\n    var e = new Error(message);\r\n    return e.name = \"SuppressedError\", e.error = error, e.suppressed = suppressed, e;\r\n};\r\n\r\nexport function __disposeResources(env) {\r\n    function fail(e) {\r\n        env.error = env.hasError ? new _SuppressedError(e, env.error, \"An error was suppressed during disposal.\") : e;\r\n        env.hasError = true;\r\n    }\r\n    var r, s = 0;\r\n    function next() {\r\n        while (r = env.stack.pop()) {\r\n            try {\r\n                if (!r.async && s === 1) return s = 0, env.stack.push(r), Promise.resolve().then(next);\r\n                if (r.dispose) {\r\n                    var result = r.dispose.call(r.value);\r\n                    if (r.async) return s |= 2, Promise.resolve(result).then(next, function(e) { fail(e); return next(); });\r\n                }\r\n                else s |= 1;\r\n            }\r\n            catch (e) {\r\n                fail(e);\r\n            }\r\n        }\r\n        if (s === 1) return env.hasError ? Promise.reject(env.error) : Promise.resolve();\r\n        if (env.hasError) throw env.error;\r\n    }\r\n    return next();\r\n}\r\n\r\nexport function __rewriteRelativeImportExtension(path, preserveJsx) {\r\n    if (typeof path === \"string\" && /^\\.\\.?\\//.test(path)) {\r\n        return path.replace(/\\.(tsx)$|((?:\\.d)?)((?:\\.[^./]+?)?)\\.([cm]?)ts$/i, function (m, tsx, d, ext, cm) {\r\n            return tsx ? preserveJsx ? \".jsx\" : \".js\" : d && (!ext || !cm) ? m : (d + ext + \".\" + cm.toLowerCase() + \"js\");\r\n        });\r\n    }\r\n    return path;\r\n}\r\n\r\nexport default {\r\n    __extends: __extends,\r\n    __assign: __assign,\r\n    __rest: __rest,\r\n    __decorate: __decorate,\r\n    __param: __param,\r\n    __esDecorate: __esDecorate,\r\n    __runInitializers: __runInitializers,\r\n    __propKey: __propKey,\r\n    __setFunctionName: __setFunctionName,\r\n    __metadata: __metadata,\r\n    __awaiter: __awaiter,\r\n    __generator: __generator,\r\n    __createBinding: __createBinding,\r\n    __exportStar: __exportStar,\r\n    __values: __values,\r\n    __read: __read,\r\n    __spread: __spread,\r\n    __spreadArrays: __spreadArrays,\r\n    __spreadArray: __spreadArray,\r\n    __await: __await,\r\n    __asyncGenerator: __asyncGenerator,\r\n    __asyncDelegator: __asyncDelegator,\r\n    __asyncValues: __asyncValues,\r\n    __makeTemplateObject: __makeTemplateObject,\r\n    __importStar: __importStar,\r\n    __importDefault: __importDefault,\r\n    __classPrivateFieldGet: __classPrivateFieldGet,\r\n    __classPrivateFieldSet: __classPrivateFieldSet,\r\n    __classPrivateFieldIn: __classPrivateFieldIn,\r\n    __addDisposableResource: __addDisposableResource,\r\n    __disposeResources: __disposeResources,\r\n    __rewriteRelativeImportExtension: __rewriteRelativeImportExtension,\r\n};\r\n","// Important: this file is generated from the 'build' script and should not be\n// edited directly\nexport const version = '4.1.5';\n","export const hasOwnProperty = Object.prototype.hasOwnProperty;\n\n/**\n * Simpler helper method to check for a boolean type simply for the benefit of\n * gaining better compression when minified by not needing to have multiple\n * `typeof` comparisons in the codebase.\n */\nexport function isBoolean(value: unknown): value is boolean {\n    return typeof value === 'boolean';\n}\n\n/**\n * Truncates the `str` at `len - ellipsisChars.length`, and adds the `ellipsisChars` to the\n * end of the string (by default, two periods: '..'). If the `str` length does not exceed\n * `len`, the string will be returned unchanged.\n *\n * @param {String} str The string to truncate and add an ellipsis to.\n * @param {Number} truncateLen The length to truncate the string at.\n * @param {String} [ellipsisChars=...] The ellipsis character(s) to add to the end of `str`\n *   when truncated. Defaults to '...'\n */\nexport function ellipsis(str: string, truncateLen: number, ellipsisChars?: string) {\n    let ellipsisLength: number;\n\n    if (str.length > truncateLen) {\n        if (ellipsisChars == null) {\n            ellipsisChars = '&hellip;';\n            ellipsisLength = 3;\n        } else {\n            ellipsisLength = ellipsisChars.length;\n        }\n\n        str = str.substring(0, truncateLen - ellipsisLength) + ellipsisChars;\n    }\n    return str;\n}\n\n/**\n * Removes array elements based on a filtering function. Mutates the input\n * array.\n *\n * Using this instead of the ES5 Array.prototype.filter() function to prevent\n * creating many new arrays in memory for filtering.\n *\n * @param arr The array to remove elements from. This array is mutated.\n * @param fn The predicate function which should return `true` to remove an\n *   element.\n */\nexport function removeWithPredicate<T>(arr: T[], fn: (item: T) => boolean) {\n    for (let i = arr.length - 1; i >= 0; i--) {\n        if (fn(arr[i]) === true) {\n            arr.splice(i, 1);\n        }\n    }\n}\n\n/**\n * Function that should never be called but is used to check that every\n * enum value is handled using TypeScript's 'never' type.\n */\n/* istanbul ignore next */\nexport function assertNever(theValue: never): never {\n    throw new Error(`Unhandled case for value: '${theValue}'`);\n}\n","import { hasOwnProperty } from './utils';\n\n// Regular expression to match whitespace\nexport const whitespaceRe = /\\s+/;\n\n/**\n * @class Autolinker.HtmlTag\n * @extends Object\n *\n * Represents an HTML tag, which can be used to easily build/modify HTML tags programmatically.\n *\n * Autolinker uses this abstraction to create HTML tags, and then write them out as strings. You may also use\n * this class in your code, especially within a {@link Autolinker#replaceFn replaceFn}.\n *\n * ## Examples\n *\n * Example instantiation:\n *\n *     var tag = new Autolinker.HtmlTag( {\n *         tagName : 'a',\n *         attrs   : { 'href': 'http://google.com', 'class': 'external-link' },\n *         innerHtml : 'Google'\n *     } );\n *\n *     tag.toAnchorString();  // <a href=\"http://google.com\" class=\"external-link\">Google</a>\n *\n *     // Individual accessor methods\n *     tag.getTagName();                 // 'a'\n *     tag.getAttr( 'href' );            // 'http://google.com'\n *     tag.hasClass( 'external-link' );  // true\n *\n *\n * Using mutator methods (which may be used in combination with instantiation config properties):\n *\n *     var tag = new Autolinker.HtmlTag();\n *     tag.setTagName( 'a' );\n *     tag.setAttr( 'href', 'http://google.com' );\n *     tag.addClass( 'external-link' );\n *     tag.setInnerHtml( 'Google' );\n *\n *     tag.getTagName();                 // 'a'\n *     tag.getAttr( 'href' );            // 'http://google.com'\n *     tag.hasClass( 'external-link' );  // true\n *\n *     tag.toAnchorString();  // <a href=\"http://google.com\" class=\"external-link\">Google</a>\n *\n *\n * ## Example use within a {@link Autolinker#replaceFn replaceFn}\n *\n *     var html = Autolinker.link( \"Test google.com\", {\n *         replaceFn : function( match ) {\n *             var tag = match.buildTag();  // returns an {@link Autolinker.HtmlTag} instance, configured with the Match's href and anchor text\n *             tag.setAttr( 'rel', 'nofollow' );\n *\n *             return tag;\n *         }\n *     } );\n *\n *     // generated html:\n *     //   Test <a href=\"http://google.com\" target=\"_blank\" rel=\"nofollow\">google.com</a>\n *\n *\n * ## Example use with a new tag for the replacement\n *\n *     var html = Autolinker.link( \"Test google.com\", {\n *         replaceFn : function( match ) {\n *             var tag = new Autolinker.HtmlTag( {\n *                 tagName : 'button',\n *                 attrs   : { 'title': 'Load URL: ' + match.getAnchorHref() },\n *                 innerHtml : 'Load URL: ' + match.getAnchorText()\n *             } );\n *\n *             return tag;\n *         }\n *     } );\n *\n *     // generated html:\n *     //   Test <button title=\"Load URL: http://google.com\">Load URL: google.com</button>\n */\nexport class HtmlTag {\n    /**\n     * @cfg {String} tagName\n     *\n     * The tag name. Ex: 'a', 'button', etc.\n     *\n     * Not required at instantiation time, but should be set using {@link #setTagName} before {@link #toAnchorString}\n     * is executed.\n     */\n    private tagName: string = ''; // default value just to get the above doc comment in the ES5 output and documentation generator\n\n    /**\n     * @cfg {Object.<String, String>} attrs\n     *\n     * An key/value Object (map) of attributes to create the tag with. The keys are the attribute names, and the\n     * values are the attribute values.\n     */\n    private attrs: { [key: string]: string } = {}; // default value just to get the above doc comment in the ES5 output and documentation generator\n\n    /**\n     * @cfg {String} innerHTML\n     *\n     * The inner HTML for the tag.\n     */\n    private innerHTML: string = ''; // default value just to get the above doc comment in the ES5 output and documentation generator\n\n    /**\n     * @method constructor\n     * @param {Object} [cfg] The configuration properties for this class, in an Object (map)\n     */\n    constructor(cfg: HtmlTagCfg = {}) {\n        this.tagName = cfg.tagName || '';\n        this.attrs = cfg.attrs || {};\n        this.innerHTML = cfg.innerHtml || cfg.innerHTML || ''; // accept either the camelCased form or the fully capitalized acronym as in the DOM\n    }\n\n    /**\n     * Sets the tag name that will be used to generate the tag with.\n     *\n     * @param {String} tagName\n     * @return {Autolinker.HtmlTag} This HtmlTag instance, so that method calls may be chained.\n     */\n    setTagName(tagName: string): this {\n        this.tagName = tagName;\n        return this;\n    }\n\n    /**\n     * Retrieves the tag name.\n     *\n     * @return {String}\n     */\n    getTagName(): string {\n        return this.tagName;\n    }\n\n    /**\n     * Sets an attribute on the HtmlTag.\n     *\n     * @param {String} attrName The attribute name to set.\n     * @param {String} attrValue The attribute value to set.\n     * @return {Autolinker.HtmlTag} This HtmlTag instance, so that method calls may be chained.\n     */\n    setAttr(attrName: string, attrValue: string): this {\n        const tagAttrs = this.getAttrs();\n        tagAttrs[attrName] = attrValue;\n\n        return this;\n    }\n\n    /**\n     * Retrieves an attribute from the HtmlTag. If the attribute does not exist, returns `undefined`.\n     *\n     * @param {String} attrName The attribute name to retrieve.\n     * @return {String} The attribute's value, or `undefined` if it does not exist on the HtmlTag.\n     */\n    getAttr(attrName: string): string {\n        return this.getAttrs()[attrName];\n    }\n\n    /**\n     * Sets one or more attributes on the HtmlTag.\n     *\n     * @param {Object.<String, String>} attrs A key/value Object (map) of the attributes to set.\n     * @return {Autolinker.HtmlTag} This HtmlTag instance, so that method calls may be chained.\n     */\n    setAttrs(attrs: { [attr: string]: string }): this {\n        Object.assign(this.getAttrs(), attrs);\n\n        return this;\n    }\n\n    /**\n     * Retrieves the attributes Object (map) for the HtmlTag.\n     *\n     * @return {Object.<String, String>} A key/value object of the attributes for the HtmlTag.\n     */\n    getAttrs(): { [key: string]: string } {\n        return this.attrs;\n    }\n\n    /**\n     * Sets the provided `cssClass`, overwriting any current CSS classes on the HtmlTag.\n     *\n     * @param {String} cssClass One or more space-separated CSS classes to set (overwrite).\n     * @return {Autolinker.HtmlTag} This HtmlTag instance, so that method calls may be chained.\n     */\n    setClass(cssClass: string): this {\n        return this.setAttr('class', cssClass);\n    }\n\n    /**\n     * Convenience method to add one or more CSS classes to the HtmlTag. Will not add duplicate CSS classes.\n     *\n     * @param {String} cssClass One or more space-separated CSS classes to add.\n     * @return {Autolinker.HtmlTag} This HtmlTag instance, so that method calls may be chained.\n     */\n    addClass(cssClass: string): this {\n        const classAttr = this.getClass();\n        const classes = !classAttr ? [] : classAttr.split(whitespaceRe);\n        const newClasses = cssClass.split(whitespaceRe);\n        let newClass: string | undefined;\n\n        while ((newClass = newClasses.shift())) {\n            if (classes.indexOf(newClass) === -1) {\n                classes.push(newClass);\n            }\n        }\n\n        this.getAttrs()['class'] = classes.join(' ');\n        return this;\n    }\n\n    /**\n     * Convenience method to remove one or more CSS classes from the HtmlTag.\n     *\n     * @param {String} cssClass One or more space-separated CSS classes to remove.\n     * @return {Autolinker.HtmlTag} This HtmlTag instance, so that method calls may be chained.\n     */\n    removeClass(cssClass: string): this {\n        const classAttr = this.getClass();\n        const classes = !classAttr ? [] : classAttr.split(whitespaceRe);\n        const removeClasses = cssClass.split(whitespaceRe);\n        let removeClass: string | undefined;\n\n        while (classes.length && (removeClass = removeClasses.shift())) {\n            const idx = classes.indexOf(removeClass);\n            if (idx !== -1) {\n                classes.splice(idx, 1);\n            }\n        }\n\n        this.getAttrs()['class'] = classes.join(' ');\n        return this;\n    }\n\n    /**\n     * Convenience method to retrieve the CSS class(es) for the HtmlTag, which will each be separated by spaces when\n     * there are multiple.\n     *\n     * @return {String}\n     */\n    getClass(): string {\n        return this.getAttrs()['class'] || '';\n    }\n\n    /**\n     * Convenience method to check if the tag has a CSS class or not.\n     *\n     * @param {String} cssClass The CSS class to check for.\n     * @return {Boolean} `true` if the HtmlTag has the CSS class, `false` otherwise.\n     */\n    hasClass(cssClass: string): boolean {\n        return (' ' + this.getClass() + ' ').indexOf(' ' + cssClass + ' ') !== -1;\n    }\n\n    /**\n     * Sets the inner HTML for the tag.\n     *\n     * @param {String} html The inner HTML to set.\n     * @return {Autolinker.HtmlTag} This HtmlTag instance, so that method calls may be chained.\n     */\n    setInnerHTML(html: string): this {\n        this.innerHTML = html;\n\n        return this;\n    }\n\n    /**\n     * Backwards compatibility method name.\n     *\n     * @param {String} html The inner HTML to set.\n     * @return {Autolinker.HtmlTag} This HtmlTag instance, so that method calls may be chained.\n     */\n    setInnerHtml(html: string): this {\n        return this.setInnerHTML(html);\n    }\n\n    /**\n     * Retrieves the inner HTML for the tag.\n     *\n     * @return {String}\n     */\n    getInnerHTML(): string {\n        return this.innerHTML || '';\n    }\n\n    /**\n     * Backward compatibility method name.\n     *\n     * @return {String}\n     */\n    getInnerHtml(): string {\n        return this.getInnerHTML();\n    }\n\n    /**\n     * Generates the HTML string for the tag.\n     *\n     * @return {String}\n     */\n    toAnchorString(): string {\n        const tagName = this.getTagName();\n        let attrsStr = this.buildAttrsStr();\n\n        attrsStr = attrsStr ? ' ' + attrsStr : ''; // prepend a space if there are actually attributes\n\n        return ['<', tagName, attrsStr, '>', this.getInnerHtml(), '</', tagName, '>'].join('');\n    }\n\n    /**\n     * Support method for {@link #toAnchorString}, returns the string space-separated key=\"value\" pairs, used to populate\n     * the stringified HtmlTag.\n     *\n     * @protected\n     * @return {String} Example return: `attr1=\"value1\" attr2=\"value2\"`\n     */\n    protected buildAttrsStr(): string {\n        const attrs = this.getAttrs(),\n            attrsArr: string[] = [];\n\n        for (const prop in attrs) {\n            if (hasOwnProperty.call(attrs, prop)) {\n                attrsArr.push(prop + '=\"' + attrs[prop] + '\"');\n            }\n        }\n        return attrsArr.join(' ');\n    }\n}\n\nexport interface HtmlTagCfg {\n    tagName?: string;\n    attrs?: { [key: string]: string };\n    innerHtml?: string;\n    innerHTML?: string;\n}\n","/**\n * Date: 2015-10-05\n * Author: Kasper Søfren <soefritz@gmail.com> (https://github.com/kafoso)\n *\n * A truncation feature, where the ellipsis will be placed at a section within\n * the URL making it still somewhat human readable.\n *\n * @param {String} url\t\t\t\t\t\t A URL.\n * @param {Number} truncateLen\t\t The maximum length of the truncated output URL string.\n * @param {String} ellipsisChars\t The characters to place within the url, e.g. \"...\".\n * @return {String} The truncated URL.\n */\nexport function truncateSmart(url: string, truncateLen: number, ellipsisChars?: string) {\n    let ellipsisLengthBeforeParsing: number;\n    let ellipsisLength: number;\n\n    if (ellipsisChars == null) {\n        ellipsisChars = '&hellip;';\n        ellipsisLength = 3;\n        ellipsisLengthBeforeParsing = 8;\n    } else {\n        ellipsisLength = ellipsisChars.length;\n        ellipsisLengthBeforeParsing = ellipsisChars.length;\n    }\n\n    // If the URL is shorter than the truncate length, return it as is\n    if (url.length <= truncateLen) {\n        return url;\n    }\n\n    const availableLength = truncateLen - ellipsisLength;\n    const urlObj = parseUrl(url);\n\n    // Clean up the URL by removing any malformed query string\n    // (e.g. \"?foo=bar?ignorethis\")\n    if (urlObj.query) {\n        const matchQuery = urlObj.query.match(/^(.*?)(?=(\\?|#))(.*?)$/i);\n        if (matchQuery) {\n            // Malformed URL; two or more \"?\". Removed any content behind the 2nd.\n            urlObj.query = urlObj.query.substr(0, matchQuery[1].length);\n            url = buildUrl(urlObj);\n        }\n    }\n    if (url.length <= truncateLen) {\n        return url; // removing a malformed query string brought the URL under the truncateLength\n    }\n\n    // Clean up the URL by removing 'www.' from the host if it exists\n    if (urlObj.host) {\n        urlObj.host = urlObj.host.replace(/^www\\./, '');\n        url = buildUrl(urlObj);\n    }\n    if (url.length <= truncateLen) {\n        return url; // removing 'www.' brought the URL under the truncateLength\n    }\n\n    // Process and build the truncated URL, starting with the hostname\n    let truncatedUrl = '';\n    if (urlObj.host) {\n        truncatedUrl += urlObj.host;\n    }\n    if (truncatedUrl.length >= availableLength) {\n        if (urlObj.host!.length === truncateLen) {\n            return (urlObj.host!.substr(0, truncateLen - ellipsisLength) + ellipsisChars).substr(\n                0,\n                availableLength + ellipsisLengthBeforeParsing\n            );\n        }\n        return buildSegment(truncatedUrl, availableLength, ellipsisChars).substr(\n            0,\n            availableLength + ellipsisLengthBeforeParsing\n        );\n    }\n\n    // If we still have available chars left, add the path and query string\n    let pathAndQuery = '';\n    if (urlObj.path) {\n        pathAndQuery += '/' + urlObj.path;\n    }\n    if (urlObj.query) {\n        pathAndQuery += '?' + urlObj.query;\n    }\n    if (pathAndQuery) {\n        if ((truncatedUrl + pathAndQuery).length >= availableLength) {\n            if ((truncatedUrl + pathAndQuery).length == truncateLen) {\n                return (truncatedUrl + pathAndQuery).substr(0, truncateLen);\n            }\n            const remainingAvailableLength = availableLength - truncatedUrl.length;\n            return (\n                truncatedUrl + buildSegment(pathAndQuery, remainingAvailableLength, ellipsisChars)\n            ).substr(0, availableLength + ellipsisLengthBeforeParsing);\n        } else {\n            truncatedUrl += pathAndQuery;\n        }\n    }\n\n    // If we still have available chars left, add the fragment\n    if (urlObj.fragment) {\n        const fragment = '#' + urlObj.fragment;\n        if ((truncatedUrl + fragment).length >= availableLength) {\n            if ((truncatedUrl + fragment).length == truncateLen) {\n                return (truncatedUrl + fragment).substr(0, truncateLen);\n            }\n            const remainingAvailableLength2 = availableLength - truncatedUrl.length;\n            return (\n                truncatedUrl + buildSegment(fragment, remainingAvailableLength2, ellipsisChars)\n            ).substr(0, availableLength + ellipsisLengthBeforeParsing);\n        } else {\n            truncatedUrl += fragment;\n        }\n    }\n\n    // If we still have available chars left, add the scheme\n    if (urlObj.scheme && urlObj.host) {\n        const scheme = urlObj.scheme + '://';\n        if ((truncatedUrl + scheme).length < availableLength) {\n            return (scheme + truncatedUrl).substr(0, truncateLen);\n        }\n    }\n    if (truncatedUrl.length <= truncateLen) {\n        return truncatedUrl;\n    }\n\n    let end = '';\n    if (availableLength > 0) {\n        end = truncatedUrl.substr(-1 * Math.floor(availableLength / 2));\n    }\n    return (truncatedUrl.substr(0, Math.ceil(availableLength / 2)) + ellipsisChars + end).substr(\n        0,\n        availableLength + ellipsisLengthBeforeParsing\n    );\n}\n\n/**\n * Parses a URL into its components: scheme, host, path, query, and fragment.\n */\nfunction parseUrl(url: string): UrlObject {\n    // Functionality inspired by PHP function of same name\n    const urlObj: UrlObject = {};\n    let urlSub = url;\n\n    // Parse scheme\n    let match = urlSub.match(/^([a-z]+):\\/\\//i);\n    if (match) {\n        urlObj.scheme = match[1];\n        urlSub = urlSub.slice(match[0].length);\n    }\n\n    // Parse host\n    match = urlSub.match(/^(.*?)(?=(\\?|#|\\/|$))/i);\n    if (match) {\n        urlObj.host = match[1];\n        urlSub = urlSub.slice(match[0].length);\n    }\n\n    // Parse path\n    match = urlSub.match(/^\\/(.*?)(?=(\\?|#|$))/i);\n    if (match) {\n        urlObj.path = match[1];\n        urlSub = urlSub.slice(match[0].length);\n    }\n\n    // Parse query\n    match = urlSub.match(/^\\?(.*?)(?=(#|$))/i);\n    if (match) {\n        urlObj.query = match[1];\n        urlSub = urlSub.slice(match[0].length);\n    }\n\n    // Parse fragment\n    match = urlSub.match(/^#(.*?)$/i);\n    if (match) {\n        urlObj.fragment = match[1];\n        //urlSub = urlSub.slice(match[0].length);  -- not used. Uncomment if adding another block.\n    }\n\n    return urlObj;\n}\n\nfunction buildUrl(urlObj: UrlObject): string {\n    let url = '';\n    if (urlObj.scheme && urlObj.host) {\n        url += urlObj.scheme + '://';\n    }\n    if (urlObj.host) {\n        url += urlObj.host;\n    }\n    if (urlObj.path) {\n        url += '/' + urlObj.path;\n    }\n    if (urlObj.query) {\n        url += '?' + urlObj.query;\n    }\n    if (urlObj.fragment) {\n        url += '#' + urlObj.fragment;\n    }\n    return url;\n}\n\nfunction buildSegment(segment: string, remainingAvailableLength: number, ellipsisChars: string) {\n    const remainingAvailableLengthHalf = remainingAvailableLength / 2;\n    const startOffset = Math.ceil(remainingAvailableLengthHalf);\n    const endOffset = -1 * Math.floor(remainingAvailableLengthHalf);\n\n    let end = '';\n    if (endOffset < 0) {\n        end = segment.substr(endOffset);\n    }\n    return segment.substr(0, startOffset) + ellipsisChars + end;\n}\n\ninterface UrlObject {\n    scheme?: string;\n    host?: string;\n    path?: string;\n    query?: string;\n    fragment?: string;\n}\n","/**\n * Date: 2015-10-05\n * Author: Kasper Søfren <soefritz@gmail.com> (https://github.com/kafoso)\n *\n * A truncation feature, where the ellipsis will be placed in the dead-center of the URL.\n *\n * @param {String} url             A URL.\n * @param {Number} truncateLen     The maximum length of the truncated output URL string.\n * @param {String} ellipsisChars   The characters to place within the url, e.g. \"..\".\n * @return {String} The truncated URL.\n */\nexport function truncateMiddle(url: string, truncateLen: number, ellipsisChars?: string) {\n    if (url.length <= truncateLen) {\n        return url;\n    }\n\n    let ellipsisLengthBeforeParsing: number;\n    let ellipsisLength: number;\n\n    if (ellipsisChars == null) {\n        ellipsisChars = '&hellip;';\n        ellipsisLengthBeforeParsing = 8;\n        ellipsisLength = 3;\n    } else {\n        ellipsisLengthBeforeParsing = ellipsisChars.length;\n        ellipsisLength = ellipsisChars.length;\n    }\n\n    const availableLength = truncateLen - ellipsisLength;\n    let end = '';\n    if (availableLength > 0) {\n        end = url.substr(-1 * Math.floor(availableLength / 2));\n    }\n    return (url.substr(0, Math.ceil(availableLength / 2)) + ellipsisChars + end).substr(\n        0,\n        availableLength + ellipsisLengthBeforeParsing\n    );\n}\n","import { ellipsis } from '../utils';\n\n/**\n * A truncation feature where the ellipsis will be placed at the end of the URL.\n *\n * @param {String} anchorText\n * @param {Number} truncateLen The maximum length of the truncated output URL string.\n * @param {String} ellipsisChars The characters to place within the url, e.g. \"..\".\n * @return {String} The truncated URL.\n */\nexport function truncateEnd(anchorText: string, truncateLen: number, ellipsisChars?: string) {\n    return ellipsis(anchorText, truncateLen, ellipsisChars);\n}\n","import { HtmlTag } from './html-tag';\nimport { TruncateConfigObj } from './autolinker';\nimport { truncateSmart } from './truncate/truncate-smart';\nimport { truncateMiddle } from './truncate/truncate-middle';\nimport { truncateEnd } from './truncate/truncate-end';\nimport { AbstractMatch } from './match/abstract-match';\n\n/**\n * @protected\n * @class Autolinker.AnchorTagBuilder\n * @extends Object\n *\n * Builds anchor (&lt;a&gt;) tags for the Autolinker utility when a match is\n * found.\n *\n * Normally this class is instantiated, configured, and used internally by an\n * {@link Autolinker} instance, but may actually be used indirectly in a\n * {@link Autolinker#replaceFn replaceFn} to create {@link Autolinker.HtmlTag HtmlTag}\n * instances which may be modified before returning from the\n * {@link Autolinker#replaceFn replaceFn}. For example:\n *\n *     var html = Autolinker.link(\"Test google.com\", {\n *         replaceFn: function(match) {\n *             var tag = match.buildTag();  // returns an {@link Autolinker.HtmlTag} instance\n *             tag.setAttr('rel', 'nofollow');\n *\n *             return tag;\n *         }\n *     });\n *\n *     // generated html:\n *     //   Test <a href=\"http://google.com\" target=\"_blank\" rel=\"nofollow\">google.com</a>\n */\nexport class AnchorTagBuilder {\n    /**\n     * @cfg {Boolean} newWindow\n     * @inheritdoc Autolinker#newWindow\n     */\n    private readonly newWindow: boolean = false; // default value just to get the above doc comment in the ES5 output and documentation generator\n\n    /**\n     * @cfg {Object} truncate\n     * @inheritdoc Autolinker#truncate\n     */\n    private readonly truncate: TruncateConfigObj = {}; // default value just to get the above doc comment in the ES5 output and documentation generator\n\n    /**\n     * @cfg {String} className\n     * @inheritdoc Autolinker#className\n     */\n    private readonly className: string = ''; // default value just to get the above doc comment in the ES5 output and documentation generator\n\n    /**\n     * @method constructor\n     * @param {Object} [cfg] The configuration options for the AnchorTagBuilder instance, specified in an Object (map).\n     */\n    constructor(cfg: AnchorTagBuilderCfg = {}) {\n        this.newWindow = cfg.newWindow || false;\n        this.truncate = cfg.truncate || {};\n        this.className = cfg.className || '';\n    }\n\n    /**\n     * Generates the actual anchor (&lt;a&gt;) tag to use in place of the\n     * matched text, via its `match` object.\n     *\n     * @param match The Match instance to generate an anchor tag from.\n     * @return The HtmlTag instance for the anchor tag.\n     */\n    public build(match: AbstractMatch) {\n        return new HtmlTag({\n            tagName: 'a',\n            attrs: this.createAttrs(match),\n            innerHtml: this.processAnchorText(match.getAnchorText()),\n        });\n    }\n\n    /**\n     * Creates the Object (map) of the HTML attributes for the anchor (&lt;a&gt;)\n     *   tag being generated.\n     *\n     * @protected\n     * @param match The Match instance to generate an anchor tag from.\n     * @return A key/value Object (map) of the anchor tag's attributes.\n     */\n    protected createAttrs(match: AbstractMatch) {\n        const attrs: { [attrName: string]: string } = {\n            href: match.getAnchorHref(), // we'll always have the `href` attribute\n        };\n\n        const cssClass = this.createCssClass(match);\n        if (cssClass) {\n            attrs['class'] = cssClass;\n        }\n        if (this.newWindow) {\n            attrs['target'] = '_blank';\n            attrs['rel'] = 'noopener noreferrer'; // Issue #149. See https://mathiasbynens.github.io/rel-noopener/\n        }\n\n        if (this.truncate.length && this.truncate.length < match.getAnchorText().length) {\n            attrs['title'] = match.getAnchorHref();\n        }\n\n        return attrs;\n    }\n\n    /**\n     * Creates the CSS class that will be used for a given anchor tag, based on\n     * the `matchType` and the {@link #className} config.\n     *\n     * Example returns:\n     *\n     * - \"\"                                      // no {@link #className}\n     * - \"myLink myLink-url\"                     // url match\n     * - \"myLink myLink-email\"                   // email match\n     * - \"myLink myLink-phone\"                   // phone match\n     * - \"myLink myLink-hashtag\"                 // hashtag match\n     * - \"myLink myLink-mention myLink-twitter\"  // mention match with Twitter service\n     *\n     * @protected\n     * @param match The Match instance to generate an\n     *   anchor tag from.\n     * @return The CSS class string for the link. Example return:\n     *   \"myLink myLink-url\". If no {@link #className} was configured, returns\n     *   an empty string.\n     */\n    protected createCssClass(match: AbstractMatch): string {\n        const className = this.className;\n\n        if (!className) {\n            return '';\n        } else {\n            const returnClasses = [className],\n                cssClassSuffixes = match.getCssClassSuffixes();\n\n            for (let i = 0, len = cssClassSuffixes.length; i < len; i++) {\n                returnClasses.push(className + '-' + cssClassSuffixes[i]);\n            }\n            return returnClasses.join(' ');\n        }\n    }\n\n    /**\n     * Processes the `anchorText` by truncating the text according to the\n     * {@link #truncate} config.\n     *\n     * @private\n     * @param anchorText The anchor tag's text (i.e. what will be\n     *   displayed).\n     * @return The processed `anchorText`.\n     */\n    private processAnchorText(anchorText: string): string {\n        anchorText = this.doTruncate(anchorText);\n\n        return anchorText;\n    }\n\n    /**\n     * Performs the truncation of the `anchorText` based on the {@link #truncate}\n     * option. If the `anchorText` is longer than the length specified by the\n     * {@link #truncate} option, the truncation is performed based on the\n     * `location` property. See {@link #truncate} for details.\n     *\n     * @private\n     * @param anchorText The anchor tag's text (i.e. what will be\n     *   displayed).\n     * @return The truncated anchor text.\n     */\n    private doTruncate(anchorText: string): string {\n        const truncate = this.truncate;\n        if (!truncate.length) return anchorText;\n\n        const truncateLength = truncate.length,\n            truncateLocation = truncate.location;\n\n        if (truncateLocation === 'smart') {\n            return truncateSmart(anchorText, truncateLength);\n        } else if (truncateLocation === 'middle') {\n            return truncateMiddle(anchorText, truncateLength);\n        } else {\n            return truncateEnd(anchorText, truncateLength);\n        }\n    }\n}\n\nexport interface AnchorTagBuilderCfg {\n    newWindow?: boolean;\n    truncate?: TruncateConfigObj;\n    className?: string;\n}\n","import { AnchorTagBuilder } from '../anchor-tag-builder';\nimport { HtmlTag } from '../html-tag';\nimport { MatchType } from './match';\n\n/**\n * @abstract\n * @class Autolinker.match.AbstractMatch\n *\n * Represents a match found in an input string which should be Autolinked. A Match object is what is provided in a\n * {@link Autolinker#replaceFn replaceFn}, and may be used to query for details about the match.\n *\n * For example:\n *\n *     var input = \"...\";  // string with URLs, Email Addresses, and Mentions (Twitter, Instagram, Soundcloud)\n *\n *     var linkedText = Autolinker.link( input, {\n *         replaceFn : function( match ) {\n *             console.log( \"href = \", match.getAnchorHref() );\n *             console.log( \"text = \", match.getAnchorText() );\n *\n *             switch( match.getType() ) {\n *                 case 'url' :\n *                     console.log( \"url: \", match.getUrl() );\n *\n *                 case 'email' :\n *                     console.log( \"email: \", match.getEmail() );\n *\n *                 case 'mention' :\n *                     console.log( \"mention: \", match.getMention() );\n *             }\n *         }\n *     } );\n *\n * See the {@link Autolinker} class for more details on using the {@link Autolinker#replaceFn replaceFn}.\n */\nexport abstract class AbstractMatch {\n    /**\n     * @public\n     * @property {'url'/'email'/'hashtag'/'mention'/'phone'} type\n     *\n     * A string name for the type of match that this class represents. Can be\n     * used in a TypeScript discriminating union to type-narrow from the\n     * `Match` type.\n     */\n    public abstract readonly type: MatchType;\n\n    /**\n     * @cfg {Autolinker.AnchorTagBuilder} tagBuilder (required)\n     *\n     * Reference to the AnchorTagBuilder instance to use to generate an anchor\n     * tag for the Match.\n     */\n    // @ts-expect-error Property used just to get the above doc comment into the ES5 output and documentation generator\n    private _ = null;\n\n    // Actual property for the above jsdoc comment\n    private readonly tagBuilder: AnchorTagBuilder;\n\n    /**\n     * @cfg {String} matchedText (required)\n     *\n     * The original text that was matched by the {@link Autolinker.matcher.Matcher}.\n     */\n    protected readonly matchedText: string = ''; // default value just to get the above doc comment in the ES5 output and documentation generator\n\n    /**\n     * @cfg {Number} offset (required)\n     *\n     * The offset of where the match was made in the input string.\n     */\n    private offset: number = 0; // default value just to get the above doc comment in the ES5 output and documentation generator\n\n    /**\n     * @member Autolinker.match.Match\n     * @method constructor\n     * @param {Object} cfg The configuration properties for the Match\n     *   instance, specified in an Object (map).\n     */\n    constructor(cfg: AbstractMatchConfig) {\n        this.tagBuilder = cfg.tagBuilder;\n        this.matchedText = cfg.matchedText;\n        this.offset = cfg.offset;\n    }\n\n    /**\n     * Returns a string name for the type of match that this class represents.\n     *\n     * @deprecated Use {@link #type} instead which can assist in type-narrowing\n     *   for TypeScript.\n     * @abstract\n     * @return {String}\n     */\n    public abstract getType(): MatchType;\n\n    /**\n     * Returns the original text that was matched.\n     *\n     * @return {String}\n     */\n    public getMatchedText(): string {\n        return this.matchedText;\n    }\n\n    /**\n     * Sets the {@link #offset} of where the match was made in the input string.\n     *\n     * A {@link Autolinker.matcher.Matcher} will be fed only HTML text nodes,\n     * and will therefore set an original offset that is relative to the HTML\n     * text node itself. However, we want this offset to be relative to the full\n     * HTML input string, and thus if using {@link Autolinker#parse} (rather\n     * than calling a {@link Autolinker.matcher.Matcher} directly), then this\n     * offset is corrected after the Matcher itself has done its job.\n     *\n     * @private\n     * @param {Number} offset\n     */\n    setOffset(offset: number): void {\n        this.offset = offset;\n    }\n\n    /**\n     * Returns the offset of where the match was made in the input string. This\n     * is the 0-based index of the match.\n     *\n     * @return {Number}\n     */\n    public getOffset(): number {\n        return this.offset;\n    }\n\n    /**\n     * Returns the anchor href that should be generated for the match.\n     *\n     * @abstract\n     * @return {String}\n     */\n    public abstract getAnchorHref(): string;\n\n    /**\n     * Returns the anchor text that should be generated for the match.\n     *\n     * @abstract\n     * @return {String}\n     */\n    public abstract getAnchorText(): string;\n\n    /**\n     * Returns the CSS class suffix(es) for this match.\n     *\n     * A CSS class suffix is appended to the {@link Autolinker#className} in\n     * the {@link Autolinker.AnchorTagBuilder} when a match is translated into\n     * an anchor tag.\n     *\n     * For example, if {@link Autolinker#className} was configured as 'myLink',\n     * and this method returns `[ 'url' ]`, the final class name of the element\n     * will become: 'myLink myLink-url'.\n     *\n     * The match may provide multiple CSS class suffixes to be appended to the\n     * {@link Autolinker#className} in order to facilitate better styling\n     * options for different match criteria. See {@link Autolinker.match.Mention}\n     * for an example.\n     *\n     * By default, this method returns a single array with the match's\n     * {@link #getType type} name, but may be overridden by subclasses.\n     *\n     * @return {String[]}\n     */\n    public getCssClassSuffixes(): string[] {\n        return [this.type];\n    }\n\n    /**\n     * Builds and returns an {@link Autolinker.HtmlTag} instance based on the\n     * Match.\n     *\n     * This can be used to easily generate anchor tags from matches, and either\n     * return their HTML string, or modify them before doing so.\n     *\n     * Example Usage:\n     *\n     *     var tag = match.buildTag();\n     *     tag.addClass( 'cordova-link' );\n     *     tag.setAttr( 'target', '_system' );\n     *\n     *     tag.toAnchorString();  // <a href=\"http://google.com\" class=\"cordova-link\" target=\"_system\">Google</a>\n     *\n     * Example Usage in {@link Autolinker#replaceFn}:\n     *\n     *     var html = Autolinker.link( \"Test google.com\", {\n     *         replaceFn : function( match ) {\n     *             var tag = match.buildTag();  // returns an {@link Autolinker.HtmlTag} instance\n     *             tag.setAttr( 'rel', 'nofollow' );\n     *\n     *             return tag;\n     *         }\n     *     } );\n     *\n     *     // generated html:\n     *     //   Test <a href=\"http://google.com\" target=\"_blank\" rel=\"nofollow\">google.com</a>\n     */\n    public buildTag(): HtmlTag {\n        return this.tagBuilder.build(this);\n    }\n}\n\nexport interface AbstractMatchConfig {\n    tagBuilder: AnchorTagBuilder;\n    matchedText: string;\n    offset: number;\n}\n","\n// NOTE: THIS FILE IS GENERATED. DO NOT EDIT.\n// INSTEAD, RUN: npm run generate-char-utils\n\n/**\n * Determines if the given character `c` matches the regular expression /[\\x00-\\x1F\\x7F]/ \n * by checking it via character code in a binary search fashion.\n * \n * This technique speeds this function up by a factor of ~10x vs. running RegExp.prototype.test() \n * on the character itself.\n * \n * NOTE: This function is generated. Do not edit manually. To regenerate, run: \n * \n *     npm run generate-char-utils\n */\nexport function isControlChar(c: number): boolean {\n    return ((c >= 0 && c <= 31) || c == 127);\n}\n\n/**\n * Determines if the given character `c` matches the regular expression /[A-Za-z]/ \n * by checking it via character code in a binary search fashion.\n * \n * This technique speeds this function up by a factor of ~10x vs. running RegExp.prototype.test() \n * on the character itself.\n * \n * NOTE: This function is generated. Do not edit manually. To regenerate, run: \n * \n *     npm run generate-char-utils\n */\nexport function isAsciiLetterChar(c: number): boolean {\n    return ((c >= 65 && c <= 90) || (c >= 97 && c <= 122));\n}\n\n/**\n * Determines if the given character `c` matches the regular expression /\\d/ \n * by checking it via character code in a binary search fashion.\n * \n * This technique speeds this function up by a factor of ~10x vs. running RegExp.prototype.test() \n * on the character itself.\n * \n * NOTE: This function is generated. Do not edit manually. To regenerate, run: \n * \n *     npm run generate-char-utils\n */\nexport function isDigitChar(c: number): boolean {\n    return (c >= 48 && c <= 57);\n}\n\n/**\n * Determines if the given character `c` matches the regular expression /['\"]/ \n * by checking it via character code in a binary search fashion.\n * \n * This technique speeds this function up by a factor of ~10x vs. running RegExp.prototype.test() \n * on the character itself.\n * \n * NOTE: This function is generated. Do not edit manually. To regenerate, run: \n * \n *     npm run generate-char-utils\n */\nexport function isQuoteChar(c: number): boolean {\n    return (c == 34 || c == 39);\n}\n\n/**\n * Determines if the given character `c` matches the regular expression /\\s/ \n * by checking it via character code in a binary search fashion.\n * \n * This technique speeds this function up by a factor of ~10x vs. running RegExp.prototype.test() \n * on the character itself.\n * \n * NOTE: This function is generated. Do not edit manually. To regenerate, run: \n * \n *     npm run generate-char-utils\n */\nexport function isWhitespaceChar(c: number): boolean {\n    return (c < 8232 ? (c < 160 ? ((c >= 9 && c <= 13) || c == 32) : (c < 5760 ? c == 160 : (c == 5760 || (c >= 8192 && c <= 8202)))) : (c < 8287 ? ((c >= 8232 && c <= 8233) || c == 8239) : (c < 12288 ? c == 8287 : (c == 12288 || c == 65279))));\n}\n\n/**\n * Determines if the given character `c` matches the regular expression /[A-Za-z\\xAA\\xB5\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0370-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0620-\\u064A\\u066E\\u066F\\u0671-\\u06D3\\u06D5\\u06E5\\u06E6\\u06EE\\u06EF\\u06FA-\\u06FC\\u06FF\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1\\u07CA-\\u07EA\\u07F4\\u07F5\\u07FA\\u0800-\\u0815\\u081A\\u0824\\u0828\\u0840-\\u0858\\u08A0-\\u08B4\\u08B6-\\u08BD\\u0904-\\u0939\\u093D\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD\\u09CE\\u09DC\\u09DD\\u09DF-\\u09E1\\u09F0\\u09F1\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A59-\\u0A5C\\u0A5E\\u0A72-\\u0A74\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABD\\u0AD0\\u0AE0\\u0AE1\\u0AF9\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3D\\u0B5C\\u0B5D\\u0B5F-\\u0B61\\u0B71\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BD0\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D\\u0C58-\\u0C5A\\u0C60\\u0C61\\u0C80\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD\\u0CDE\\u0CE0\\u0CE1\\u0CF1\\u0CF2\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D\\u0D4E\\u0D54-\\u0D56\\u0D5F-\\u0D61\\u0D7A-\\u0D7F\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0E01-\\u0E30\\u0E32\\u0E33\\u0E40-\\u0E46\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB0\\u0EB2\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EDC-\\u0EDF\\u0F00\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F88-\\u0F8C\\u1000-\\u102A\\u103F\\u1050-\\u1055\\u105A-\\u105D\\u1061\\u1065\\u1066\\u106E-\\u1070\\u1075-\\u1081\\u108E\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u1380-\\u138F\\u13A0-\\u13F5\\u13F8-\\u13FD\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16F1-\\u16F8\\u1700-\\u170C\\u170E-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176C\\u176E-\\u1770\\u1780-\\u17B3\\u17D7\\u17DC\\u1820-\\u1877\\u1880-\\u1884\\u1887-\\u18A8\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1950-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19B0-\\u19C9\\u1A00-\\u1A16\\u1A20-\\u1A54\\u1AA7\\u1B05-\\u1B33\\u1B45-\\u1B4B\\u1B83-\\u1BA0\\u1BAE\\u1BAF\\u1BBA-\\u1BE5\\u1C00-\\u1C23\\u1C4D-\\u1C4F\\u1C5A-\\u1C7D\\u1C80-\\u1C88\\u1CE9-\\u1CEC\\u1CEE-\\u1CF1\\u1CF5\\u1CF6\\u1D00-\\u1DBF\\u1E00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u2071\\u207F\\u2090-\\u209C\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u212F-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2183\\u2184\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CEE\\u2CF2\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2E2F\\u3005\\u3006\\u3031-\\u3035\\u303B\\u303C\\u3041-\\u3096\\u309D-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FD5\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA61F\\uA62A\\uA62B\\uA640-\\uA66E\\uA67F-\\uA69D\\uA6A0-\\uA6E5\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA7AE\\uA7B0-\\uA7B7\\uA7F7-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA822\\uA840-\\uA873\\uA882-\\uA8B3\\uA8F2-\\uA8F7\\uA8FB\\uA8FD\\uA90A-\\uA925\\uA930-\\uA946\\uA960-\\uA97C\\uA984-\\uA9B2\\uA9CF\\uA9E0-\\uA9E4\\uA9E6-\\uA9EF\\uA9FA-\\uA9FE\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAA60-\\uAA76\\uAA7A\\uAA7E-\\uAAAF\\uAAB1\\uAAB5\\uAAB6\\uAAB9-\\uAABD\\uAAC0\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEA\\uAAF2-\\uAAF4\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB65\\uAB70-\\uABE2\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF21-\\uFF3A\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC\\u2700-\\u27bf\\udde6-\\uddff\\ud800-\\udbff\\udc00-\\udfff\\ufe0e\\ufe0f\\u0300-\\u036f\\ufe20-\\ufe23\\u20d0-\\u20f0\\ud83c\\udffb-\\udfff\\u200d\\u3299\\u3297\\u303d\\u3030\\u24c2\\ud83c\\udd70-\\udd71\\udd7e-\\udd7f\\udd8e\\udd91-\\udd9a\\udde6-\\uddff\\ude01-\\ude02\\ude1a\\ude2f\\ude32-\\ude3a\\ude50-\\ude51\\u203c\\u2049\\u25aa-\\u25ab\\u25b6\\u25c0\\u25fb-\\u25fe\\u00a9\\u00ae\\u2122\\u2139\\udc04\\u2600-\\u26FF\\u2b05\\u2b06\\u2b07\\u2b1b\\u2b1c\\u2b50\\u2b55\\u231a\\u231b\\u2328\\u23cf\\u23e9-\\u23f3\\u23f8-\\u23fa\\udccf\\u2935\\u2934\\u2190-\\u21ff\\u0300-\\u036F\\u0483-\\u0489\\u0591-\\u05BD\\u05BF\\u05C1\\u05C2\\u05C4\\u05C5\\u05C7\\u0610-\\u061A\\u064B-\\u065F\\u0670\\u06D6-\\u06DC\\u06DF-\\u06E4\\u06E7\\u06E8\\u06EA-\\u06ED\\u0711\\u0730-\\u074A\\u07A6-\\u07B0\\u07EB-\\u07F3\\u0816-\\u0819\\u081B-\\u0823\\u0825-\\u0827\\u0829-\\u082D\\u0859-\\u085B\\u08D4-\\u08E1\\u08E3-\\u0903\\u093A-\\u093C\\u093E-\\u094F\\u0951-\\u0957\\u0962\\u0963\\u0981-\\u0983\\u09BC\\u09BE-\\u09C4\\u09C7\\u09C8\\u09CB-\\u09CD\\u09D7\\u09E2\\u09E3\\u0A01-\\u0A03\\u0A3C\\u0A3E-\\u0A42\\u0A47\\u0A48\\u0A4B-\\u0A4D\\u0A51\\u0A70\\u0A71\\u0A75\\u0A81-\\u0A83\\u0ABC\\u0ABE-\\u0AC5\\u0AC7-\\u0AC9\\u0ACB-\\u0ACD\\u0AE2\\u0AE3\\u0B01-\\u0B03\\u0B3C\\u0B3E-\\u0B44\\u0B47\\u0B48\\u0B4B-\\u0B4D\\u0B56\\u0B57\\u0B62\\u0B63\\u0B82\\u0BBE-\\u0BC2\\u0BC6-\\u0BC8\\u0BCA-\\u0BCD\\u0BD7\\u0C00-\\u0C03\\u0C3E-\\u0C44\\u0C46-\\u0C48\\u0C4A-\\u0C4D\\u0C55\\u0C56\\u0C62\\u0C63\\u0C81-\\u0C83\\u0CBC\\u0CBE-\\u0CC4\\u0CC6-\\u0CC8\\u0CCA-\\u0CCD\\u0CD5\\u0CD6\\u0CE2\\u0CE3\\u0D01-\\u0D03\\u0D3E-\\u0D44\\u0D46-\\u0D48\\u0D4A-\\u0D4D\\u0D57\\u0D62\\u0D63\\u0D82\\u0D83\\u0DCA\\u0DCF-\\u0DD4\\u0DD6\\u0DD8-\\u0DDF\\u0DF2\\u0DF3\\u0E31\\u0E34-\\u0E3A\\u0E47-\\u0E4E\\u0EB1\\u0EB4-\\u0EB9\\u0EBB\\u0EBC\\u0EC8-\\u0ECD\\u0F18\\u0F19\\u0F35\\u0F37\\u0F39\\u0F3E\\u0F3F\\u0F71-\\u0F84\\u0F86\\u0F87\\u0F8D-\\u0F97\\u0F99-\\u0FBC\\u0FC6\\u102B-\\u103E\\u1056-\\u1059\\u105E-\\u1060\\u1062-\\u1064\\u1067-\\u106D\\u1071-\\u1074\\u1082-\\u108D\\u108F\\u109A-\\u109D\\u135D-\\u135F\\u1712-\\u1714\\u1732-\\u1734\\u1752\\u1753\\u1772\\u1773\\u17B4-\\u17D3\\u17DD\\u180B-\\u180D\\u1885\\u1886\\u18A9\\u1920-\\u192B\\u1930-\\u193B\\u1A17-\\u1A1B\\u1A55-\\u1A5E\\u1A60-\\u1A7C\\u1A7F\\u1AB0-\\u1ABE\\u1B00-\\u1B04\\u1B34-\\u1B44\\u1B6B-\\u1B73\\u1B80-\\u1B82\\u1BA1-\\u1BAD\\u1BE6-\\u1BF3\\u1C24-\\u1C37\\u1CD0-\\u1CD2\\u1CD4-\\u1CE8\\u1CED\\u1CF2-\\u1CF4\\u1CF8\\u1CF9\\u1DC0-\\u1DF5\\u1DFB-\\u1DFF\\u20D0-\\u20F0\\u2CEF-\\u2CF1\\u2D7F\\u2DE0-\\u2DFF\\u302A-\\u302F\\u3099\\u309A\\uA66F-\\uA672\\uA674-\\uA67D\\uA69E\\uA69F\\uA6F0\\uA6F1\\uA802\\uA806\\uA80B\\uA823-\\uA827\\uA880\\uA881\\uA8B4-\\uA8C5\\uA8E0-\\uA8F1\\uA926-\\uA92D\\uA947-\\uA953\\uA980-\\uA983\\uA9B3-\\uA9C0\\uA9E5\\uAA29-\\uAA36\\uAA43\\uAA4C\\uAA4D\\uAA7B-\\uAA7D\\uAAB0\\uAAB2-\\uAAB4\\uAAB7\\uAAB8\\uAABE\\uAABF\\uAAC1\\uAAEB-\\uAAEF\\uAAF5\\uAAF6\\uABE3-\\uABEA\\uABEC\\uABED\\uFB1E\\uFE00-\\uFE0F\\uFE20-\\uFE2F0-9\\u0660-\\u0669\\u06F0-\\u06F9\\u07C0-\\u07C9\\u0966-\\u096F\\u09E6-\\u09EF\\u0A66-\\u0A6F\\u0AE6-\\u0AEF\\u0B66-\\u0B6F\\u0BE6-\\u0BEF\\u0C66-\\u0C6F\\u0CE6-\\u0CEF\\u0D66-\\u0D6F\\u0DE6-\\u0DEF\\u0E50-\\u0E59\\u0ED0-\\u0ED9\\u0F20-\\u0F29\\u1040-\\u1049\\u1090-\\u1099\\u17E0-\\u17E9\\u1810-\\u1819\\u1946-\\u194F\\u19D0-\\u19D9\\u1A80-\\u1A89\\u1A90-\\u1A99\\u1B50-\\u1B59\\u1BB0-\\u1BB9\\u1C40-\\u1C49\\u1C50-\\u1C59\\uA620-\\uA629\\uA8D0-\\uA8D9\\uA900-\\uA909\\uA9D0-\\uA9D9\\uA9F0-\\uA9F9\\uAA50-\\uAA59\\uABF0-\\uABF9\\uFF10-\\uFF19]/ \n * by checking it via character code in a binary search fashion.\n * \n * This technique speeds this function up by a factor of ~10x vs. running RegExp.prototype.test() \n * on the character itself.\n * \n * NOTE: This function is generated. Do not edit manually. To regenerate, run: \n * \n *     npm run generate-char-utils\n */\nexport function isAlphaNumericOrMarkChar(c: number): boolean {\n    return (c < 4800 ? (c < 2949 ? (c < 2451 ? (c < 1425 ? (c < 768 ? (c < 192 ? (c < 169 ? (c < 65 ? (c >= 48 && c <= 57) : ((c >= 65 && c <= 90) || (c >= 97 && c <= 122))) : (c < 181 ? ((c >= 169 && c <= 170) || c == 174) : (c == 181 || c == 186))) : (c < 710 ? (c < 216 ? (c >= 192 && c <= 214) : ((c >= 216 && c <= 246) || (c >= 248 && c <= 705))) : (c < 748 ? ((c >= 710 && c <= 721) || (c >= 736 && c <= 740)) : (c == 748 || c == 750)))) : (c < 910 ? (c < 895 ? (c < 886 ? (c >= 768 && c <= 884) : ((c >= 886 && c <= 887) || (c >= 890 && c <= 893))) : (c < 904 ? (c == 895 || c == 902) : ((c >= 904 && c <= 906) || c == 908))) : (c < 1155 ? (c < 931 ? (c >= 910 && c <= 929) : ((c >= 931 && c <= 1013) || (c >= 1015 && c <= 1153))) : (c < 1369 ? ((c >= 1155 && c <= 1327) || (c >= 1329 && c <= 1366)) : (c == 1369 || (c >= 1377 && c <= 1415)))))) : (c < 1808 ? (c < 1552 ? (c < 1476 ? (c < 1471 ? (c >= 1425 && c <= 1469) : (c == 1471 || (c >= 1473 && c <= 1474))) : (c < 1488 ? ((c >= 1476 && c <= 1477) || c == 1479) : ((c >= 1488 && c <= 1514) || (c >= 1520 && c <= 1522)))) : (c < 1749 ? (c < 1568 ? (c >= 1552 && c <= 1562) : ((c >= 1568 && c <= 1641) || (c >= 1646 && c <= 1747))) : (c < 1770 ? ((c >= 1749 && c <= 1756) || (c >= 1759 && c <= 1768)) : ((c >= 1770 && c <= 1788) || c == 1791)))) : (c < 2230 ? (c < 2042 ? (c < 1869 ? (c >= 1808 && c <= 1866) : ((c >= 1869 && c <= 1969) || (c >= 1984 && c <= 2037))) : (c < 2112 ? (c == 2042 || (c >= 2048 && c <= 2093)) : ((c >= 2112 && c <= 2139) || (c >= 2208 && c <= 2228)))) : (c < 2406 ? (c < 2260 ? (c >= 2230 && c <= 2237) : ((c >= 2260 && c <= 2273) || (c >= 2275 && c <= 2403))) : (c < 2437 ? ((c >= 2406 && c <= 2415) || (c >= 2417 && c <= 2435)) : ((c >= 2437 && c <= 2444) || (c >= 2447 && c <= 2448))))))) : (c < 2693 ? (c < 2579 ? (c < 2519 ? (c < 2486 ? (c < 2474 ? (c >= 2451 && c <= 2472) : ((c >= 2474 && c <= 2480) || c == 2482)) : (c < 2503 ? ((c >= 2486 && c <= 2489) || (c >= 2492 && c <= 2500)) : ((c >= 2503 && c <= 2504) || (c >= 2507 && c <= 2510)))) : (c < 2534 ? (c < 2524 ? c == 2519 : ((c >= 2524 && c <= 2525) || (c >= 2527 && c <= 2531))) : (c < 2565 ? ((c >= 2534 && c <= 2545) || (c >= 2561 && c <= 2563)) : ((c >= 2565 && c <= 2570) || (c >= 2575 && c <= 2576))))) : (c < 2631 ? (c < 2613 ? (c < 2602 ? (c >= 2579 && c <= 2600) : ((c >= 2602 && c <= 2608) || (c >= 2610 && c <= 2611))) : (c < 2620 ? ((c >= 2613 && c <= 2614) || (c >= 2616 && c <= 2617)) : (c == 2620 || (c >= 2622 && c <= 2626)))) : (c < 2649 ? (c < 2635 ? (c >= 2631 && c <= 2632) : ((c >= 2635 && c <= 2637) || c == 2641)) : (c < 2662 ? ((c >= 2649 && c <= 2652) || c == 2654) : ((c >= 2662 && c <= 2677) || (c >= 2689 && c <= 2691)))))) : (c < 2821 ? (c < 2759 ? (c < 2730 ? (c < 2703 ? (c >= 2693 && c <= 2701) : ((c >= 2703 && c <= 2705) || (c >= 2707 && c <= 2728))) : (c < 2741 ? ((c >= 2730 && c <= 2736) || (c >= 2738 && c <= 2739)) : ((c >= 2741 && c <= 2745) || (c >= 2748 && c <= 2757)))) : (c < 2784 ? (c < 2763 ? (c >= 2759 && c <= 2761) : ((c >= 2763 && c <= 2765) || c == 2768)) : (c < 2809 ? ((c >= 2784 && c <= 2787) || (c >= 2790 && c <= 2799)) : (c == 2809 || (c >= 2817 && c <= 2819))))) : (c < 2887 ? (c < 2858 ? (c < 2831 ? (c >= 2821 && c <= 2828) : ((c >= 2831 && c <= 2832) || (c >= 2835 && c <= 2856))) : (c < 2869 ? ((c >= 2858 && c <= 2864) || (c >= 2866 && c <= 2867)) : ((c >= 2869 && c <= 2873) || (c >= 2876 && c <= 2884)))) : (c < 2911 ? (c < 2902 ? ((c >= 2887 && c <= 2888) || (c >= 2891 && c <= 2893)) : ((c >= 2902 && c <= 2903) || (c >= 2908 && c <= 2909))) : (c < 2929 ? ((c >= 2911 && c <= 2915) || (c >= 2918 && c <= 2927)) : (c == 2929 || (c >= 2946 && c <= 2947)))))))) : (c < 3517 ? (c < 3205 ? (c < 3046 ? (c < 2984 ? (c < 2969 ? (c < 2958 ? (c >= 2949 && c <= 2954) : ((c >= 2958 && c <= 2960) || (c >= 2962 && c <= 2965))) : (c < 2974 ? ((c >= 2969 && c <= 2970) || c == 2972) : ((c >= 2974 && c <= 2975) || (c >= 2979 && c <= 2980)))) : (c < 3014 ? (c < 2990 ? (c >= 2984 && c <= 2986) : ((c >= 2990 && c <= 3001) || (c >= 3006 && c <= 3010))) : (c < 3024 ? ((c >= 3014 && c <= 3016) || (c >= 3018 && c <= 3021)) : (c == 3024 || c == 3031)))) : (c < 3142 ? (c < 3086 ? (c < 3072 ? (c >= 3046 && c <= 3055) : ((c >= 3072 && c <= 3075) || (c >= 3077 && c <= 3084))) : (c < 3114 ? ((c >= 3086 && c <= 3088) || (c >= 3090 && c <= 3112)) : ((c >= 3114 && c <= 3129) || (c >= 3133 && c <= 3140)))) : (c < 3160 ? (c < 3146 ? (c >= 3142 && c <= 3144) : ((c >= 3146 && c <= 3149) || (c >= 3157 && c <= 3158))) : (c < 3174 ? ((c >= 3160 && c <= 3162) || (c >= 3168 && c <= 3171)) : ((c >= 3174 && c <= 3183) || (c >= 3200 && c <= 3203)))))) : (c < 3333 ? (c < 3274 ? (c < 3242 ? (c < 3214 ? (c >= 3205 && c <= 3212) : ((c >= 3214 && c <= 3216) || (c >= 3218 && c <= 3240))) : (c < 3260 ? ((c >= 3242 && c <= 3251) || (c >= 3253 && c <= 3257)) : ((c >= 3260 && c <= 3268) || (c >= 3270 && c <= 3272)))) : (c < 3296 ? (c < 3285 ? (c >= 3274 && c <= 3277) : ((c >= 3285 && c <= 3286) || c == 3294)) : (c < 3313 ? ((c >= 3296 && c <= 3299) || (c >= 3302 && c <= 3311)) : ((c >= 3313 && c <= 3314) || (c >= 3329 && c <= 3331))))) : (c < 3423 ? (c < 3389 ? (c < 3342 ? (c >= 3333 && c <= 3340) : ((c >= 3342 && c <= 3344) || (c >= 3346 && c <= 3386))) : (c < 3402 ? ((c >= 3389 && c <= 3396) || (c >= 3398 && c <= 3400)) : ((c >= 3402 && c <= 3406) || (c >= 3412 && c <= 3415)))) : (c < 3458 ? (c < 3430 ? (c >= 3423 && c <= 3427) : ((c >= 3430 && c <= 3439) || (c >= 3450 && c <= 3455))) : (c < 3482 ? ((c >= 3458 && c <= 3459) || (c >= 3461 && c <= 3478)) : ((c >= 3482 && c <= 3505) || (c >= 3507 && c <= 3515))))))) : (c < 3804 ? (c < 3722 ? (c < 3570 ? (c < 3535 ? (c < 3520 ? c == 3517 : ((c >= 3520 && c <= 3526) || c == 3530)) : (c < 3544 ? ((c >= 3535 && c <= 3540) || c == 3542) : ((c >= 3544 && c <= 3551) || (c >= 3558 && c <= 3567)))) : (c < 3664 ? (c < 3585 ? (c >= 3570 && c <= 3571) : ((c >= 3585 && c <= 3642) || (c >= 3648 && c <= 3662))) : (c < 3716 ? ((c >= 3664 && c <= 3673) || (c >= 3713 && c <= 3714)) : (c == 3716 || (c >= 3719 && c <= 3720))))) : (c < 3754 ? (c < 3737 ? (c < 3725 ? c == 3722 : (c == 3725 || (c >= 3732 && c <= 3735))) : (c < 3749 ? ((c >= 3737 && c <= 3743) || (c >= 3745 && c <= 3747)) : (c == 3749 || c == 3751))) : (c < 3776 ? (c < 3757 ? (c >= 3754 && c <= 3755) : ((c >= 3757 && c <= 3769) || (c >= 3771 && c <= 3773))) : (c < 3784 ? ((c >= 3776 && c <= 3780) || c == 3782) : ((c >= 3784 && c <= 3789) || (c >= 3792 && c <= 3801)))))) : (c < 4176 ? (c < 3902 ? (c < 3872 ? (c < 3840 ? (c >= 3804 && c <= 3807) : (c == 3840 || (c >= 3864 && c <= 3865))) : (c < 3895 ? ((c >= 3872 && c <= 3881) || c == 3893) : (c == 3895 || c == 3897))) : (c < 3974 ? (c < 3913 ? (c >= 3902 && c <= 3911) : ((c >= 3913 && c <= 3948) || (c >= 3953 && c <= 3972))) : (c < 4038 ? ((c >= 3974 && c <= 3991) || (c >= 3993 && c <= 4028)) : (c == 4038 || (c >= 4096 && c <= 4169))))) : (c < 4688 ? (c < 4301 ? (c < 4256 ? (c >= 4176 && c <= 4253) : ((c >= 4256 && c <= 4293) || c == 4295)) : (c < 4348 ? (c == 4301 || (c >= 4304 && c <= 4346)) : ((c >= 4348 && c <= 4680) || (c >= 4682 && c <= 4685)))) : (c < 4746 ? (c < 4698 ? ((c >= 4688 && c <= 4694) || c == 4696) : ((c >= 4698 && c <= 4701) || (c >= 4704 && c <= 4744))) : (c < 4786 ? ((c >= 4746 && c <= 4749) || (c >= 4752 && c <= 4784)) : ((c >= 4786 && c <= 4789) || (c >= 4792 && c <= 4798))))))))) : (c < 11035 ? (c < 7416 ? (c < 6176 ? (c < 5873 ? (c < 4992 ? (c < 4824 ? (c < 4802 ? c == 4800 : ((c >= 4802 && c <= 4805) || (c >= 4808 && c <= 4822))) : (c < 4888 ? ((c >= 4824 && c <= 4880) || (c >= 4882 && c <= 4885)) : ((c >= 4888 && c <= 4954) || (c >= 4957 && c <= 4959)))) : (c < 5121 ? (c < 5024 ? (c >= 4992 && c <= 5007) : ((c >= 5024 && c <= 5109) || (c >= 5112 && c <= 5117))) : (c < 5761 ? ((c >= 5121 && c <= 5740) || (c >= 5743 && c <= 5759)) : ((c >= 5761 && c <= 5786) || (c >= 5792 && c <= 5866))))) : (c < 6002 ? (c < 5920 ? (c < 5888 ? (c >= 5873 && c <= 5880) : ((c >= 5888 && c <= 5900) || (c >= 5902 && c <= 5908))) : (c < 5984 ? ((c >= 5920 && c <= 5940) || (c >= 5952 && c <= 5971)) : ((c >= 5984 && c <= 5996) || (c >= 5998 && c <= 6000)))) : (c < 6108 ? (c < 6016 ? (c >= 6002 && c <= 6003) : ((c >= 6016 && c <= 6099) || c == 6103)) : (c < 6155 ? ((c >= 6108 && c <= 6109) || (c >= 6112 && c <= 6121)) : ((c >= 6155 && c <= 6157) || (c >= 6160 && c <= 6169)))))) : (c < 6783 ? (c < 6512 ? (c < 6400 ? (c < 6272 ? (c >= 6176 && c <= 6263) : ((c >= 6272 && c <= 6314) || (c >= 6320 && c <= 6389))) : (c < 6448 ? ((c >= 6400 && c <= 6430) || (c >= 6432 && c <= 6443)) : ((c >= 6448 && c <= 6459) || (c >= 6470 && c <= 6509)))) : (c < 6608 ? (c < 6528 ? (c >= 6512 && c <= 6516) : ((c >= 6528 && c <= 6571) || (c >= 6576 && c <= 6601))) : (c < 6688 ? ((c >= 6608 && c <= 6617) || (c >= 6656 && c <= 6683)) : ((c >= 6688 && c <= 6750) || (c >= 6752 && c <= 6780))))) : (c < 7040 ? (c < 6832 ? (c < 6800 ? (c >= 6783 && c <= 6793) : ((c >= 6800 && c <= 6809) || c == 6823)) : (c < 6992 ? ((c >= 6832 && c <= 6846) || (c >= 6912 && c <= 6987)) : ((c >= 6992 && c <= 7001) || (c >= 7019 && c <= 7027)))) : (c < 7245 ? (c < 7168 ? (c >= 7040 && c <= 7155) : ((c >= 7168 && c <= 7223) || (c >= 7232 && c <= 7241))) : (c < 7376 ? ((c >= 7245 && c <= 7293) || (c >= 7296 && c <= 7304)) : ((c >= 7376 && c <= 7378) || (c >= 7380 && c <= 7414))))))) : (c < 8450 ? (c < 8130 ? (c < 8025 ? (c < 7960 ? (c < 7424 ? (c >= 7416 && c <= 7417) : ((c >= 7424 && c <= 7669) || (c >= 7675 && c <= 7957))) : (c < 8008 ? ((c >= 7960 && c <= 7965) || (c >= 7968 && c <= 8005)) : ((c >= 8008 && c <= 8013) || (c >= 8016 && c <= 8023)))) : (c < 8031 ? (c < 8027 ? c == 8025 : (c == 8027 || c == 8029)) : (c < 8118 ? ((c >= 8031 && c <= 8061) || (c >= 8064 && c <= 8116)) : ((c >= 8118 && c <= 8124) || c == 8126)))) : (c < 8205 ? (c < 8150 ? (c < 8134 ? (c >= 8130 && c <= 8132) : ((c >= 8134 && c <= 8140) || (c >= 8144 && c <= 8147))) : (c < 8178 ? ((c >= 8150 && c <= 8155) || (c >= 8160 && c <= 8172)) : ((c >= 8178 && c <= 8180) || (c >= 8182 && c <= 8188)))) : (c < 8305 ? (c < 8252 ? c == 8205 : (c == 8252 || c == 8265)) : (c < 8336 ? (c == 8305 || c == 8319) : ((c >= 8336 && c <= 8348) || (c >= 8400 && c <= 8432)))))) : (c < 8579 ? (c < 8486 ? (c < 8469 ? (c < 8455 ? c == 8450 : (c == 8455 || (c >= 8458 && c <= 8467))) : (c < 8482 ? (c == 8469 || (c >= 8473 && c <= 8477)) : (c == 8482 || c == 8484))) : (c < 8495 ? (c < 8488 ? c == 8486 : (c == 8488 || (c >= 8490 && c <= 8493))) : (c < 8517 ? ((c >= 8495 && c <= 8505) || (c >= 8508 && c <= 8511)) : ((c >= 8517 && c <= 8521) || c == 8526)))) : (c < 9410 ? (c < 9000 ? (c < 8592 ? (c >= 8579 && c <= 8580) : ((c >= 8592 && c <= 8703) || (c >= 8986 && c <= 8987))) : (c < 9193 ? (c == 9000 || c == 9167) : ((c >= 9193 && c <= 9203) || (c >= 9208 && c <= 9210)))) : (c < 9723 ? (c < 9654 ? (c == 9410 || (c >= 9642 && c <= 9643)) : (c == 9654 || c == 9664)) : (c < 10548 ? ((c >= 9723 && c <= 9726) || (c >= 9728 && c <= 10175)) : ((c >= 10548 && c <= 10549) || (c >= 11013 && c <= 11015)))))))) : (c < 43259 ? (c < 12445 ? (c < 11688 ? (c < 11520 ? (c < 11264 ? (c < 11088 ? (c >= 11035 && c <= 11036) : (c == 11088 || c == 11093)) : (c < 11360 ? ((c >= 11264 && c <= 11310) || (c >= 11312 && c <= 11358)) : ((c >= 11360 && c <= 11492) || (c >= 11499 && c <= 11507)))) : (c < 11568 ? (c < 11559 ? (c >= 11520 && c <= 11557) : (c == 11559 || c == 11565)) : (c < 11647 ? ((c >= 11568 && c <= 11623) || c == 11631) : ((c >= 11647 && c <= 11670) || (c >= 11680 && c <= 11686))))) : (c < 11744 ? (c < 11712 ? (c < 11696 ? (c >= 11688 && c <= 11694) : ((c >= 11696 && c <= 11702) || (c >= 11704 && c <= 11710))) : (c < 11728 ? ((c >= 11712 && c <= 11718) || (c >= 11720 && c <= 11726)) : ((c >= 11728 && c <= 11734) || (c >= 11736 && c <= 11742)))) : (c < 12330 ? (c < 11823 ? (c >= 11744 && c <= 11775) : (c == 11823 || (c >= 12293 && c <= 12294))) : (c < 12353 ? ((c >= 12330 && c <= 12341) || (c >= 12347 && c <= 12349)) : ((c >= 12353 && c <= 12438) || (c >= 12441 && c <= 12442)))))) : (c < 42512 ? (c < 12951 ? (c < 12549 ? (c < 12449 ? (c >= 12445 && c <= 12447) : ((c >= 12449 && c <= 12538) || (c >= 12540 && c <= 12543))) : (c < 12704 ? ((c >= 12549 && c <= 12589) || (c >= 12593 && c <= 12686)) : ((c >= 12704 && c <= 12730) || (c >= 12784 && c <= 12799)))) : (c < 19968 ? (c < 12953 ? c == 12951 : (c == 12953 || (c >= 13312 && c <= 19893))) : (c < 42192 ? ((c >= 19968 && c <= 40917) || (c >= 40960 && c <= 42124)) : ((c >= 42192 && c <= 42237) || (c >= 42240 && c <= 42508))))) : (c < 42891 ? (c < 42623 ? (c < 42560 ? (c >= 42512 && c <= 42539) : ((c >= 42560 && c <= 42610) || (c >= 42612 && c <= 42621))) : (c < 42775 ? ((c >= 42623 && c <= 42725) || (c >= 42736 && c <= 42737)) : ((c >= 42775 && c <= 42783) || (c >= 42786 && c <= 42888)))) : (c < 43072 ? (c < 42928 ? (c >= 42891 && c <= 42926) : ((c >= 42928 && c <= 42935) || (c >= 42999 && c <= 43047))) : (c < 43216 ? ((c >= 43072 && c <= 43123) || (c >= 43136 && c <= 43205)) : ((c >= 43216 && c <= 43225) || (c >= 43232 && c <= 43255))))))) : (c < 55243 ? (c < 43744 ? (c < 43488 ? (c < 43312 ? (c < 43261 ? c == 43259 : (c == 43261 || (c >= 43264 && c <= 43309))) : (c < 43392 ? ((c >= 43312 && c <= 43347) || (c >= 43360 && c <= 43388)) : ((c >= 43392 && c <= 43456) || (c >= 43471 && c <= 43481)))) : (c < 43600 ? (c < 43520 ? (c >= 43488 && c <= 43518) : ((c >= 43520 && c <= 43574) || (c >= 43584 && c <= 43597))) : (c < 43642 ? ((c >= 43600 && c <= 43609) || (c >= 43616 && c <= 43638)) : ((c >= 43642 && c <= 43714) || (c >= 43739 && c <= 43741))))) : (c < 43824 ? (c < 43785 ? (c < 43762 ? (c >= 43744 && c <= 43759) : ((c >= 43762 && c <= 43766) || (c >= 43777 && c <= 43782))) : (c < 43808 ? ((c >= 43785 && c <= 43790) || (c >= 43793 && c <= 43798)) : ((c >= 43808 && c <= 43814) || (c >= 43816 && c <= 43822)))) : (c < 44012 ? (c < 43868 ? (c >= 43824 && c <= 43866) : ((c >= 43868 && c <= 43877) || (c >= 43888 && c <= 44010))) : (c < 44032 ? ((c >= 44012 && c <= 44013) || (c >= 44016 && c <= 44025)) : ((c >= 44032 && c <= 55203) || (c >= 55216 && c <= 55238)))))) : (c < 64848 ? (c < 64298 ? (c < 64112 ? (c < 55296 ? (c >= 55243 && c <= 55291) : ((c >= 55296 && c <= 57343) || (c >= 63744 && c <= 64109))) : (c < 64275 ? ((c >= 64112 && c <= 64217) || (c >= 64256 && c <= 64262)) : ((c >= 64275 && c <= 64279) || (c >= 64285 && c <= 64296)))) : (c < 64320 ? (c < 64312 ? (c >= 64298 && c <= 64310) : ((c >= 64312 && c <= 64316) || c == 64318)) : (c < 64326 ? ((c >= 64320 && c <= 64321) || (c >= 64323 && c <= 64324)) : ((c >= 64326 && c <= 64433) || (c >= 64467 && c <= 64829))))) : (c < 65296 ? (c < 65024 ? (c < 64914 ? (c >= 64848 && c <= 64911) : ((c >= 64914 && c <= 64967) || (c >= 65008 && c <= 65019))) : (c < 65136 ? ((c >= 65024 && c <= 65039) || (c >= 65056 && c <= 65071)) : ((c >= 65136 && c <= 65140) || (c >= 65142 && c <= 65276)))) : (c < 65474 ? (c < 65345 ? ((c >= 65296 && c <= 65305) || (c >= 65313 && c <= 65338)) : ((c >= 65345 && c <= 65370) || (c >= 65382 && c <= 65470))) : (c < 65490 ? ((c >= 65474 && c <= 65479) || (c >= 65482 && c <= 65487)) : ((c >= 65490 && c <= 65495) || (c >= 65498 && c <= 65500))))))))));\n}\n\n/**\n * Determines if the given character `c` matches the regular expression /[!#$%&'*+/=?^_`{|}~-]/ \n * by checking it via character code in a binary search fashion.\n * \n * This technique speeds this function up by a factor of ~10x vs. running RegExp.prototype.test() \n * on the character itself.\n * \n * NOTE: This function is generated. Do not edit manually. To regenerate, run: \n * \n *     npm run generate-char-utils\n */\nexport function isValidEmailLocalPartSpecialChar(c: number): boolean {\n    return (c < 47 ? (c < 42 ? (c == 33 || (c >= 35 && c <= 39)) : ((c >= 42 && c <= 43) || c == 45)) : (c < 63 ? (c == 47 || c == 61) : (c < 94 ? c == 63 : ((c >= 94 && c <= 96) || (c >= 123 && c <= 126)))));\n}\n\n/**\n * Determines if the given character `c` matches the regular expression /[-+&@#/%=~_()|'$*[\\]{}\\u2713]/ \n * by checking it via character code in a binary search fashion.\n * \n * This technique speeds this function up by a factor of ~10x vs. running RegExp.prototype.test() \n * on the character itself.\n * \n * NOTE: This function is generated. Do not edit manually. To regenerate, run: \n * \n *     npm run generate-char-utils\n */\nexport function isUrlSuffixAllowedSpecialChar(c: number): boolean {\n    return (c < 91 ? (c < 47 ? ((c >= 35 && c <= 43) || c == 45) : (c < 61 ? c == 47 : (c == 61 || c == 64))) : (c < 95 ? (c == 91 || c == 93) : (c < 123 ? c == 95 : ((c >= 123 && c <= 126) || c == 10003))));\n}\n\n/**\n * Determines if the given character `c` matches the regular expression /[?!:,.;^]/ \n * by checking it via character code in a binary search fashion.\n * \n * This technique speeds this function up by a factor of ~10x vs. running RegExp.prototype.test() \n * on the character itself.\n * \n * NOTE: This function is generated. Do not edit manually. To regenerate, run: \n * \n *     npm run generate-char-utils\n */\nexport function isUrlSuffixNotAllowedAsFinalChar(c: number): boolean {\n    return (c < 58 ? (c < 44 ? c == 33 : (c == 44 || c == 46)) : (c < 63 ? (c >= 58 && c <= 59) : (c == 63 || c == 94)));\n}\n\n/**\n * Determines if the given character `c` matches the regular expression /[({[]/ \n * by checking it via character code in a binary search fashion.\n * \n * This technique speeds this function up by a factor of ~10x vs. running RegExp.prototype.test() \n * on the character itself.\n * \n * NOTE: This function is generated. Do not edit manually. To regenerate, run: \n * \n *     npm run generate-char-utils\n */\nexport function isOpenBraceChar(c: number): boolean {\n    return (c < 91 ? c == 40 : (c == 91 || c == 123));\n}\n\n/**\n * Determines if the given character `c` matches the regular expression /[)}\\]]/ \n * by checking it via character code in a binary search fashion.\n * \n * This technique speeds this function up by a factor of ~10x vs. running RegExp.prototype.test() \n * on the character itself.\n * \n * NOTE: This function is generated. Do not edit manually. To regenerate, run: \n * \n *     npm run generate-char-utils\n */\nexport function isCloseBraceChar(c: number): boolean {\n    return (c < 93 ? c == 41 : (c == 93 || c == 125));\n}\n","// NOTE: THIS IS A GENERATED FILE\n// To update with the latest TLD list, run `npm run update-known-tlds`\n\nexport const tldRegex = /^(?:xn--vermgensberatung-pwb|xn--vermgensberater-ctb|xn--clchc0ea0b2g2a9gcd|xn--w4r85el8fhu5dnra|travelersinsurance|vermögensberatung|xn--5su34j936bgsg|xn--bck1b9a5dre4c|xn--mgbah1a3hjkrd|xn--mgbai9azgqp6j|xn--mgberp4a5d4ar|xn--xkc2dl3a5ee0h|vermögensberater|xn--fzys8d69uvgm|xn--mgba7c0bbn0a|xn--mgbcpq6gpa1a|xn--xkc2al3hye2a|americanexpress|kerryproperties|sandvikcoromant|xn--i1b6b1a6a2e|xn--kcrx77d1x4a|xn--lgbbat1ad8j|xn--mgba3a4f16a|xn--mgbc0a9azcg|xn--nqv7fs00ema|americanfamily|weatherchannel|xn--54b7fta0cc|xn--6qq986b3xl|xn--80aqecdr1a|xn--b4w605ferd|xn--fiq228c5hs|xn--h2breg3eve|xn--jlq480n2rg|xn--mgba3a3ejt|xn--mgbaam7a8h|xn--mgbayh7gpa|xn--mgbbh1a71e|xn--mgbca7dzdo|xn--mgbi4ecexp|xn--mgbx4cd0ab|xn--rvc1e0am3e|international|lifeinsurance|wolterskluwer|xn--cckwcxetd|xn--eckvdtc9d|xn--fpcrj9c3d|xn--fzc2c9e2c|xn--h2brj9c8c|xn--tiq49xqyj|xn--yfro4i67o|xn--ygbi2ammx|construction|lplfinancial|scholarships|versicherung|xn--3e0b707e|xn--45br5cyl|xn--4dbrk0ce|xn--80adxhks|xn--80asehdb|xn--8y0a063a|xn--gckr3f0f|xn--mgb9awbf|xn--mgbab2bd|xn--mgbgu82a|xn--mgbpl2fh|xn--mgbt3dhd|xn--mk1bu44c|xn--ngbc5azd|xn--ngbe9e0a|xn--ogbpf8fl|xn--qcka1pmc|accountants|barclaycard|blackfriday|blockbuster|bridgestone|calvinklein|contractors|creditunion|engineering|enterprises|investments|kerryhotels|lamborghini|motorcycles|olayangroup|photography|playstation|productions|progressive|redumbrella|williamhill|xn--11b4c3d|xn--1ck2e1b|xn--1qqw23a|xn--2scrj9c|xn--3bst00m|xn--3ds443g|xn--3hcrj9c|xn--42c2d9a|xn--45brj9c|xn--55qw42g|xn--6frz82g|xn--80ao21a|xn--9krt00a|xn--cck2b3b|xn--czr694b|xn--d1acj3b|xn--efvy88h|xn--fct429k|xn--fjq720a|xn--flw351e|xn--g2xx48c|xn--gecrj9c|xn--gk3at1e|xn--h2brj9c|xn--hxt814e|xn--imr513n|xn--j6w193g|xn--jvr189m|xn--kprw13d|xn--kpry57d|xn--mgbbh1a|xn--mgbtx2b|xn--mix891f|xn--nyqy26a|xn--otu796d|xn--pgbs0dh|xn--q9jyb4c|xn--rhqv96g|xn--rovu88b|xn--s9brj9c|xn--ses554g|xn--t60b56a|xn--vuq861b|xn--w4rs40l|xn--xhq521b|xn--zfr164b|சிங்கப்பூர்|accountant|apartments|associates|basketball|bnpparibas|boehringer|capitalone|consulting|creditcard|cuisinella|eurovision|extraspace|foundation|healthcare|immobilien|industries|management|mitsubishi|nextdirect|properties|protection|prudential|realestate|republican|restaurant|schaeffler|tatamotors|technology|university|vlaanderen|xn--30rr7y|xn--3pxu8k|xn--45q11c|xn--4gbrim|xn--55qx5d|xn--5tzm5g|xn--80aswg|xn--90a3ac|xn--9dbq2a|xn--9et52u|xn--c2br7g|xn--cg4bki|xn--czrs0t|xn--czru2d|xn--fiq64b|xn--fiqs8s|xn--fiqz9s|xn--io0a7i|xn--kput3i|xn--mxtq1m|xn--o3cw4h|xn--pssy2u|xn--q7ce6a|xn--unup4y|xn--wgbh1c|xn--wgbl6a|xn--y9a3aq|accenture|allfinanz|amsterdam|analytics|aquarelle|barcelona|bloomberg|christmas|community|directory|education|equipment|fairwinds|financial|firestone|fresenius|furniture|goldpoint|hisamitsu|homedepot|homegoods|homesense|institute|insurance|kuokgroup|landrover|lifestyle|marketing|marshalls|melbourne|microsoft|panasonic|pramerica|richardli|shangrila|solutions|statebank|statefarm|stockholm|travelers|vacations|xn--90ais|xn--c1avg|xn--d1alf|xn--e1a4c|xn--fhbei|xn--j1aef|xn--j1amh|xn--l1acc|xn--ngbrx|xn--nqv7f|xn--p1acf|xn--qxa6a|xn--tckwe|xn--vhquv|yodobashi|موريتانيا|abudhabi|airforce|allstate|attorney|barclays|barefoot|bargains|baseball|boutique|bradesco|broadway|brussels|builders|business|capetown|catering|catholic|cipriani|cleaning|clinique|clothing|commbank|computer|delivery|deloitte|democrat|diamonds|discount|discover|download|engineer|ericsson|exchange|feedback|fidelity|firmdale|football|frontier|goodyear|grainger|graphics|hdfcbank|helsinki|holdings|hospital|infiniti|ipiranga|istanbul|jpmorgan|lighting|lundbeck|marriott|mckinsey|memorial|merckmsd|mortgage|observer|partners|pharmacy|pictures|plumbing|property|redstone|reliance|saarland|samsclub|security|services|shopping|softbank|software|stcgroup|supplies|training|vanguard|ventures|verisign|woodside|xn--90ae|xn--node|xn--p1ai|xn--qxam|yokohama|السعودية|abogado|academy|agakhan|alibaba|android|athleta|auction|audible|auspost|banamex|bauhaus|bestbuy|booking|brother|capital|caravan|careers|channel|charity|chintai|citadel|clubmed|college|cologne|company|compare|contact|cooking|corsica|country|coupons|courses|cricket|cruises|dentist|digital|domains|exposed|express|farmers|fashion|ferrari|ferrero|finance|fishing|fitness|flights|florist|flowers|forsale|frogans|fujitsu|gallery|genting|godaddy|grocery|guitars|hamburg|hangout|hitachi|holiday|hosting|hotmail|hyundai|ismaili|jewelry|juniper|kitchen|komatsu|lacaixa|lanxess|lasalle|latrobe|leclerc|limited|lincoln|markets|monster|netbank|netflix|network|neustar|okinawa|organic|origins|philips|pioneer|politie|realtor|recipes|rentals|reviews|rexroth|samsung|sandvik|schmidt|schwarz|science|shiksha|singles|staples|storage|support|surgery|systems|temasek|theater|theatre|tickets|toshiba|trading|walmart|wanggou|watches|weather|website|wedding|whoswho|windows|winners|yamaxun|youtube|zuerich|католик|البحرين|الجزائر|العليان|پاکستان|كاثوليك|இந்தியா|abbott|abbvie|africa|agency|airbus|airtel|alipay|alsace|alstom|amazon|anquan|aramco|author|bayern|beauty|berlin|bharti|bostik|boston|broker|camera|career|casino|center|chanel|chrome|church|circle|claims|clinic|coffee|comsec|condos|coupon|credit|cruise|dating|datsun|dealer|degree|dental|design|direct|doctor|dunlop|dupont|durban|emerck|energy|estate|events|expert|family|flickr|futbol|gallup|garden|george|giving|global|google|gratis|health|hermes|hiphop|hockey|hotels|hughes|imamat|insure|intuit|jaguar|joburg|juegos|kaufen|kindle|kosher|latino|lawyer|lefrak|living|locker|london|luxury|madrid|maison|makeup|market|mattel|mobile|monash|mormon|moscow|museum|nagoya|nissan|nissay|norton|nowruz|office|olayan|online|oracle|orange|otsuka|pfizer|photos|physio|pictet|quebec|racing|realty|reisen|repair|report|review|rogers|ryukyu|safety|sakura|sanofi|school|schule|search|secure|select|shouji|soccer|social|stream|studio|supply|suzuki|swatch|sydney|taipei|taobao|target|tattoo|tennis|tienda|tjmaxx|tkmaxx|toyota|travel|unicom|viajes|viking|villas|virgin|vision|voting|voyage|walter|webcam|xihuan|yachts|yandex|zappos|москва|онлайн|ابوظبي|ارامكو|الاردن|المغرب|امارات|فلسطين|مليسيا|भारतम्|இலங்கை|ファッション|actor|adult|aetna|amfam|amica|apple|archi|audio|autos|azure|baidu|beats|bible|bingo|black|boats|bosch|build|canon|cards|chase|cheap|cisco|citic|click|cloud|coach|codes|crown|cymru|dance|deals|delta|drive|dubai|earth|edeka|email|epson|faith|fedex|final|forex|forum|gallo|games|gifts|gives|glass|globo|gmail|green|gripe|group|gucci|guide|homes|honda|horse|house|hyatt|ikano|irish|jetzt|koeln|kyoto|lamer|lease|legal|lexus|lilly|loans|locus|lotte|lotto|mango|media|miami|money|movie|music|nexus|nikon|ninja|nokia|nowtv|omega|osaka|paris|parts|party|phone|photo|pizza|place|poker|praxi|press|prime|promo|quest|radio|rehab|reise|ricoh|rocks|rodeo|rugby|salon|sener|seven|sharp|shell|shoes|skype|sling|smart|smile|solar|space|sport|stada|store|study|style|sucks|swiss|tatar|tires|tirol|tmall|today|tokyo|tools|toray|total|tours|trade|trust|tunes|tushu|ubank|vegas|video|vodka|volvo|wales|watch|weber|weibo|works|world|xerox|yahoo|ישראל|ایران|بازار|بھارت|سودان|سورية|همراه|भारोत|संगठन|বাংলা|భారత్|ഭാരതം|嘉里大酒店|aarp|able|aero|akdn|ally|amex|arab|army|arpa|arte|asda|asia|audi|auto|baby|band|bank|bbva|beer|best|bike|bing|blog|blue|bofa|bond|book|buzz|cafe|call|camp|care|cars|casa|case|cash|cbre|cern|chat|citi|city|club|cool|coop|cyou|data|date|dclk|deal|dell|desi|diet|dish|docs|dvag|erni|fage|fail|fans|farm|fast|fido|film|fire|fish|flir|food|ford|free|fund|game|gbiz|gent|ggee|gift|gmbh|gold|golf|goog|guge|guru|hair|haus|hdfc|help|here|host|hsbc|icbc|ieee|imdb|immo|info|itau|java|jeep|jobs|jprs|kddi|kids|kiwi|kpmg|kred|land|lego|lgbt|lidl|life|like|limo|link|live|loan|love|ltda|luxe|maif|meet|meme|menu|mini|mint|mobi|moda|moto|name|navy|news|next|nico|nike|ollo|open|page|pars|pccw|pics|ping|pink|play|plus|pohl|porn|post|prod|prof|qpon|read|reit|rent|rest|rich|room|rsvp|ruhr|safe|sale|sarl|save|saxo|scot|seat|seek|sexy|shia|shop|show|silk|sina|site|skin|sncf|sohu|song|sony|spot|star|surf|talk|taxi|team|tech|teva|tiaa|tips|town|toys|tube|vana|visa|viva|vivo|vote|voto|wang|weir|wien|wiki|wine|work|xbox|yoga|zara|zero|zone|дети|сайт|بارت|بيتك|ڀارت|تونس|شبكة|عراق|عمان|موقع|भारत|ভারত|ভাৰত|ਭਾਰਤ|ભારત|ଭାରତ|ಭಾರತ|ලංකා|アマゾン|グーグル|クラウド|ポイント|组织机构|電訊盈科|香格里拉|aaa|abb|abc|aco|ads|aeg|afl|aig|anz|aol|app|art|aws|axa|bar|bbc|bbt|bcg|bcn|bet|bid|bio|biz|bms|bmw|bom|boo|bot|box|buy|bzh|cab|cal|cam|car|cat|cba|cbn|ceo|cfa|cfd|com|cpa|crs|dad|day|dds|dev|dhl|diy|dnp|dog|dot|dtv|dvr|eat|eco|edu|esq|eus|fan|fit|fly|foo|fox|frl|ftr|fun|fyi|gal|gap|gay|gdn|gea|gle|gmo|gmx|goo|gop|got|gov|hbo|hiv|hkt|hot|how|ibm|ice|icu|ifm|inc|ing|ink|int|ist|itv|jcb|jio|jll|jmp|jnj|jot|joy|kfh|kia|kim|kpn|krd|lat|law|lds|llc|llp|lol|lpl|ltd|man|map|mba|med|men|mil|mit|mlb|mls|mma|moe|moi|mom|mov|msd|mtn|mtr|nab|nba|nec|net|new|nfl|ngo|nhk|now|nra|nrw|ntt|nyc|obi|one|ong|onl|ooo|org|ott|ovh|pay|pet|phd|pid|pin|pnc|pro|pru|pub|pwc|red|ren|ril|rio|rip|run|rwe|sap|sas|sbi|sbs|scb|sew|sex|sfr|ski|sky|soy|spa|srl|stc|tab|tax|tci|tdk|tel|thd|tjx|top|trv|tui|tvs|ubs|uno|uol|ups|vet|vig|vin|vip|wed|win|wme|wow|wtc|wtf|xin|xxx|xyz|you|yun|zip|бел|ком|қаз|мкд|мон|орг|рус|срб|укр|հայ|קום|عرب|قطر|كوم|مصر|कॉम|नेट|คอม|ไทย|ລາວ|ストア|セール|みんな|中文网|亚马逊|天主教|我爱你|新加坡|淡马锡|飞利浦|ac|ad|ae|af|ag|ai|al|am|ao|aq|ar|as|at|au|aw|ax|az|ba|bb|bd|be|bf|bg|bh|bi|bj|bm|bn|bo|br|bs|bt|bv|bw|by|bz|ca|cc|cd|cf|cg|ch|ci|ck|cl|cm|cn|co|cr|cu|cv|cw|cx|cy|cz|de|dj|dk|dm|do|dz|ec|ee|eg|er|es|et|eu|fi|fj|fk|fm|fo|fr|ga|gb|gd|ge|gf|gg|gh|gi|gl|gm|gn|gp|gq|gr|gs|gt|gu|gw|gy|hk|hm|hn|hr|ht|hu|id|ie|il|im|in|io|iq|ir|is|it|je|jm|jo|jp|ke|kg|kh|ki|km|kn|kp|kr|kw|ky|kz|la|lb|lc|li|lk|lr|ls|lt|lu|lv|ly|ma|mc|md|me|mg|mh|mk|ml|mm|mn|mo|mp|mq|mr|ms|mt|mu|mv|mw|mx|my|mz|na|nc|ne|nf|ng|ni|nl|no|np|nr|nu|nz|om|pa|pe|pf|pg|ph|pk|pl|pm|pn|pr|ps|pt|pw|py|qa|re|ro|rs|ru|rw|sa|sb|sc|sd|se|sg|sh|si|sj|sk|sl|sm|sn|so|sr|ss|st|su|sv|sx|sy|sz|tc|td|tf|tg|th|tj|tk|tl|tm|tn|to|tr|tt|tv|tw|tz|ua|ug|uk|us|uy|uz|va|vc|ve|vg|vi|vn|vu|wf|ws|ye|yt|za|zm|zw|ελ|ευ|бг|ею|рф|გე|닷넷|닷컴|삼성|한국|コム|世界|中信|中国|中國|企业|佛山|信息|健康|八卦|公司|公益|台湾|台灣|商城|商店|商标|嘉里|在线|大拿|娱乐|家電|广东|微博|慈善|手机|招聘|政务|政府|新闻|时尚|書籍|机构|游戏|澳門|点看|移动|网址|网店|网站|网络|联通|谷歌|购物|通販|集团|食品|餐厅|香港)$/;\n","import { Char } from '../char';\nimport {\n    isDigitChar,\n    isAsciiLetterChar,\n    isAlphaNumericOrMarkChar,\n    isUrlSuffixAllowedSpecialChar,\n    isUrlSuffixNotAllowedAsFinalChar,\n} from '../char-utils';\nimport { tldRegex } from './known-tlds';\n\n/**\n * Regular expression to match an http:// or https:// scheme.\n */\nexport const httpSchemeRe = /https?:\\/\\//i;\n\n/**\n * Regular expression to match an http:// or https:// scheme as the prefix of\n * a string.\n */\nexport const httpSchemePrefixRe = new RegExp('^' + httpSchemeRe.source, 'i');\n\n/**\n * A regular expression used to determine the schemes we should not autolink\n */\nexport const invalidSchemeRe = /^(javascript|vbscript):/i;\n\n// A regular expression used to determine if the URL is a scheme match (such as\n// 'http://google.com', and as opposed to a \"TLD match\"). This regular\n// expression is used to parse out the host along with if the URL has an\n// authority component (i.e. '//')\n//\n// Capturing groups:\n//    1. '//' if the URL has an authority component, empty string otherwise\n//    2. The host (if one exists). Ex: 'google.com'\n//\n// See https://www.rfc-editor.org/rfc/rfc3986#appendix-A for terminology\nexport const schemeUrlRe = /^[A-Za-z][-.+A-Za-z0-9]*:(\\/\\/)?([^:/]*)/;\n\n// A regular expression used to determine if the URL is a TLD match (such as\n// 'google.com', and as opposed to a \"scheme match\"). This regular\n// expression is used to help parse out the TLD (top-level domain) of the host.\n//\n// See https://www.rfc-editor.org/rfc/rfc3986#appendix-A for terminology\nexport const tldUrlHostRe = /^(?:\\/\\/)?([^/#?:]+)/; // optionally prefixed with protocol-relative '//' chars\n\n/**\n * Determines if the given character code represents a character that may start\n * a scheme (ex: the 'h' in 'http')\n */\nexport const isSchemeStartChar: (code: number) => boolean = isAsciiLetterChar; // Equivalent to checking the RegExp `/[A-Za-z]/`, but aliased for clarity and maintainability\n\n/**\n * Determines if the given character is a valid character in a scheme (such as\n * 'http' or 'ssh+git'), but only after the start char (which is handled by\n * {@link isSchemeStartChar}.\n */\nexport function isSchemeChar(charCode: number): boolean {\n    return (\n        isAsciiLetterChar(charCode) ||\n        isDigitChar(charCode) ||\n        charCode === Char.Plus || // '+'\n        charCode === Char.Dash || // '-'\n        charCode === Char.Dot // '.'\n    );\n}\n\n/**\n * Determines if the character can begin a domain label, which must be an\n * alphanumeric character and not an underscore or dash.\n *\n * A domain label is a segment of a hostname such as subdomain.google.com.\n */\nexport const isDomainLabelStartChar: (charCode: number) => boolean = isAlphaNumericOrMarkChar; // alias function for clarity\n\n/**\n * Determines if the character is part of a domain label (but not a domain label\n * start character).\n *\n * A domain label is a segment of a hostname such as subdomain.google.com.\n */\nexport function isDomainLabelChar(charCode: number): boolean {\n    return charCode === Char.Underscore || isDomainLabelStartChar(charCode);\n}\n\n/**\n * Determines if the character is a path character (\"pchar\") as defined by\n * https://tools.ietf.org/html/rfc3986#appendix-A\n *\n *     pchar         = unreserved / pct-encoded / sub-delims / \":\" / \"@\"\n *\n *     unreserved    = ALPHA / DIGIT / \"-\" / \".\" / \"_\" / \"~\"\n *     pct-encoded   = \"%\" HEXDIG HEXDIG\n *     sub-delims    = \"!\" / \"$\" / \"&\" / \"'\" / \"(\" / \")\"\n *                   / \"*\" / \"+\" / \",\" / \";\" / \"=\"\n *\n * Note that this implementation doesn't follow the spec exactly, but rather\n * follows URL path characters found out in the wild (spec might be out of date?)\n */\nexport function isPathChar(charCode: number): boolean {\n    return (\n        isAlphaNumericOrMarkChar(charCode) ||\n        isUrlSuffixAllowedSpecialChar(charCode) ||\n        isUrlSuffixNotAllowedAsFinalChar(charCode) // characters in addition to those allowed by isUrlSuffixAllowedSpecialChar()\n    );\n}\n\n/**\n * Determines if the character given may begin the \"URL Suffix\" section of a\n * URI (i.e. the path, query, or hash section). These are the '/', '?' and '#'\n * characters.\n *\n * See https://tools.ietf.org/html/rfc3986#appendix-A\n */\nexport function isUrlSuffixStartChar(charCode: number): boolean {\n    return (\n        charCode === Char.Slash || // '/'\n        charCode === Char.Question || // '?'\n        charCode === Char.NumberSign // '#'\n    );\n}\n\n/**\n * Determines if the top-level domain (TLD) read in the host is a known TLD.\n *\n * Example: 'com' would be a known TLD (for a host of 'google.com'), but\n * 'local' would not (for a domain name of 'my-computer.local').\n */\nexport function isKnownTld(tld: string) {\n    return tldRegex.test(tld.toLowerCase()); // make sure the tld is lowercase for the regex\n}\n\n/**\n * Determines if the given `url` is a valid scheme-prefixed URL.\n */\nexport function isValidSchemeUrl(url: string): boolean {\n    // If the scheme is 'javascript:' or 'vbscript:', these link\n    // types can be dangerous. Don't link them.\n    if (invalidSchemeRe.test(url)) {\n        return false;\n    }\n\n    const schemeMatch = url.match(schemeUrlRe);\n    if (!schemeMatch) {\n        return false;\n    }\n\n    const isAuthorityMatch = !!schemeMatch![1];\n    const host = schemeMatch![2];\n    if (isAuthorityMatch) {\n        // Any match that has an authority ('//' chars) after the scheme is\n        // valid, such as 'http://anything'\n        return true;\n    }\n\n    // If there's no authority ('//' chars), check that we have a hostname\n    // that looks valid.\n    //\n    // The host must contain at least one '.' char and have a domain label\n    // with at least one letter to be considered valid.\n    //\n    // Accept:\n    //   - git:domain.com (scheme followed by a host\n    // Do not accept:\n    //   - git:something ('something' doesn't look like a host)\n    //   - version:1.0   ('1.0' doesn't look like a host)\n    if (host.indexOf('.') === -1 || !/[A-Za-z]/.test(host)) {\n        // `letterRe` RegExp checks for a letter anywhere in the host string\n        return false;\n    }\n    return true;\n}\n\n/**\n * Determines if the given `url` is a match with a valid TLD.\n */\nexport function isValidTldMatch(url: string): boolean {\n    // TLD URL such as 'google.com', we need to confirm that we have a valid\n    // top-level domain\n    const tldUrlHostMatch = url.match(tldUrlHostRe);\n    if (!tldUrlHostMatch) {\n        // At this point, if the URL didn't match our TLD re, it must be invalid\n        // (highly unlikely to happen, but just in case)\n        return false;\n    }\n\n    const host = tldUrlHostMatch[0];\n    const hostLabels = host.split('.');\n    if (hostLabels.length < 2) {\n        // 0 or 1 host label, there's no TLD. Ex: 'localhost'\n        return false;\n    }\n\n    const tld = hostLabels[hostLabels.length - 1];\n    if (!isKnownTld(tld)) {\n        return false;\n    }\n\n    // TODO: Implement these conditions for TLD matcher:\n    // (\n    //     this.longestDomainLabelLength <= 63 &&\n    //     this.domainNameLength <= 255\n    // );\n\n    return true;\n}\n\n// Regular expression to confirm a valid IPv4 address (ex: '192.168.0.1')\n// TODO: encode this into the state machine so that we don't need to run this\n//       regexp separately to confirm the match\nconst ipV4Re =\n    /^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/;\n\n// Regular expression used to split the IPv4 address itself from any port/path/query/hash\nconst ipV4PartRe = /[:/?#]/;\n\n/**\n * Determines if the given URL is a valid IPv4-prefixed URL.\n */\nexport function isValidIpV4Address(url: string): boolean {\n    // Grab just the IP address\n    const ipV4Part = url.split(ipV4PartRe, 1)[0]; // only 1 result needed\n\n    return ipV4Re.test(ipV4Part);\n}\n","import { AbstractMatch, AbstractMatchConfig } from './abstract-match';\nimport { httpSchemePrefixRe } from '../parser/uri-utils';\nimport type { StripPrefixConfigObj } from '../autolinker';\n\n/**\n * A regular expression used to remove the 'www.' from URLs.\n */\nconst wwwPrefixRegex = /^(https?:\\/\\/)?(?:www\\.)?/i;\n\n/**\n * The regular expression used to remove the protocol-relative '//' from a URL\n * string, for purposes of formatting the anchor text. A protocol-relative URL\n * is, for example, \"//yahoo.com\"\n */\nconst protocolRelativeRegex = /^\\/\\//;\n\n/**\n * @class Autolinker.match.Url\n * @extends Autolinker.match.AbstractMatch\n *\n * Represents a Url match found in an input string which should be Autolinked.\n *\n * See this class's superclass ({@link Autolinker.match.Match}) for more details.\n */\nexport class UrlMatch extends AbstractMatch {\n    /**\n     * @public\n     * @property {'url'} type\n     *\n     * A string name for the type of match that this class represents. Can be\n     * used in a TypeScript discriminating union to type-narrow from the\n     * `Match` type.\n     */\n    public readonly type = 'url' as const;\n\n    /**\n     * @cfg {String} url (required)\n     *\n     * The url that was matched.\n     */\n    private url: string = ''; // default value just to get the above doc comment in the ES5 output and documentation generator\n\n    /**\n     * @cfg {\"scheme\"/\"www\"/\"tld\"} urlMatchType (required)\n     *\n     * The type of URL match that this class represents. This helps to determine\n     * if the match was made in the original text with a prefixed scheme (ex:\n     * 'http://www.google.com'), a prefixed 'www' (ex: 'www.google.com'), or\n     * was matched by a known top-level domain (ex: 'google.com').\n     */\n    private readonly urlMatchType: UrlMatchType = 'scheme'; // default value just to get the above doc comment in the ES5 output and documentation generator\n\n    /**\n     * @cfg {Boolean} protocolRelativeMatch (required)\n     *\n     * `true` if the URL is a protocol-relative match. A protocol-relative match\n     * is a URL that starts with '//', and will be either http:// or https://\n     * based on the protocol that the site is loaded under.\n     */\n    private readonly protocolRelativeMatch: boolean = false; // default value just to get the above doc comment in the ES5 output and documentation generator\n\n    /**\n     * @cfg {Object} stripPrefix (required)\n     *\n     * The Object form of {@link Autolinker#cfg-stripPrefix}.\n     */\n    private readonly stripPrefix: Required<StripPrefixConfigObj> = {\n        scheme: true,\n        www: true,\n    }; // default value just to get the above doc comment in the ES5 output and documentation generator\n\n    /**\n     * @cfg {Boolean} stripTrailingSlash (required)\n     * @inheritdoc Autolinker#cfg-stripTrailingSlash\n     */\n    private readonly stripTrailingSlash: boolean = true; // default value just to get the above doc comment in the ES5 output and documentation generator\n\n    /**\n     * @cfg {Boolean} decodePercentEncoding (required)\n     * @inheritdoc Autolinker#cfg-decodePercentEncoding\n     */\n    private readonly decodePercentEncoding: boolean = true; // default value just to get the above doc comment in the ES5 output and documentation generator\n\n    /**\n     * @private\n     * @property {Boolean} protocolPrepended\n     *\n     * Will be set to `true` if the 'http://' protocol has been prepended to the {@link #url} (because the\n     * {@link #url} did not have a protocol)\n     */\n    private protocolPrepended: boolean = false;\n\n    /**\n     * @method constructor\n     * @param {Object} cfg The configuration properties for the Match\n     *   instance, specified in an Object (map).\n     */\n    constructor(cfg: UrlMatchConfig) {\n        super(cfg);\n\n        this.urlMatchType = cfg.urlMatchType;\n        this.url = cfg.url;\n        this.protocolRelativeMatch = cfg.protocolRelativeMatch;\n        this.stripPrefix = cfg.stripPrefix;\n        this.stripTrailingSlash = cfg.stripTrailingSlash;\n        this.decodePercentEncoding = cfg.decodePercentEncoding;\n    }\n\n    /**\n     * Returns a string name for the type of match that this class represents.\n     * For the case of UrlMatch, returns 'url'.\n     *\n     * @return {String}\n     */\n    public getType(): 'url' {\n        return 'url';\n    }\n\n    /**\n     * Returns a string name for the type of URL match that this class\n     * represents.\n     *\n     * This helps to determine if the match was made in the original text with a\n     * prefixed scheme (ex: 'http://www.google.com'), a prefixed 'www' (ex:\n     * 'www.google.com'), or was matched by a known top-level domain (ex:\n     * 'google.com').\n     *\n     * @return {\"scheme\"/\"www\"/\"tld\"}\n     */\n    public getUrlMatchType(): UrlMatchType {\n        return this.urlMatchType;\n    }\n\n    /**\n     * Returns the url that was matched, assuming the protocol to be 'http://' if the original\n     * match was missing a protocol.\n     *\n     * @return {String}\n     */\n    public getUrl(): string {\n        let url = this.url;\n\n        // if the url string doesn't begin with a scheme, assume 'http://'\n        if (\n            !this.protocolRelativeMatch &&\n            this.urlMatchType !== 'scheme' &&\n            !this.protocolPrepended\n        ) {\n            url = this.url = 'http://' + url;\n\n            this.protocolPrepended = true;\n        }\n\n        return url;\n    }\n\n    /**\n     * Returns the anchor href that should be generated for the match.\n     *\n     * @return {String}\n     */\n    public getAnchorHref(): string {\n        const url = this.getUrl();\n\n        return url.replace(/&amp;/g, '&'); // any &amp;'s in the URL should be converted back to '&' if they were displayed as &amp; in the source html\n    }\n\n    /**\n     * Returns the anchor text that should be generated for the match.\n     *\n     * @return {String}\n     */\n    getAnchorText(): string {\n        let anchorText = this.getMatchedText();\n\n        if (this.protocolRelativeMatch) {\n            // Strip off any protocol-relative '//' from the anchor text\n            anchorText = stripProtocolRelativePrefix(anchorText);\n        }\n        if (this.stripPrefix.scheme) {\n            anchorText = stripSchemePrefix(anchorText);\n        }\n        if (this.stripPrefix.www) {\n            anchorText = stripWwwPrefix(anchorText);\n        }\n        if (this.stripTrailingSlash) {\n            anchorText = removeTrailingSlash(anchorText); // remove trailing slash, if there is one\n        }\n        if (this.decodePercentEncoding) {\n            anchorText = removePercentEncoding(anchorText);\n        }\n        return anchorText;\n    }\n}\n\nexport interface UrlMatchConfig extends AbstractMatchConfig {\n    url: string;\n    urlMatchType: UrlMatchType;\n    protocolRelativeMatch: boolean;\n    stripPrefix: Required<StripPrefixConfigObj>;\n    stripTrailingSlash: boolean;\n    decodePercentEncoding: boolean;\n}\n\nexport type UrlMatchType = 'scheme' | 'tld' | 'ipV4';\n\n// Utility Functionality\n\n/**\n * Strips the scheme prefix (such as \"http://\" or \"https://\") from the given\n * `url`.\n *\n * @private\n * @param {String} url The text of the anchor that is being generated, for\n *   which to strip off the url scheme.\n * @return {String} The `url`, with the scheme stripped.\n */\nfunction stripSchemePrefix(url: string): string {\n    return url.replace(httpSchemePrefixRe, '');\n}\n\n/**\n * Strips the 'www' prefix from the given `url`.\n *\n * @private\n * @param {String} url The text of the anchor that is being generated, for\n *   which to strip off the 'www' if it exists.\n * @return {String} The `url`, with the 'www' stripped.\n */\nfunction stripWwwPrefix(url: string): string {\n    // If the URL doesn't actually include 'www.' in it, skip running the\n    // .replace() regexp on it, which is fairly slow even just to check the\n    // string for the 'www.'s existence. Most URLs these days do not have 'www.'\n    // in it, so most of the time we skip running the .replace(). One other\n    // option in the future is to run a state machine on the `url` string\n    if (!url.includes('www.')) {\n        return url;\n    } else {\n        return url.replace(wwwPrefixRegex, '$1'); // leave any scheme ($1), it one exists\n    }\n}\n\n/**\n * Strips any protocol-relative '//' from the anchor text.\n *\n * @private\n * @param {String} text The text of the anchor that is being generated, for which to strip off the\n *   protocol-relative prefix (such as stripping off \"//\")\n * @return {String} The `anchorText`, with the protocol-relative prefix stripped.\n */\nfunction stripProtocolRelativePrefix(text: string): string {\n    return text.replace(protocolRelativeRegex, '');\n}\n\n/**\n * Removes any trailing slash from the given `anchorText`, in preparation for the text to be displayed.\n *\n * @private\n * @param {String} anchorText The text of the anchor that is being generated, for which to remove any trailing\n *   slash ('/') that may exist.\n * @return {String} The `anchorText`, with the trailing slash removed.\n */\nfunction removeTrailingSlash(anchorText: string): string {\n    if (anchorText.charAt(anchorText.length - 1) === '/') {\n        anchorText = anchorText.slice(0, -1);\n    }\n    return anchorText;\n}\n\n/**\n * Decodes percent-encoded characters from the given `anchorText`, in\n * preparation for the text to be displayed.\n *\n * @private\n * @param {String} anchorText The text of the anchor that is being\n *   generated, for which to decode any percent-encoded characters.\n * @return {String} The `anchorText`, with the percent-encoded characters\n *   decoded.\n */\nfunction removePercentEncoding(anchorText: string): string {\n    // First, convert a few of the known % encodings to the corresponding\n    // HTML entities that could accidentally be interpretted as special\n    // HTML characters\n    // NOTE: This used to be written as 5 separate .replace() calls, but that\n    //       was 25% slower than the current form below according to jsperf\n    const preProcessedEntityAnchorText = anchorText.replace(/%(?:22|26|27|3C|3E)/gi, match => {\n        if (match === '%22') return '&quot;'; // %22: '\"' char\n        if (match === '%26') return '&amp;'; // %26: '&' char\n        if (match === '%27') return '&#39;'; // %27: \"'\" char\n        if (match === '%3C' || match === '%3c') return '&lt;'; // %3C: '<' char\n        /*if (match === '%3E' || match === '%3e')*/ return '&gt;'; // %3E: '>' char\n    });\n\n    // Now attempt to URL-decode the rest of the anchor text. However,\n    // decodeURIComponent() is a slow function. Only call it if we have\n    // remaining %-encoded entities. Adding this check added ~300 ops/sec to\n    // benchmark\n    if (preProcessedEntityAnchorText.includes('%')) {\n        try {\n            return decodeURIComponent(preProcessedEntityAnchorText);\n            // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        } catch (error: unknown) {\n            // Invalid % escape sequence in the anchor text, we'll simply return\n            // the preProcessedEntityAnchorText below\n        }\n    }\n    return preProcessedEntityAnchorText;\n}\n","import { isAlphaNumericOrMarkChar, isValidEmailLocalPartSpecialChar } from '../char-utils';\nimport { isKnownTld } from './uri-utils';\n\n/**\n * A regular expression to match a 'mailto:' prefix on an email address.\n */\nexport const mailtoSchemePrefixRe = /^mailto:/i;\n\n/**\n * Determines if the given character may start the \"local part\" of an email\n * address. The local part is the part to the left of the '@' sign.\n *\n * Technically according to the email spec, any of the characters in the\n * {@link emailLocalPartCharRegex} can start an email address (including any of\n * the special characters), but this is so rare in the wild and the\n * implementation is much simpler by only starting an email address with a word\n * character. This is especially important when matching the '{' character which\n * generally starts a brace that isn't part of the email address.\n */\nexport const isEmailLocalPartStartChar = isAlphaNumericOrMarkChar; // alias for clarity\n\n/**\n * Determines if the given character can be part of the \"local part\" of an email\n * address. The local part is the part to the left of the '@' sign.\n *\n * Checking for an email address's start char is handled with {@link #isEmailLocalPartStartChar}\n */\nexport function isEmailLocalPartChar(charCode: number): boolean {\n    return isEmailLocalPartStartChar(charCode) || isValidEmailLocalPartSpecialChar(charCode);\n}\n\n/**\n * Determines if the given email address is valid. We consider it valid if it\n * has a valid TLD in its host.\n *\n * @param emailAddress email address\n * @return true is email have valid TLD, false otherwise\n */\nexport function isValidEmail(emailAddress: string): boolean {\n    const emailAddressTld: string = emailAddress.split('.').pop()!; // as long as we have a valid string (as opposed to null or undefined), we will always get at least one element in the .split('.') array\n\n    return isKnownTld(emailAddressTld);\n}\n","import { AbstractMatchConfig, AbstractMatch } from './abstract-match';\n\n/**\n * @class Autolinker.match.Email\n * @extends Autolinker.match.AbstractMatch\n *\n * Represents a Email match found in an input string which should be Autolinked.\n *\n * See this class's superclass ({@link Autolinker.match.Match}) for more details.\n */\nexport class EmailMatch extends AbstractMatch {\n    /**\n     * @public\n     * @property {'email'} type\n     *\n     * A string name for the type of match that this class represents. Can be\n     * used in a TypeScript discriminating union to type-narrow from the\n     * `Match` type.\n     */\n    public readonly type = 'email' as const;\n\n    /**\n     * @cfg {String} email (required)\n     *\n     * The email address that was matched.\n     */\n    private readonly email: string = ''; // default value just to get the above doc comment in the ES5 output and documentation generator\n\n    /**\n     * @method constructor\n     * @param {Object} cfg The configuration properties for the Match\n     *   instance, specified in an Object (map).\n     */\n    constructor(cfg: EmailMatchConfig) {\n        super(cfg);\n\n        this.email = cfg.email;\n    }\n\n    /**\n     * Returns a string name for the type of match that this class represents.\n     * For the case of EmailMatch, returns 'email'.\n     *\n     * @return {String}\n     */\n    getType(): 'email' {\n        return 'email';\n    }\n\n    /**\n     * Returns the email address that was matched.\n     *\n     * @return {String}\n     */\n    getEmail() {\n        return this.email;\n    }\n\n    /**\n     * Returns the anchor href that should be generated for the match.\n     *\n     * @return {String}\n     */\n    getAnchorHref() {\n        return 'mailto:' + this.email;\n    }\n\n    /**\n     * Returns the anchor text that should be generated for the match.\n     *\n     * @return {String}\n     */\n    getAnchorText() {\n        return this.email;\n    }\n}\n\nexport interface EmailMatchConfig extends AbstractMatchConfig {\n    email: string;\n}\n","import { Char } from '../char';\nimport { isAlphaNumericOrMarkChar } from '../char-utils';\n\n/**\n * Determines if the given `char` is a an allowed character in a hashtag. These\n * are underscores or any alphanumeric char.\n */\nexport function isHashtagTextChar(charCode: number): boolean {\n    return charCode === Char.Underscore || isAlphaNumericOrMarkChar(charCode);\n}\n\n/**\n * Determines if a hashtag match is valid.\n */\nexport function isValidHashtag(hashtag: string): boolean {\n    // Max length of 140 for a hashtag ('#' char + 139 word chars)\n    return hashtag.length <= 140;\n}\n\nexport type HashtagService = 'twitter' | 'facebook' | 'instagram' | 'tiktok' | 'youtube';\nexport const hashtagServices: HashtagService[] = [\n    'twitter',\n    'facebook',\n    'instagram',\n    'tiktok',\n    'youtube',\n];\n","import { HashtagService } from '../parser/hashtag-utils';\nimport { assertNever } from '../utils';\nimport { AbstractMatch, AbstractMatchConfig } from './abstract-match';\n\n/**\n * @class Autolinker.match.Hashtag\n * @extends Autolinker.match.AbstractMatch\n *\n * Represents a Hashtag match found in an input string which should be\n * Autolinked.\n *\n * See this class's superclass ({@link Autolinker.match.Match}) for more\n * details.\n */\nexport class HashtagMatch extends AbstractMatch {\n    /**\n     * @public\n     * @property {'hashtag'} type\n     *\n     * A string name for the type of match that this class represents. Can be\n     * used in a TypeScript discriminating union to type-narrow from the\n     * `Match` type.\n     */\n    public readonly type = 'hashtag' as const;\n\n    /**\n     * @cfg {String} serviceName\n     *\n     * The service to point hashtag matches to. See {@link Autolinker#hashtag}\n     * for available values.\n     */\n    private readonly serviceName: HashtagService = 'twitter'; // default value just to get the above doc comment in the ES5 output and documentation generator\n\n    /**\n     * @cfg {String} hashtag (required)\n     *\n     * The HashtagMatch that was matched, without the '#'.\n     */\n    private readonly hashtag: string = ''; // default value just to get the above doc comment in the ES5 output and documentation generator\n\n    /**\n     * @method constructor\n     * @param {Object} cfg The configuration properties for the Match\n     *   instance, specified in an Object (map).\n     */\n    constructor(cfg: HashtagMatchConfig) {\n        super(cfg);\n\n        this.serviceName = cfg.serviceName;\n        this.hashtag = cfg.hashtag;\n    }\n\n    /**\n     * Returns a string name for the type of match that this class represents.\n     * For the case of HashtagMatch, returns 'hashtag'.\n     *\n     * @return {String}\n     */\n    getType(): 'hashtag' {\n        return 'hashtag';\n    }\n\n    /**\n     * Returns the configured {@link #serviceName} to point the HashtagMatch to.\n     * Ex: 'facebook', 'twitter'.\n     *\n     * @return {String}\n     */\n    getServiceName(): HashtagService {\n        return this.serviceName;\n    }\n\n    /**\n     * Returns the matched hashtag, without the '#' character.\n     *\n     * @return {String}\n     */\n    getHashtag(): string {\n        return this.hashtag;\n    }\n\n    /**\n     * Returns the anchor href that should be generated for the match.\n     *\n     * @return {String}\n     */\n    getAnchorHref(): string {\n        const serviceName = this.serviceName,\n            hashtag = this.hashtag;\n\n        switch (serviceName) {\n            case 'twitter':\n                return 'https://twitter.com/hashtag/' + hashtag;\n            case 'facebook':\n                return 'https://www.facebook.com/hashtag/' + hashtag;\n            case 'instagram':\n                return 'https://instagram.com/explore/tags/' + hashtag;\n            case 'tiktok':\n                return 'https://www.tiktok.com/tag/' + hashtag;\n            case 'youtube':\n                return 'https://youtube.com/hashtag/' + hashtag;\n\n            /* istanbul ignore next */\n            default:\n                // Should never happen because Autolinker's constructor should block any invalid values, but just in case\n                assertNever(serviceName);\n        }\n    }\n\n    /**\n     * Returns the anchor text that should be generated for the match.\n     *\n     * @return {String}\n     */\n    getAnchorText(): string {\n        return '#' + this.hashtag;\n    }\n\n    /**\n     * Returns the CSS class suffixes that should be used on a tag built with\n     * the match. See {@link Autolinker.match.Match#getCssClassSuffixes} for\n     * details.\n     *\n     * @return {String[]}\n     */\n    getCssClassSuffixes(): string[] {\n        const cssClassSuffixes = super.getCssClassSuffixes(),\n            serviceName = this.getServiceName();\n\n        if (serviceName) {\n            cssClassSuffixes.push(serviceName);\n        }\n        return cssClassSuffixes;\n    }\n}\n\nexport interface HashtagMatchConfig extends AbstractMatchConfig {\n    serviceName: HashtagService;\n    hashtag: string;\n}\n","import { Char } from '../char';\nimport { isDigitChar, isAsciiLetterChar } from '../char-utils';\n\nconst mentionRegexes: { [serviceName in MentionService]: RegExp } = {\n    twitter: /^@\\w{1,15}$/,\n    instagram: /^@[_\\w]{1,30}$/,\n    soundcloud: /^@[-a-z0-9_]{3,25}$/,\n\n    // TikTok usernames are 1-24 characters containing letters, numbers, underscores\n    // and periods, but cannot end in a period: https://support.tiktok.com/en/getting-started/setting-up-your-profile/changing-your-username\n    tiktok: /^@[.\\w]{1,23}[\\w]$/,\n\n    // Youtube usernames are 3-30 characters containing letters, numbers, underscores,\n    // dashes, or latin middle dots ('·').\n    // https://support.google.com/youtube/answer/11585688?hl=en&co=GENIE.Platform%3DAndroid#tns\n    youtube: /^@[-.·\\w]{3,30}$/,\n};\n\n/**\n * Determines if the given character can be part of a mention's text characters.\n *\n * Accepts characters that match the RegExp `/[-\\w.]/`, which are the possible\n * mention characters for any service.\n *\n * We'll confirm the match based on the user-configured service name after the\n * match is found.\n */\nexport function isMentionTextChar(charCode: number): boolean {\n    return (\n        charCode === Char.Dash || // '-'\n        charCode === Char.Dot || // '.'\n        charCode === Char.Underscore || // '_'\n        isAsciiLetterChar(charCode) ||\n        isDigitChar(charCode)\n    );\n}\n\n/**\n * Determines if the given `mention` text is valid.\n */\nexport function isValidMention(mention: string, serviceName: MentionService): boolean {\n    const re = mentionRegexes[serviceName];\n\n    return re.test(mention);\n}\n\nexport type MentionService = 'twitter' | 'instagram' | 'soundcloud' | 'tiktok' | 'youtube';\nexport const mentionServices: MentionService[] = [\n    'twitter',\n    'instagram',\n    'soundcloud',\n    'tiktok',\n    'youtube',\n];\n","import { MentionService } from '../parser/mention-utils';\nimport { assertNever } from '../utils';\nimport { AbstractMatch, AbstractMatchConfig } from './abstract-match';\n\n/**\n * @class Autolinker.match.Mention\n * @extends Autolinker.match.AbstractMatch\n *\n * Represents a Mention match found in an input string which should be Autolinked.\n *\n * See this class's superclass ({@link Autolinker.match.Match}) for more details.\n */\nexport class MentionMatch extends AbstractMatch {\n    /**\n     * @public\n     * @property {'mention'} type\n     *\n     * A string name for the type of match that this class represents. Can be\n     * used in a TypeScript discriminating union to type-narrow from the\n     * `Match` type.\n     */\n    public readonly type = 'mention' as const;\n\n    /**\n     * @cfg {String} serviceName\n     *\n     * The service to point mention matches to. See {@link Autolinker#mention}\n     * for available values.\n     */\n    private readonly serviceName: MentionService = 'twitter'; // default value just to get the above doc comment in the ES5 output and documentation generator\n\n    /**\n     * @cfg {String} mention (required)\n     *\n     * The Mention that was matched, without the '@' character.\n     */\n    private readonly mention: string = ''; // default value just to get the above doc comment in the ES5 output and documentation generator\n\n    /**\n     * @method constructor\n     * @param {Object} cfg The configuration properties for the Match\n     *   instance, specified in an Object (map).\n     */\n    constructor(cfg: MentionMatchConfig) {\n        super(cfg);\n\n        this.mention = cfg.mention;\n        this.serviceName = cfg.serviceName;\n    }\n\n    /**\n     * Returns a string name for the type of match that this class represents.\n     * For the case of MentionMatch, returns 'mention'.\n     *\n     * @return {String}\n     */\n    getType(): 'mention' {\n        return 'mention';\n    }\n\n    /**\n     * Returns the mention, without the '@' character.\n     *\n     * @return {String}\n     */\n    getMention(): string {\n        return this.mention;\n    }\n\n    /**\n     * Returns the configured {@link #serviceName} to point the mention to.\n     * Ex: 'instagram', 'twitter', 'soundcloud'.\n     *\n     * @return {String}\n     */\n    getServiceName(): MentionService {\n        return this.serviceName;\n    }\n\n    /**\n     * Returns the anchor href that should be generated for the match.\n     *\n     * @return {String}\n     */\n    getAnchorHref(): string {\n        switch (this.serviceName) {\n            case 'twitter':\n                return 'https://twitter.com/' + this.mention;\n            case 'instagram':\n                return 'https://instagram.com/' + this.mention;\n            case 'soundcloud':\n                return 'https://soundcloud.com/' + this.mention;\n            case 'tiktok':\n                return 'https://www.tiktok.com/@' + this.mention;\n            case 'youtube':\n                return 'https://youtube.com/@' + this.mention;\n\n            /* istanbul ignore next */\n            default:\n                // Should never happen because Autolinker's constructor should block any invalid values, but just in case.\n                assertNever(this.serviceName);\n        }\n    }\n\n    /**\n     * Returns the anchor text that should be generated for the match.\n     *\n     * @return {String}\n     */\n    getAnchorText(): string {\n        return '@' + this.mention;\n    }\n\n    /**\n     * Returns the CSS class suffixes that should be used on a tag built with\n     * the match. See {@link Autolinker.match.Match#getCssClassSuffixes} for\n     * details.\n     *\n     * @return {String[]}\n     */\n    getCssClassSuffixes(): string[] {\n        const cssClassSuffixes = super.getCssClassSuffixes(),\n            serviceName = this.getServiceName();\n\n        if (serviceName) {\n            cssClassSuffixes.push(serviceName);\n        }\n        return cssClassSuffixes;\n    }\n}\n\nexport interface MentionMatchConfig extends AbstractMatchConfig {\n    serviceName: MentionService;\n    mention: string;\n}\n","// Regex that specifies any delimiter char that allows us to treat the number as\n\nimport { Char } from '../char';\n\n// a phone number rather than just any other number that could appear in text.\nconst hasDelimCharsRe = /[-. ()]/;\n\n// Over the years, many people have added to this regex, but it should have been\n// split up by country. Maybe one day we can break this down.\nconst mostPhoneNumbers =\n    /(?:(?:(?:(\\+)?\\d{1,3}[-. ]?)?\\(?\\d{3}\\)?[-. ]?\\d{3}[-. ]?\\d{4})|(?:(\\+)(?:9[976]\\d|8[987530]\\d|6[987]\\d|5[90]\\d|42\\d|3[875]\\d|2[98654321]\\d|9[8543210]|8[6421]|6[6543210]|5[87654321]|4[987654310]|3[9643210]|2[70]|7|1)[-. ]?(?:\\d[-. ]?){6,12}\\d+))([,;]+[0-9]+#?)*/;\n\n// Regex for Japanese phone numbers\nconst japanesePhoneRe =\n    /(0([1-9]-?[1-9]\\d{3}|[1-9]{2}-?\\d{3}|[1-9]{2}\\d{1}-?\\d{2}|[1-9]{2}\\d{2}-?\\d{1})-?\\d{4}|0[789]0-?\\d{4}-?\\d{4}|050-?\\d{4}-?\\d{4})/;\n\n// Combined regex\nconst validPhoneNumberRe = new RegExp(`^${mostPhoneNumbers.source}|${japanesePhoneRe.source}$`);\n\n/**\n * Determines if the character is a phone number separator character (i.e.\n * '-', '.', or ' ' (space))\n */\nexport function isPhoneNumberSeparatorChar(charCode: number): boolean {\n    return (\n        charCode === Char.Dash || // '-'\n        charCode === Char.Dot || // '.'\n        charCode === Char.Space // ' '\n    );\n}\n\n/**\n * Determines if the character is a control character in a phone number. Control\n * characters are as follows:\n *\n * - ',': A 1 second pause. Useful for dialing extensions once the main phone number has been reached\n * - ';': A \"wait\" that waits for the user to take action (tap something, for instance on a smart phone)\n */\nexport function isPhoneNumberControlChar(charCode: number): boolean {\n    return (\n        charCode === Char.Comma || // ','\n        charCode === Char.SemiColon // ';'\n    );\n}\n\n/**\n * Determines if the given phone number text found in a string is a valid phone\n * number.\n *\n * Our state machine parser is simplified to grab anything that looks like a\n * phone number, and this function confirms the match.\n */\nexport function isValidPhoneNumber(phoneNumberText: string): boolean {\n    // We'll only consider the match as a phone number if there is some kind of\n    // delimiter character (a prefixed '+' sign, or separator chars).\n    //\n    // Accepts:\n    //     (123) 456-7890\n    //     +38755233976\n    // Does not accept:\n    //     1234567890  (no delimiter chars - may just be a random number that's not a phone number)\n    const hasDelimiters =\n        phoneNumberText.charAt(0) === '+' || hasDelimCharsRe.test(phoneNumberText);\n\n    return hasDelimiters && validPhoneNumberRe.test(phoneNumberText);\n}\n","import { AbstractMatch, AbstractMatchConfig } from './abstract-match';\n\n/**\n * @class Autolinker.match.Phone\n * @extends Autolinker.match.AbstractMatch\n *\n * Represents a Phone number match found in an input string which should be\n * Autolinked.\n *\n * See this class's superclass ({@link Autolinker.match.Match}) for more\n * details.\n */\nexport class PhoneMatch extends AbstractMatch {\n    /**\n     * @public\n     * @property {'phone'} type\n     *\n     * A string name for the type of match that this class represents. Can be\n     * used in a TypeScript discriminating union to type-narrow from the\n     * `Match` type.\n     */\n    public readonly type = 'phone' as const;\n\n    /**\n     * @protected\n     * @property {String} number (required)\n     *\n     * The phone number that was matched, without any delimiter characters.\n     *\n     * Note: This is a string to allow for prefixed 0's.\n     */\n    private readonly number: string = ''; // default value just to get the above doc comment in the ES5 output and documentation generator\n\n    /**\n     * @protected\n     * @property  {Boolean} plusSign (required)\n     *\n     * `true` if the matched phone number started with a '+' sign. We'll include\n     * it in the `tel:` URL if so, as this is needed for international numbers.\n     *\n     * Ex: '+1 (123) 456 7879'\n     */\n    private readonly plusSign: boolean = false; // default value just to get the above doc comment in the ES5 output and documentation generator\n\n    /**\n     * @method constructor\n     * @param {Object} cfg The configuration properties for the Match\n     *   instance, specified in an Object (map).\n     */\n    constructor(cfg: PhoneMatchConfig) {\n        super(cfg);\n\n        this.number = cfg.number;\n        this.plusSign = cfg.plusSign;\n    }\n\n    /**\n     * Returns a string name for the type of match that this class represents.\n     * For the case of PhoneMatch, returns 'phone'.\n     *\n     * @return {String}\n     */\n    getType(): 'phone' {\n        return 'phone';\n    }\n\n    /**\n     * Returns the phone number that was matched as a string, without any\n     * delimiter characters.\n     *\n     * Note: This is a string to allow for prefixed 0's.\n     *\n     * @return {String}\n     */\n    getPhoneNumber(): string {\n        return this.number;\n    }\n\n    /**\n     * Alias of {@link #getPhoneNumber}, returns the phone number that was\n     * matched as a string, without any delimiter characters.\n     *\n     * Note: This is a string to allow for prefixed 0's.\n     *\n     * @return {String}\n     */\n    getNumber(): string {\n        return this.getPhoneNumber();\n    }\n\n    /**\n     * Returns the anchor href that should be generated for the match.\n     *\n     * @return {String}\n     */\n    getAnchorHref(): string {\n        return 'tel:' + (this.plusSign ? '+' : '') + this.number;\n    }\n\n    /**\n     * Returns the anchor text that should be generated for the match.\n     *\n     * @return {String}\n     */\n    getAnchorText(): string {\n        return this.matchedText;\n    }\n}\n\nexport interface PhoneMatchConfig extends AbstractMatchConfig {\n    number: string;\n    plusSign: boolean;\n}\n","import { UrlMatch, UrlMatchType } from '../match/url-match';\nimport { Match } from '../match/match';\nimport { assertNever } from '../utils';\nimport {\n    httpSchemeRe,\n    isDomainLabelChar,\n    isDomainLabelStartChar,\n    isPathChar,\n    isSchemeChar,\n    isSchemeStartChar,\n    isUrlSuffixStartChar,\n    isValidIpV4Address,\n    isValidSchemeUrl,\n    isValidTldMatch,\n} from './uri-utils';\nimport {\n    isEmailLocalPartChar,\n    isEmailLocalPartStartChar,\n    isValidEmail,\n    mailtoSchemePrefixRe,\n} from './email-utils';\nimport { EmailMatch } from '../match/email-match';\nimport { HashtagService, isHashtagTextChar, isValidHashtag } from './hashtag-utils';\nimport { HashtagMatch } from '../match/hashtag-match';\nimport { isMentionTextChar, isValidMention, MentionService } from './mention-utils';\nimport { MentionMatch } from '../match/mention-match';\nimport {\n    isPhoneNumberSeparatorChar,\n    isPhoneNumberControlChar,\n    isValidPhoneNumber,\n} from './phone-number-utils';\nimport { PhoneMatch } from '../match/phone-match';\nimport { AnchorTagBuilder } from '../anchor-tag-builder';\nimport type { StripPrefixConfigObj } from '../autolinker';\nimport { Char } from '../char';\nimport {\n    isAlphaNumericOrMarkChar,\n    isCloseBraceChar,\n    isDigitChar,\n    isOpenBraceChar,\n    isUrlSuffixNotAllowedAsFinalChar,\n} from '../char-utils';\n\n// For debugging: search for and uncomment other \"For debugging\" lines\n// import CliTable from 'cli-table';\n\n/**\n * Context object containing all the state needed by the state machine functions.\n *\n * ## Historical note\n *\n * In v4.1.1, we used nested functions to handle the context via closures, but\n * this necessitated re-creating the functions for each call to `parseMatches()`,\n * which made them difficult for v8 to JIT optimize. In v4.1.2, we lifted all of\n * the functions to the top-level scope and passed the context object between\n * them, which allows the functions to be JIT compiled once and reused.\n */\nclass ParseMatchesContext {\n    public charIdx = 0; // Current character index being processed\n\n    public readonly text: string; // The input text being parsed\n    public readonly matches: Match[] = []; // Collection of matches found\n    public readonly tagBuilder: AnchorTagBuilder; // For building anchor tags\n    public readonly stripPrefix: Required<StripPrefixConfigObj>; // Strip prefix configuration\n    public readonly stripTrailingSlash: boolean; // Whether to strip trailing slashes\n    public readonly decodePercentEncoding: boolean; // Whether to decode percent encoding\n    public readonly hashtagServiceName: HashtagService; // Service name for hashtags\n    public readonly mentionServiceName: MentionService; // Service name for mentions\n\n    private _stateMachines: StateMachine[] = []; // Array of active state machines\n    private schemeUrlMachinesCount = 0; // part of an optimization to remove the need to go into a slow code block when unnecessary. Since it's been so long since the initial implementation, not sure that this can ever go above 1, but keeping it as a counter to be safe\n\n    constructor(text: string, args: ParseMatchesArgs) {\n        this.text = text;\n        this.tagBuilder = args.tagBuilder;\n        this.stripPrefix = args.stripPrefix;\n        this.stripTrailingSlash = args.stripTrailingSlash;\n        this.decodePercentEncoding = args.decodePercentEncoding;\n        this.hashtagServiceName = args.hashtagServiceName;\n        this.mentionServiceName = args.mentionServiceName;\n    }\n\n    public get stateMachines(): ReadonlyArray<StateMachine> {\n        return this._stateMachines;\n    }\n\n    public addMachine(stateMachine: StateMachine): void {\n        this._stateMachines.push(stateMachine);\n\n        if (isSchemeUrlStateMachine(stateMachine)) {\n            this.schemeUrlMachinesCount++;\n        }\n    }\n\n    public removeMachine(stateMachine: StateMachine): void {\n        // Performance note: this was originally implemented with Array.prototype.splice()\n        // and mutated the array in place. Switching to filter added ~280ops/sec\n        // on the benchmark, although likely at the expense of GC time. Perhaps\n        // in the future, we implement a rotating array so we never need to move\n        // or clean anything up\n        this._stateMachines = this._stateMachines.filter(m => m !== stateMachine);\n\n        // If we've removed the URL state machine, set the flag to false.\n        // This flag is a quick test that helps us skip a slow section of\n        // code when there is already a URL state machine present.\n        if (isSchemeUrlStateMachine(stateMachine)) {\n            this.schemeUrlMachinesCount--;\n        }\n    }\n\n    public hasSchemeUrlMachine(): boolean {\n        return this.schemeUrlMachinesCount > 0;\n    }\n}\n\n/**\n * Parses URL, email, twitter, mention, and hashtag matches from the given\n * `text`.\n */\nexport function parseMatches(text: string, args: ParseMatchesArgs): Match[] {\n    // Create the context object that will be passed to all state functions\n    const context = new ParseMatchesContext(text, args);\n\n    // For debugging: search for and uncomment other \"For debugging\" lines\n    // const table = new CliTable({\n    //     head: ['charIdx', 'char', 'code', 'type', 'states', 'startIdx', 'reached accept state'],\n    // });\n    for (; context.charIdx < context.text.length; context.charIdx++) {\n        const char = text.charAt(context.charIdx);\n        const charCode = text.charCodeAt(context.charIdx);\n\n        if (context.stateMachines.length === 0) {\n            stateNoMatch(context, char, charCode);\n        } else {\n            // Must loop through the state machines backwards for when one\n            // is removed\n            for (let stateIdx = context.stateMachines.length - 1; stateIdx >= 0; stateIdx--) {\n                const stateMachine = context.stateMachines[stateIdx];\n\n                switch (stateMachine.state) {\n                    // Protocol-relative URL states\n                    case State.ProtocolRelativeSlash1:\n                        stateProtocolRelativeSlash1(context, stateMachine, charCode);\n                        break;\n                    case State.ProtocolRelativeSlash2:\n                        stateProtocolRelativeSlash2(context, stateMachine, charCode);\n                        break;\n\n                    case State.SchemeChar:\n                        stateSchemeChar(context, stateMachine, charCode);\n                        break;\n                    case State.SchemeHyphen:\n                        stateSchemeHyphen(context, stateMachine, charCode);\n                        break;\n                    case State.SchemeColon:\n                        stateSchemeColon(context, stateMachine, charCode);\n                        break;\n                    case State.SchemeSlash1:\n                        stateSchemeSlash1(context, stateMachine, charCode);\n                        break;\n                    case State.SchemeSlash2:\n                        stateSchemeSlash2(context, stateMachine, char, charCode);\n                        break;\n\n                    case State.DomainLabelChar:\n                        stateDomainLabelChar(context, stateMachine, charCode);\n                        break;\n                    case State.DomainHyphen:\n                        stateDomainHyphen(context, stateMachine, char, charCode);\n                        break;\n                    case State.DomainDot:\n                        stateDomainDot(context, stateMachine, char, charCode);\n                        break;\n\n                    case State.IpV4Digit:\n                        stateIpV4Digit(context, stateMachine as IpV4UrlStateMachine, charCode);\n                        break;\n                    case State.IpV4Dot:\n                        stateIpV4Dot(context, stateMachine as IpV4UrlStateMachine, charCode);\n                        break;\n\n                    case State.PortColon:\n                        statePortColon(context, stateMachine, charCode);\n                        break;\n                    case State.PortNumber:\n                        statePortNumber(context, stateMachine, charCode);\n                        break;\n                    case State.Path:\n                        statePath(context, stateMachine, charCode);\n                        break;\n\n                    // Email States\n                    case State.EmailMailto_M:\n                        stateEmailMailto_M(context, stateMachine, char, charCode);\n                        break;\n                    case State.EmailMailto_A:\n                        stateEmailMailto_A(context, stateMachine, char, charCode);\n                        break;\n                    case State.EmailMailto_I:\n                        stateEmailMailto_I(context, stateMachine, char, charCode);\n                        break;\n                    case State.EmailMailto_L:\n                        stateEmailMailto_L(context, stateMachine, char, charCode);\n                        break;\n                    case State.EmailMailto_T:\n                        stateEmailMailto_T(context, stateMachine, char, charCode);\n                        break;\n                    case State.EmailMailto_O:\n                        stateEmailMailto_O(context, stateMachine, charCode);\n                        break;\n                    case State.EmailMailto_Colon:\n                        stateEmailMailtoColon(context, stateMachine, charCode);\n                        break;\n                    case State.EmailLocalPart:\n                        stateEmailLocalPart(context, stateMachine, charCode);\n                        break;\n                    case State.EmailLocalPartDot:\n                        stateEmailLocalPartDot(context, stateMachine, charCode);\n                        break;\n                    case State.EmailAtSign:\n                        stateEmailAtSign(context, stateMachine, charCode);\n                        break;\n                    case State.EmailDomainChar:\n                        stateEmailDomainChar(context, stateMachine, charCode);\n                        break;\n                    case State.EmailDomainHyphen:\n                        stateEmailDomainHyphen(context, stateMachine, charCode);\n                        break;\n                    case State.EmailDomainDot:\n                        stateEmailDomainDot(context, stateMachine, charCode);\n                        break;\n\n                    // Hashtag states\n                    case State.HashtagHashChar:\n                        stateHashtagHashChar(context, stateMachine, charCode);\n                        break;\n                    case State.HashtagTextChar:\n                        stateHashtagTextChar(context, stateMachine, charCode);\n                        break;\n\n                    // Mention states\n                    case State.MentionAtChar:\n                        stateMentionAtChar(context, stateMachine, charCode);\n                        break;\n                    case State.MentionTextChar:\n                        stateMentionTextChar(context, stateMachine, charCode);\n                        break;\n\n                    // Phone number states\n                    case State.PhoneNumberOpenParen:\n                        statePhoneNumberOpenParen(context, stateMachine, char, charCode);\n                        break;\n                    case State.PhoneNumberAreaCodeDigit1:\n                        statePhoneNumberAreaCodeDigit1(context, stateMachine, charCode);\n                        break;\n                    case State.PhoneNumberAreaCodeDigit2:\n                        statePhoneNumberAreaCodeDigit2(context, stateMachine, charCode);\n                        break;\n                    case State.PhoneNumberAreaCodeDigit3:\n                        statePhoneNumberAreaCodeDigit3(context, stateMachine, charCode);\n                        break;\n                    case State.PhoneNumberCloseParen:\n                        statePhoneNumberCloseParen(context, stateMachine, char, charCode);\n                        break;\n                    case State.PhoneNumberPlus:\n                        statePhoneNumberPlus(context, stateMachine, char, charCode);\n                        break;\n                    case State.PhoneNumberDigit:\n                        statePhoneNumberDigit(context, stateMachine, char, charCode);\n                        break;\n                    case State.PhoneNumberSeparator:\n                        statePhoneNumberSeparator(context, stateMachine, char, charCode);\n                        break;\n                    case State.PhoneNumberControlChar:\n                        statePhoneNumberControlChar(context, stateMachine, charCode);\n                        break;\n                    case State.PhoneNumberPoundChar:\n                        statePhoneNumberPoundChar(context, stateMachine, charCode);\n                        break;\n\n                    /* istanbul ignore next */\n                    default:\n                        assertNever(stateMachine.state);\n                }\n            }\n\n            // Special case for handling a colon (or other non-alphanumeric)\n            // when preceded by another character, such as in the text:\n            //     Link 1:http://google.com\n            // In this case, the 'h' character after the colon wouldn't start a\n            // new scheme url because we'd be in a ipv4 or tld url and the colon\n            // would be interpreted as a port ':' char. Also, only start a new\n            // scheme url machine if there isn't currently one so we don't start\n            // new ones for colons inside a url\n            //\n            // TODO: The addition of this snippet (to fix the bug) in 4.0.1 lost\n            // us ~500 ops/sec on the benchmarks. Optimizing it with the\n            // hasSchemeUrlMachine() flag and optimizing the isSchemeStartChar()\n            // method for 4.1.3 got us back about ~400ops/sec. One potential way\n            // to improve this even ore is to add this snippet to individual\n            // state handler functions where it can occur to prevent running it\n            // on every loop interation.\n            if (\n                !context.hasSchemeUrlMachine() &&\n                context.charIdx > 0 &&\n                isSchemeStartChar(charCode)\n            ) {\n                const prevCharCode = context.text.charCodeAt(context.charIdx - 1);\n                if (!isSchemeStartChar(prevCharCode)) {\n                    context.addMachine(\n                        createSchemeUrlStateMachine(context.charIdx, State.SchemeChar)\n                    );\n                }\n            }\n        }\n\n        // For debugging: search for and uncomment other \"For debugging\" lines\n        // table.push([\n        //     String(context.charIdx),\n        //     char,\n        //     `10: ${char.charCodeAt(0)}\\n0x: ${char.charCodeAt(0).toString(16)}\\nU+${char.codePointAt(0)}`,\n        //     context.stateMachines.map(machine => `${StateMachineType[machine.type]}${'matchType' in machine ? ` (${UrlStateMachineMatchType[machine.matchType]})` : ''}`).join('\\n') || '(none)',\n        //     context.stateMachines.map(machine => State[machine.state]).join('\\n') || '(none)',\n        //     context.stateMachines.map(m => m.startIdx).join('\\n'),\n        //     context.stateMachines.map(m => m.acceptStateReached).join('\\n'),\n        // ]);\n    }\n\n    // Capture any valid match at the end of the string\n    // Note: this loop must happen in reverse because\n    // captureMatchIfValidAndRemove() removes state machines from the array\n    // and we'll end up skipping every other one if we remove while looping\n    // forward\n    for (let i = context.stateMachines.length - 1; i >= 0; i--) {\n        context.stateMachines.forEach(stateMachine =>\n            captureMatchIfValidAndRemove(context, stateMachine)\n        );\n    }\n\n    // For debugging: search for and uncomment other \"For debugging\" lines\n    // console.log(`\\nRead string:\\n  ${text}`);\n    // console.log(table.toString());\n\n    return context.matches;\n}\n\n/**\n * Handles the state when we're not in a URL/email/etc. (i.e. when no state machines exist)\n */\nfunction stateNoMatch(context: ParseMatchesContext, char: string, charCode: number): void {\n    const { charIdx } = context;\n\n    if (charCode === Char.NumberSign /* '#' */) {\n        // Hash char, start a Hashtag match\n        context.addMachine(createHashtagStateMachine(charIdx, State.HashtagHashChar));\n    } else if (charCode === Char.AtSign /* '@' */) {\n        // '@' char, start a Mention match\n        context.addMachine(createMentionStateMachine(charIdx, State.MentionAtChar));\n    } else if (charCode === Char.Slash /* '/' */) {\n        // A slash could begin a protocol-relative URL\n        context.addMachine(createTldUrlStateMachine(charIdx, State.ProtocolRelativeSlash1));\n    } else if (charCode === Char.Plus /* '+' */) {\n        // A '+' char can start a Phone number\n        context.addMachine(createPhoneNumberStateMachine(charIdx, State.PhoneNumberPlus));\n    } else if (charCode === Char.OpenParen /* '(' */) {\n        context.addMachine(createPhoneNumberStateMachine(charIdx, State.PhoneNumberOpenParen));\n    } else {\n        if (isDigitChar(charCode)) {\n            // A digit could start a phone number\n            context.addMachine(createPhoneNumberStateMachine(charIdx, State.PhoneNumberDigit));\n\n            // A digit could start an IP address\n            context.addMachine(createIpV4UrlStateMachine(charIdx, State.IpV4Digit));\n        }\n\n        if (isEmailLocalPartStartChar(charCode)) {\n            // Any email local part. An 'm' character in particular could\n            // start a 'mailto:' match\n            const startState =\n                char.toLowerCase() === 'm' ? State.EmailMailto_M : State.EmailLocalPart;\n            context.addMachine(createEmailStateMachine(charIdx, startState));\n        }\n\n        if (isSchemeStartChar(charCode)) {\n            // An uppercase or lowercase letter may start a scheme match\n            context.addMachine(createSchemeUrlStateMachine(charIdx, State.SchemeChar));\n        }\n\n        if (isAlphaNumericOrMarkChar(charCode)) {\n            // A unicode alpha character or digit could start a domain name\n            // label for a TLD match\n            context.addMachine(createTldUrlStateMachine(charIdx, State.DomainLabelChar));\n        }\n    }\n\n    // Anything else, remain in the \"non-url\" state by not creating any\n    // state machines\n}\n\n// Implements ABNF: ALPHA *( ALPHA / DIGIT / \"+\" / \"-\" / \".\" )\nfunction stateSchemeChar(\n    context: ParseMatchesContext,\n    stateMachine: StateMachine,\n    charCode: number\n) {\n    if (charCode === Char.Colon /* ':' */) {\n        stateMachine.state = State.SchemeColon;\n    } else if (charCode === Char.Dash /* '-' */) {\n        stateMachine.state = State.SchemeHyphen;\n    } else if (isSchemeChar(charCode)) {\n        // Stay in SchemeChar state\n    } else {\n        // Any other character, not a scheme\n        context.removeMachine(stateMachine);\n    }\n}\n\nfunction stateSchemeHyphen(\n    context: ParseMatchesContext,\n    stateMachine: StateMachine,\n    charCode: number\n) {\n    const { charIdx } = context;\n\n    if (charCode === Char.Dash /* '-' */) {\n        // Stay in SchemeHyphen state\n        // TODO: Should a colon following a dash be counted as the end of the scheme?\n        // } else if (char === ':') {\n        //     stateMachine.state = State.SchemeColon;\n    } else if (charCode === Char.Slash /* '/' */) {\n        // Not a valid scheme match, but may be the start of a\n        // protocol-relative match (such as //google.com)\n        context.removeMachine(stateMachine);\n        context.addMachine(createTldUrlStateMachine(charIdx, State.ProtocolRelativeSlash1));\n    } else if (isSchemeChar(charCode)) {\n        stateMachine.state = State.SchemeChar;\n    } else {\n        // Any other character, not a scheme\n        context.removeMachine(stateMachine);\n    }\n}\n\n// https://tools.ietf.org/html/rfc3986#appendix-A\nfunction stateSchemeColon(\n    context: ParseMatchesContext,\n    stateMachine: StateMachine,\n    charCode: number\n) {\n    const { charIdx } = context;\n\n    if (charCode === Char.Slash /* '/' */) {\n        stateMachine.state = State.SchemeSlash1;\n    } else if (charCode === Char.Dot /* '.' */) {\n        // We've read something like 'hello:.' - don't capture\n        context.removeMachine(stateMachine);\n    } else if (isDomainLabelStartChar(charCode)) {\n        stateMachine.state = State.DomainLabelChar;\n\n        // It's possible that we read an \"introduction\" piece of text,\n        // and the character after the current colon actually starts an\n        // actual scheme. An example of this is:\n        //     \"The link:http://google.com\"\n        // Hence, start a new machine to capture this match if so\n        if (isSchemeStartChar(charCode)) {\n            context.addMachine(createSchemeUrlStateMachine(charIdx, State.SchemeChar));\n        }\n    } else {\n        context.removeMachine(stateMachine);\n    }\n}\n\n// https://tools.ietf.org/html/rfc3986#appendix-A\nfunction stateSchemeSlash1(\n    context: ParseMatchesContext,\n    stateMachine: StateMachine,\n    charCode: number\n) {\n    if (charCode === Char.Slash /* '/' */) {\n        stateMachine.state = State.SchemeSlash2;\n    } else if (isPathChar(charCode)) {\n        stateMachine.state = State.Path;\n        stateMachine.acceptStateReached = true;\n    } else {\n        captureMatchIfValidAndRemove(context, stateMachine);\n    }\n}\n\nfunction stateSchemeSlash2(\n    context: ParseMatchesContext,\n    stateMachine: StateMachine,\n    char: string,\n    charCode: number\n) {\n    if (charCode === Char.Slash /* '/' */) {\n        // 3rd slash, must be an absolute path (`path-absolute` in the\n        // ABNF), such as in \"file:///c:/windows/etc\". See\n        // https://tools.ietf.org/html/rfc3986#appendix-A\n        stateMachine.state = State.Path;\n        stateMachine.acceptStateReached = true;\n    } else if (isDomainLabelStartChar(charCode)) {\n        // start of \"authority\" section - see https://tools.ietf.org/html/rfc3986#appendix-A\n        stateMachine.state = State.DomainLabelChar;\n        stateMachine.acceptStateReached = true;\n    } else {\n        // not valid\n        context.removeMachine(stateMachine);\n    }\n}\n\n// Handles after we've read a '/' from the NonUrl state\nfunction stateProtocolRelativeSlash1(\n    context: ParseMatchesContext,\n    stateMachine: StateMachine,\n    charCode: number\n) {\n    if (charCode === Char.Slash /* '/' */) {\n        stateMachine.state = State.ProtocolRelativeSlash2;\n    } else {\n        // Anything else, cannot be the start of a protocol-relative\n        // URL.\n        context.removeMachine(stateMachine);\n    }\n}\n\n// Handles after we've read a second '/', which could start a protocol-relative URL\nfunction stateProtocolRelativeSlash2(\n    context: ParseMatchesContext,\n    stateMachine: StateMachine,\n    charCode: number\n) {\n    if (isDomainLabelStartChar(charCode)) {\n        stateMachine.state = State.DomainLabelChar;\n    } else {\n        // Anything else, not a URL\n        context.removeMachine(stateMachine);\n    }\n}\n\n// Handles when we have read a domain label character\nfunction stateDomainLabelChar(\n    context: ParseMatchesContext,\n    stateMachine: StateMachine,\n    charCode: number\n) {\n    if (charCode === Char.Dot /* '.' */) {\n        stateMachine.state = State.DomainDot;\n    } else if (charCode === Char.Dash /* '-' */) {\n        stateMachine.state = State.DomainHyphen;\n    } else if (charCode === Char.Colon /* ':' */) {\n        // Beginning of a port number, end the domain name\n        stateMachine.state = State.PortColon;\n    } else if (isUrlSuffixStartChar(charCode)) {\n        // '/', '?', or '#'\n        stateMachine.state = State.Path;\n    } else if (isDomainLabelChar(charCode)) {\n        // Stay in the DomainLabelChar state\n    } else {\n        // Anything else, end the domain name\n        captureMatchIfValidAndRemove(context, stateMachine);\n    }\n}\n\nfunction stateDomainHyphen(\n    context: ParseMatchesContext,\n    stateMachine: StateMachine,\n    char: string,\n    charCode: number\n) {\n    if (charCode === Char.Dash /* '-' */) {\n        // Remain in the DomainHyphen state\n    } else if (charCode === Char.Dot /* '.' */) {\n        // Not valid to have a '-.' in a domain label\n        captureMatchIfValidAndRemove(context, stateMachine);\n    } else if (isDomainLabelStartChar(charCode)) {\n        stateMachine.state = State.DomainLabelChar;\n    } else {\n        captureMatchIfValidAndRemove(context, stateMachine);\n    }\n}\n\nfunction stateDomainDot(\n    context: ParseMatchesContext,\n    stateMachine: StateMachine,\n    char: string,\n    charCode: number\n) {\n    if (charCode === Char.Dot /* '.' */) {\n        // domain names cannot have multiple '.'s next to each other.\n        // It's possible we've already read a valid domain name though,\n        // and that the '..' sequence just forms an ellipsis at the end\n        // of a sentence\n        captureMatchIfValidAndRemove(context, stateMachine);\n    } else if (isDomainLabelStartChar(charCode)) {\n        stateMachine.state = State.DomainLabelChar;\n        stateMachine.acceptStateReached = true; // after hitting a dot, and then another domain label, we've reached an accept state\n    } else {\n        // Anything else, end the domain name\n        captureMatchIfValidAndRemove(context, stateMachine);\n    }\n}\n\nfunction stateIpV4Digit(\n    context: ParseMatchesContext,\n    stateMachine: IpV4UrlStateMachine,\n    charCode: number\n) {\n    if (charCode === Char.Dot /* '.' */) {\n        stateMachine.state = State.IpV4Dot;\n    } else if (charCode === Char.Colon /* ':' */) {\n        // Beginning of a port number\n        stateMachine.state = State.PortColon;\n    } else if (isDigitChar(charCode)) {\n        // stay in the IPv4 digit state\n    } else if (isUrlSuffixStartChar(charCode)) {\n        stateMachine.state = State.Path;\n    } else if (isAlphaNumericOrMarkChar(charCode)) {\n        // If we hit an alpha character, must not be an IPv4\n        // Example of this: 1.2.3.4abc\n        context.removeMachine(stateMachine);\n    } else {\n        captureMatchIfValidAndRemove(context, stateMachine);\n    }\n}\n\nfunction stateIpV4Dot(\n    context: ParseMatchesContext,\n    stateMachine: IpV4UrlStateMachine,\n    charCode: number\n) {\n    if (isDigitChar(charCode)) {\n        stateMachine.octetsEncountered++;\n\n        // Once we have encountered 4 octets, it's *potentially* a valid\n        // IPv4 address. Our IPv4 regex will confirm the match later\n        // though to make sure each octet is in the 0-255 range, and\n        // there's exactly 4 octets (not 5 or more)\n        if (stateMachine.octetsEncountered === 4) {\n            stateMachine.acceptStateReached = true;\n        }\n\n        stateMachine.state = State.IpV4Digit;\n    } else {\n        captureMatchIfValidAndRemove(context, stateMachine);\n    }\n}\n\nfunction statePortColon(\n    context: ParseMatchesContext,\n    stateMachine: StateMachine,\n    charCode: number\n) {\n    if (isDigitChar(charCode)) {\n        stateMachine.state = State.PortNumber;\n    } else {\n        captureMatchIfValidAndRemove(context, stateMachine);\n    }\n}\n\nfunction statePortNumber(\n    context: ParseMatchesContext,\n    stateMachine: StateMachine,\n    charCode: number\n) {\n    if (isDigitChar(charCode)) {\n        // Stay in port number state\n    } else if (isUrlSuffixStartChar(charCode)) {\n        // '/', '?', or '#'\n        stateMachine.state = State.Path;\n    } else {\n        captureMatchIfValidAndRemove(context, stateMachine);\n    }\n}\n\nfunction statePath(context: ParseMatchesContext, stateMachine: StateMachine, charCode: number) {\n    if (isPathChar(charCode)) {\n        // Stay in the path state\n    } else {\n        captureMatchIfValidAndRemove(context, stateMachine);\n    }\n}\n\n// Handles if we're reading a 'mailto:' prefix on the string\nfunction stateEmailMailto_M(\n    context: ParseMatchesContext,\n    stateMachine: StateMachine,\n    char: string,\n    charCode: number\n) {\n    if (char.toLowerCase() === 'a') {\n        stateMachine.state = State.EmailMailto_A;\n    } else {\n        stateEmailLocalPart(context, stateMachine, charCode);\n    }\n}\n\nfunction stateEmailMailto_A(\n    context: ParseMatchesContext,\n    stateMachine: StateMachine,\n    char: string,\n    charCode: number\n) {\n    if (char.toLowerCase() === 'i') {\n        stateMachine.state = State.EmailMailto_I;\n    } else {\n        stateEmailLocalPart(context, stateMachine, charCode);\n    }\n}\n\nfunction stateEmailMailto_I(\n    context: ParseMatchesContext,\n    stateMachine: StateMachine,\n    char: string,\n    charCode: number\n) {\n    if (char.toLowerCase() === 'l') {\n        stateMachine.state = State.EmailMailto_L;\n    } else {\n        stateEmailLocalPart(context, stateMachine, charCode);\n    }\n}\n\nfunction stateEmailMailto_L(\n    context: ParseMatchesContext,\n    stateMachine: StateMachine,\n    char: string,\n    charCode: number\n) {\n    if (char.toLowerCase() === 't') {\n        stateMachine.state = State.EmailMailto_T;\n    } else {\n        stateEmailLocalPart(context, stateMachine, charCode);\n    }\n}\n\nfunction stateEmailMailto_T(\n    context: ParseMatchesContext,\n    stateMachine: StateMachine,\n    char: string,\n    charCode: number\n) {\n    if (char.toLowerCase() === 'o') {\n        stateMachine.state = State.EmailMailto_O;\n    } else {\n        stateEmailLocalPart(context, stateMachine, charCode);\n    }\n}\n\nfunction stateEmailMailto_O(\n    context: ParseMatchesContext,\n    stateMachine: StateMachine,\n    charCode: number\n) {\n    if (charCode === Char.Colon /* ':' */) {\n        stateMachine.state = State.EmailMailto_Colon;\n    } else {\n        stateEmailLocalPart(context, stateMachine, charCode);\n    }\n}\n\nfunction stateEmailMailtoColon(\n    context: ParseMatchesContext,\n    stateMachine: StateMachine,\n    charCode: number\n) {\n    if (isEmailLocalPartChar(charCode)) {\n        stateMachine.state = State.EmailLocalPart;\n    } else {\n        context.removeMachine(stateMachine);\n    }\n}\n\n// Handles the state when we're currently in the \"local part\" of an\n// email address (as opposed to the \"domain part\")\nfunction stateEmailLocalPart(\n    context: ParseMatchesContext,\n    stateMachine: StateMachine,\n    charCode: number\n) {\n    if (charCode === Char.Dot /* '.' */) {\n        stateMachine.state = State.EmailLocalPartDot;\n    } else if (charCode === Char.AtSign /* '@' */) {\n        stateMachine.state = State.EmailAtSign;\n    } else if (isEmailLocalPartChar(charCode)) {\n        // stay in the \"local part\" of the email address\n        // Note: because stateEmailLocalPart() is called from the\n        // 'mailto' states (when the 'mailto' prefix itself has been\n        // broken), make sure to set the state to EmailLocalPart\n        stateMachine.state = State.EmailLocalPart;\n    } else {\n        // not an email address character\n        context.removeMachine(stateMachine);\n    }\n}\n\n// Handles the state where we've read a '.' character in the local part of\n// the email address (i.e. the part before the '@' character)\nfunction stateEmailLocalPartDot(\n    context: ParseMatchesContext,\n    stateMachine: StateMachine,\n    charCode: number\n) {\n    if (charCode === Char.Dot /* '.' */) {\n        // We read a second '.' in a row, not a valid email address\n        // local part\n        context.removeMachine(stateMachine);\n    } else if (charCode === Char.AtSign /* '@' */) {\n        // We read the '@' character immediately after a dot ('.'), not\n        // an email address\n        context.removeMachine(stateMachine);\n    } else if (isEmailLocalPartChar(charCode)) {\n        stateMachine.state = State.EmailLocalPart;\n    } else {\n        // Anything else, not an email address\n        context.removeMachine(stateMachine);\n    }\n}\n\nfunction stateEmailAtSign(\n    context: ParseMatchesContext,\n    stateMachine: StateMachine,\n    charCode: number\n) {\n    if (isDomainLabelStartChar(charCode)) {\n        stateMachine.state = State.EmailDomainChar;\n    } else {\n        // Anything else, not an email address\n        context.removeMachine(stateMachine);\n    }\n}\n\nfunction stateEmailDomainChar(\n    context: ParseMatchesContext,\n    stateMachine: StateMachine,\n    charCode: number\n) {\n    if (charCode === Char.Dot /* '.' */) {\n        stateMachine.state = State.EmailDomainDot;\n    } else if (charCode === Char.Dash /* '-' */) {\n        stateMachine.state = State.EmailDomainHyphen;\n    } else if (isDomainLabelChar(charCode)) {\n        // Stay in the DomainChar state\n    } else {\n        // Anything else, we potentially matched if the criteria has\n        // been met\n        captureMatchIfValidAndRemove(context, stateMachine);\n    }\n}\n\nfunction stateEmailDomainHyphen(\n    context: ParseMatchesContext,\n    stateMachine: StateMachine,\n    charCode: number\n) {\n    if (charCode === Char.Dash /* '-' */ || charCode === Char.Dot /* '.' */) {\n        // Not valid to have two hyphens (\"--\") or hypen+dot (\"-.\")\n        captureMatchIfValidAndRemove(context, stateMachine);\n    } else if (isDomainLabelChar(charCode)) {\n        stateMachine.state = State.EmailDomainChar;\n    } else {\n        // Anything else\n        captureMatchIfValidAndRemove(context, stateMachine);\n    }\n}\n\nfunction stateEmailDomainDot(\n    context: ParseMatchesContext,\n    stateMachine: StateMachine,\n    charCode: number\n) {\n    if (charCode === Char.Dot /* '.' */ || charCode === Char.Dash /* '-' */) {\n        // not valid to have two dots (\"..\") or dot+hypen (\".-\")\n        captureMatchIfValidAndRemove(context, stateMachine);\n    } else if (isDomainLabelStartChar(charCode)) {\n        stateMachine.state = State.EmailDomainChar;\n\n        // After having read a '.' and then a valid domain character,\n        // we now know that the domain part of the email is valid, and\n        // we have found at least a partial EmailMatch (however, the\n        // email address may have additional characters from this point)\n        stateMachine.acceptStateReached = true;\n    } else {\n        // Anything else\n        captureMatchIfValidAndRemove(context, stateMachine);\n    }\n}\n\n// Handles the state when we've just encountered a '#' character\nfunction stateHashtagHashChar(\n    context: ParseMatchesContext,\n    stateMachine: StateMachine,\n    charCode: number\n) {\n    if (isHashtagTextChar(charCode)) {\n        // '#' char with valid hash text char following\n        stateMachine.state = State.HashtagTextChar;\n        stateMachine.acceptStateReached = true;\n    } else {\n        context.removeMachine(stateMachine);\n    }\n}\n\n// Handles the state when we're currently in the hash tag's text chars\nfunction stateHashtagTextChar(\n    context: ParseMatchesContext,\n    stateMachine: StateMachine,\n    charCode: number\n) {\n    if (isHashtagTextChar(charCode)) {\n        // Continue reading characters in the HashtagText state\n    } else {\n        captureMatchIfValidAndRemove(context, stateMachine);\n    }\n}\n\n// Handles the state when we've just encountered a '@' character\nfunction stateMentionAtChar(\n    context: ParseMatchesContext,\n    stateMachine: StateMachine,\n    charCode: number\n) {\n    if (isMentionTextChar(charCode)) {\n        // '@' char with valid mention text char following\n        stateMachine.state = State.MentionTextChar;\n        stateMachine.acceptStateReached = true;\n    } else {\n        context.removeMachine(stateMachine);\n    }\n}\n\n// Handles the state when we're currently in the mention's text chars\nfunction stateMentionTextChar(\n    context: ParseMatchesContext,\n    stateMachine: StateMachine,\n    charCode: number\n) {\n    if (isMentionTextChar(charCode)) {\n        // Continue reading characters in the HashtagText state\n    } else if (isAlphaNumericOrMarkChar(charCode)) {\n        // Char is invalid for a mention text char, not a valid match.\n        // Note that ascii alphanumeric chars are okay (which are tested\n        // in the previous 'if' statement, but others are not)\n        context.removeMachine(stateMachine);\n    } else {\n        captureMatchIfValidAndRemove(context, stateMachine);\n    }\n}\n\nfunction statePhoneNumberPlus(\n    context: ParseMatchesContext,\n    stateMachine: StateMachine,\n    char: string,\n    charCode: number\n) {\n    if (isDigitChar(charCode)) {\n        stateMachine.state = State.PhoneNumberDigit;\n    } else {\n        context.removeMachine(stateMachine);\n\n        // This character may start a new match. Add states for it\n        stateNoMatch(context, char, charCode);\n    }\n}\n\nfunction statePhoneNumberOpenParen(\n    context: ParseMatchesContext,\n    stateMachine: StateMachine,\n    char: string,\n    charCode: number\n) {\n    if (isDigitChar(charCode)) {\n        stateMachine.state = State.PhoneNumberAreaCodeDigit1;\n    } else {\n        context.removeMachine(stateMachine);\n    }\n\n    // It's also possible that the paren was just an open brace for\n    // a piece of text. Start other machines\n    stateNoMatch(context, char, charCode);\n}\n\nfunction statePhoneNumberAreaCodeDigit1(\n    context: ParseMatchesContext,\n    stateMachine: StateMachine,\n    charCode: number\n) {\n    if (isDigitChar(charCode)) {\n        stateMachine.state = State.PhoneNumberAreaCodeDigit2;\n    } else {\n        context.removeMachine(stateMachine);\n    }\n}\n\nfunction statePhoneNumberAreaCodeDigit2(\n    context: ParseMatchesContext,\n    stateMachine: StateMachine,\n    charCode: number\n) {\n    if (isDigitChar(charCode)) {\n        stateMachine.state = State.PhoneNumberAreaCodeDigit3;\n    } else {\n        context.removeMachine(stateMachine);\n    }\n}\n\nfunction statePhoneNumberAreaCodeDigit3(\n    context: ParseMatchesContext,\n    stateMachine: StateMachine,\n    charCode: number\n) {\n    if (charCode === Char.CloseParen /* ')' */) {\n        stateMachine.state = State.PhoneNumberCloseParen;\n    } else {\n        context.removeMachine(stateMachine);\n    }\n}\n\nfunction statePhoneNumberCloseParen(\n    context: ParseMatchesContext,\n    stateMachine: StateMachine,\n    char: string,\n    charCode: number\n) {\n    if (isDigitChar(charCode)) {\n        stateMachine.state = State.PhoneNumberDigit;\n    } else if (isPhoneNumberSeparatorChar(charCode)) {\n        stateMachine.state = State.PhoneNumberSeparator;\n    } else {\n        context.removeMachine(stateMachine);\n    }\n}\n\nfunction statePhoneNumberDigit(\n    context: ParseMatchesContext,\n    stateMachine: StateMachine,\n    char: string,\n    charCode: number\n) {\n    const { charIdx } = context;\n\n    // For now, if we've reached any digits, we'll say that the machine\n    // has reached its accept state. The phone regex will confirm the\n    // match later.\n    // Alternatively, we could count the number of digits to avoid\n    // invoking the phone number regex\n    stateMachine.acceptStateReached = true;\n\n    if (isPhoneNumberControlChar(charCode)) {\n        stateMachine.state = State.PhoneNumberControlChar;\n    } else if (charCode === Char.NumberSign /* '#' */) {\n        stateMachine.state = State.PhoneNumberPoundChar;\n    } else if (isDigitChar(charCode)) {\n        // Stay in the phone number digit state\n    } else if (charCode === Char.OpenParen /* '(' */) {\n        stateMachine.state = State.PhoneNumberOpenParen;\n    } else if (isPhoneNumberSeparatorChar(charCode)) {\n        stateMachine.state = State.PhoneNumberSeparator;\n    } else {\n        captureMatchIfValidAndRemove(context, stateMachine);\n\n        // The transition from a digit character to a letter can be the\n        // start of a new scheme URL match\n        if (isSchemeStartChar(charCode)) {\n            context.addMachine(createSchemeUrlStateMachine(charIdx, State.SchemeChar));\n        }\n    }\n}\n\nfunction statePhoneNumberSeparator(\n    context: ParseMatchesContext,\n    stateMachine: StateMachine,\n    char: string,\n    charCode: number\n) {\n    if (isDigitChar(charCode)) {\n        stateMachine.state = State.PhoneNumberDigit;\n    } else if (charCode === Char.OpenParen /* '(' */) {\n        stateMachine.state = State.PhoneNumberOpenParen;\n    } else {\n        captureMatchIfValidAndRemove(context, stateMachine);\n\n        // This character may start a new match. Add states for it\n        stateNoMatch(context, char, charCode);\n    }\n}\n\n// The \";\" characters is \"wait\" in a phone number\n// The \",\" characters is \"pause\" in a phone number\nfunction statePhoneNumberControlChar(\n    context: ParseMatchesContext,\n    stateMachine: StateMachine,\n    charCode: number\n) {\n    if (isPhoneNumberControlChar(charCode)) {\n        // Stay in the \"control char\" state\n    } else if (charCode === Char.NumberSign /* '#' */) {\n        stateMachine.state = State.PhoneNumberPoundChar;\n    } else if (isDigitChar(charCode)) {\n        stateMachine.state = State.PhoneNumberDigit;\n    } else {\n        captureMatchIfValidAndRemove(context, stateMachine);\n    }\n}\n\n// The \"#\" characters is \"pound\" in a phone number\nfunction statePhoneNumberPoundChar(\n    context: ParseMatchesContext,\n    stateMachine: StateMachine,\n    charCode: number\n) {\n    if (isPhoneNumberControlChar(charCode)) {\n        stateMachine.state = State.PhoneNumberControlChar;\n    } else if (isDigitChar(charCode)) {\n        // According to some of the older tests, if there's a digit\n        // after a '#' sign, the match is invalid. TODO: Revisit if this is true\n        context.removeMachine(stateMachine);\n    } else {\n        captureMatchIfValidAndRemove(context, stateMachine);\n    }\n}\n\n/*\n * Captures a match if it is valid (i.e. has a full domain name for a\n * TLD match). If a match is not valid, it is possible that we want to\n * keep reading characters in order to make a full match.\n */\nfunction captureMatchIfValidAndRemove(context: ParseMatchesContext, stateMachine: StateMachine) {\n    const {\n        matches,\n        text,\n        charIdx,\n        tagBuilder,\n        stripPrefix,\n        stripTrailingSlash,\n        decodePercentEncoding,\n        hashtagServiceName,\n        mentionServiceName,\n    } = context;\n\n    // Remove the state machine first. There are a number of code paths\n    // which return out of this function early, so make sure we have\n    // this done\n    context.removeMachine(stateMachine);\n\n    // Make sure the state machine being checked has actually reached an\n    // \"accept\" state. If it hasn't reach one, it can't be a match\n    if (!stateMachine.acceptStateReached) {\n        return;\n    }\n\n    let startIdx = stateMachine.startIdx;\n    let matchedText = text.slice(stateMachine.startIdx, charIdx);\n\n    // Handle any unbalanced braces (parens, square brackets, or curly\n    // brackets) inside the URL. This handles situations like:\n    //     The link (google.com)\n    // and\n    //     Check out this link here (en.wikipedia.org/wiki/IANA_(disambiguation))\n    //\n    // And also remove any punctuation chars at the end such as:\n    //     '?', ',', ':', '.', etc.\n    matchedText = excludeUnbalancedTrailingBracesAndPunctuation(matchedText);\n\n    switch (stateMachine.type) {\n        case StateMachineType.Url: {\n            // We don't want to accidentally match a URL that is preceded by an\n            // '@' character, which would be an email address\n            const charBeforeUrlMatch = text.charCodeAt(stateMachine.startIdx - 1);\n            if (charBeforeUrlMatch === Char.AtSign /* '@' */) {\n                return;\n            }\n\n            switch (stateMachine.matchType) {\n                case UrlStateMachineMatchType.Scheme: {\n                    // Autolinker accepts many characters in a url's scheme (like `fake://test.com`).\n                    // However, in cases where a URL is missing whitespace before an obvious link,\n                    // (for example: `nowhitespacehttp://www.test.com`), we only want the match to start\n                    // at the http:// part. We will check if the match contains a common scheme and then\n                    // shift the match to start from there.\n                    const httpSchemeMatch = httpSchemeRe.exec(matchedText);\n                    if (httpSchemeMatch) {\n                        // If we found an overmatched URL, we want to find the index\n                        // of where the match should start and shift the match to\n                        // start from the beginning of the common scheme\n                        startIdx = startIdx + httpSchemeMatch.index;\n                        matchedText = matchedText.slice(httpSchemeMatch.index);\n                    }\n\n                    if (!isValidSchemeUrl(matchedText)) {\n                        return; // not a valid match\n                    }\n                    break;\n                }\n\n                case UrlStateMachineMatchType.Tld: {\n                    if (!isValidTldMatch(matchedText)) {\n                        return; // not a valid match\n                    }\n                    break;\n                }\n\n                case UrlStateMachineMatchType.IpV4: {\n                    if (!isValidIpV4Address(matchedText)) {\n                        return; // not a valid match\n                    }\n                    break;\n                }\n\n                /* istanbul ignore next */\n                default:\n                    assertNever(stateMachine);\n            }\n\n            matches.push(\n                new UrlMatch({\n                    tagBuilder: tagBuilder,\n                    matchedText: matchedText,\n                    offset: startIdx,\n                    urlMatchType: toUrlMatchType(stateMachine.matchType),\n                    url: matchedText,\n                    protocolRelativeMatch: matchedText.slice(0, 2) === '//',\n\n                    // TODO: Do these settings need to be passed to the match,\n                    // or should we handle them here in UrlMatcher?\n                    stripPrefix: stripPrefix,\n                    stripTrailingSlash: stripTrailingSlash,\n                    decodePercentEncoding: decodePercentEncoding,\n                })\n            );\n            break;\n        }\n\n        case StateMachineType.Email: {\n            // if the email address has a valid TLD, add it to the list of matches\n            if (isValidEmail(matchedText)) {\n                matches.push(\n                    new EmailMatch({\n                        tagBuilder: tagBuilder,\n                        matchedText: matchedText,\n                        offset: startIdx,\n                        email: matchedText.replace(mailtoSchemePrefixRe, ''),\n                    })\n                );\n            }\n            break;\n        }\n\n        case StateMachineType.Hashtag: {\n            if (isValidHashtag(matchedText)) {\n                matches.push(\n                    new HashtagMatch({\n                        tagBuilder,\n                        matchedText: matchedText,\n                        offset: startIdx,\n                        serviceName: hashtagServiceName,\n                        hashtag: matchedText.slice(1),\n                    })\n                );\n            }\n            break;\n        }\n\n        case StateMachineType.Mention: {\n            if (isValidMention(matchedText, mentionServiceName)) {\n                matches.push(\n                    new MentionMatch({\n                        tagBuilder: tagBuilder,\n                        matchedText: matchedText,\n                        offset: startIdx,\n                        serviceName: mentionServiceName,\n                        mention: matchedText.slice(1), // strip off the '@' character at the beginning\n                    })\n                );\n            }\n            break;\n        }\n\n        case StateMachineType.Phone: {\n            // remove any trailing spaces that were considered as \"separator\"\n            // chars by the state machine\n            matchedText = matchedText.replace(/ +$/g, '');\n\n            if (isValidPhoneNumber(matchedText)) {\n                const cleanNumber = matchedText.replace(/[^0-9,;#]/g, ''); // strip out non-digit characters exclude comma semicolon and #\n\n                matches.push(\n                    new PhoneMatch({\n                        tagBuilder: tagBuilder,\n                        matchedText: matchedText,\n                        offset: startIdx,\n                        number: cleanNumber,\n                        plusSign: matchedText.charAt(0) === '+',\n                    })\n                );\n            }\n            break;\n        }\n\n        /* istanbul ignore next */\n        default:\n            assertNever(stateMachine);\n    }\n}\n\nexport interface ParseMatchesArgs {\n    tagBuilder: AnchorTagBuilder;\n    stripPrefix: Required<StripPrefixConfigObj>;\n    stripTrailingSlash: boolean;\n    decodePercentEncoding: boolean;\n    hashtagServiceName: HashtagService;\n    mentionServiceName: MentionService;\n}\n\n/**\n * Helper function to convert a UrlStateMachineMatchType value to its\n * UrlMatchType equivalent.\n */\nfunction toUrlMatchType(stateMachineMatchType: UrlStateMachineMatchType): UrlMatchType {\n    switch (stateMachineMatchType) {\n        case UrlStateMachineMatchType.Scheme:\n            return 'scheme';\n        case UrlStateMachineMatchType.Tld:\n            return 'tld';\n        case UrlStateMachineMatchType.IpV4:\n            return 'ipV4';\n\n        /* istanbul ignore next */\n        default:\n            assertNever(stateMachineMatchType);\n    }\n}\n\nconst oppositeBrace: { [char: string]: string } = {\n    ')': '(',\n    '}': '{',\n    ']': '[',\n};\n\n/**\n * Determines if a match found has unmatched closing parenthesis,\n * square brackets or curly brackets. If so, these unbalanced symbol(s) will be\n * removed from the URL match itself.\n *\n * A match may have an extra closing parenthesis/square brackets/curly brackets\n * at the end of the match because these are valid URL path characters. For\n * example, \"wikipedia.com/something_(disambiguation)\" should be auto-linked.\n *\n * However, an extra parenthesis *will* be included when the URL itself is\n * wrapped in parenthesis, such as in the case of:\n *\n *     \"(wikipedia.com/something_(disambiguation))\"\n *\n * In this case, the last closing parenthesis should *not* be part of the\n * URL itself, and this method will exclude it from the returned URL.\n *\n * For square brackets in URLs such as in PHP arrays, the same behavior as\n * parenthesis discussed above should happen:\n *\n *     \"[http://www.example.com/foo.php?bar[]=1&bar[]=2&bar[]=3]\"\n *\n * The very last closing square bracket should not be part of the URL itself,\n * and therefore this method will remove it.\n *\n * @param matchedText The full matched URL/email/hashtag/etc. from the state\n *   machine parser.\n * @return The updated matched text with extraneous suffix characters removed.\n */\nexport function excludeUnbalancedTrailingBracesAndPunctuation(matchedText: string): string {\n    const braceCounts: { [char: string]: number } = {\n        '(': 0,\n        '{': 0,\n        '[': 0,\n    };\n\n    for (let i = 0; i < matchedText.length; i++) {\n        const char = matchedText.charAt(i);\n        const charCode = matchedText.charCodeAt(i);\n\n        if (isOpenBraceChar(charCode)) {\n            braceCounts[char]++;\n        } else if (isCloseBraceChar(charCode)) {\n            braceCounts[oppositeBrace[char]]--;\n        }\n    }\n\n    let endIdx = matchedText.length - 1;\n    while (endIdx >= 0) {\n        const char = matchedText.charAt(endIdx);\n        const charCode = matchedText.charCodeAt(endIdx);\n\n        if (isCloseBraceChar(charCode)) {\n            const oppositeBraceChar = oppositeBrace[char];\n\n            if (braceCounts[oppositeBraceChar] < 0) {\n                braceCounts[oppositeBraceChar]++;\n                endIdx--;\n            } else {\n                break;\n            }\n        } else if (isUrlSuffixNotAllowedAsFinalChar(charCode)) {\n            // Walk back a punctuation char like '?', ',', ':', '.', etc.\n            endIdx--;\n        } else {\n            break;\n        }\n    }\n\n    return matchedText.slice(0, endIdx + 1);\n}\n\n// States for the parser\n// For debugging: temporarily remove `const` from `const enum`\nconst enum State {\n    // Scheme states\n    SchemeChar = 0, // First char must be an ASCII letter. Subsequent characters can be: ALPHA / DIGIT / \"+\" / \"-\" / \".\"\n    SchemeHyphen, // Extra state used to figure out when we can start a new match after (such as if we have '-//' which starts a protocol-relative match)\n    SchemeColon, // Once we've reached the colon character after a scheme name\n    SchemeSlash1,\n    SchemeSlash2,\n\n    DomainLabelChar, // Note: Domain labels must begin with a letter or number (no hyphens), and can include unicode letters\n    DomainHyphen,\n    DomainDot,\n    PortColon,\n    PortNumber,\n    Path,\n\n    // Protocol-relative URL states\n    ProtocolRelativeSlash1,\n    ProtocolRelativeSlash2,\n\n    // IPv4 States\n    IpV4Digit,\n    IpV4Dot,\n\n    // Email Address States\n    EmailMailto_M, // if matching a 'mailto:' prefix\n    EmailMailto_A, // if matching a 'mailto:' prefix\n    EmailMailto_I, // if matching a 'mailto:' prefix\n    EmailMailto_L, // if matching a 'mailto:' prefix\n    EmailMailto_T, // if matching a 'mailto:' prefix\n    EmailMailto_O, // if matching a 'mailto:' prefix\n    EmailMailto_Colon,\n    EmailLocalPart,\n    EmailLocalPartDot,\n    EmailAtSign,\n    EmailDomainChar,\n    EmailDomainHyphen,\n    EmailDomainDot,\n\n    // Hashtag States\n    HashtagHashChar, // When we've encountered the '#' char\n    HashtagTextChar, // Inside a hashtag char\n\n    // Mention State\n    MentionAtChar,\n    MentionTextChar,\n\n    // Phone Number States\n    PhoneNumberOpenParen,\n    PhoneNumberAreaCodeDigit1, // a digit inside area code parens, such as the '1' in '(123)456-7890'\n    PhoneNumberAreaCodeDigit2, // a digit inside area code parens, such as the '2' in '(123)456-7890'\n    PhoneNumberAreaCodeDigit3, // a digit inside area code parens, such as the '3' in '(123)456-7890'\n    PhoneNumberCloseParen,\n    PhoneNumberPlus,\n    PhoneNumberDigit, // a digit outside of area code parens\n    PhoneNumberSeparator, // '-', '.' or ' '\n    PhoneNumberControlChar, // ',' for 1 second pause, ';' for \"wait\" for user to take action\n    PhoneNumberPoundChar, // '#' for pound character\n}\n\n// The type of state machine\n// For debugging: temporarily remove `const` from `const enum`\nconst enum StateMachineType {\n    Url = 0,\n    Email,\n    Hashtag,\n    Mention,\n    Phone,\n}\n\ntype StateMachine =\n    | UrlStateMachine\n    | EmailStateMachine\n    | MentionStateMachine\n    | HashtagStateMachine\n    | PhoneNumberStateMachine;\n\ninterface AbstractStateMachine {\n    startIdx: number; // the index of the first character in the match\n    state: State;\n    acceptStateReached: boolean;\n}\n\n// The type of URL state machine\n// For debugging: temporarily remove `const` from `const enum`\nconst enum UrlStateMachineMatchType {\n    Scheme = 0, // http://, https://, file://, etc. match\n    Tld, // Top-level Domain (TLD)\n    IpV4, // 192.168.0.1\n}\n\ninterface AbstractUrlStateMachine extends AbstractStateMachine {\n    readonly type: StateMachineType.Url;\n}\n\ntype UrlStateMachine = SchemeUrlStateMachine | TldUrlStateMachine | IpV4UrlStateMachine;\n\n/**\n * State machine with metadata for capturing TLD (top-level domain) URLs.\n */\ninterface SchemeUrlStateMachine extends AbstractUrlStateMachine {\n    readonly matchType: UrlStateMachineMatchType.Scheme;\n}\n\n/**\n * State machine with metadata for capturing TLD (top-level domain) URLs.\n */\ninterface TldUrlStateMachine extends AbstractUrlStateMachine {\n    readonly matchType: UrlStateMachineMatchType.Tld;\n}\n\n/**\n * State machine for capturing IPv4 addresses that are not prefixed with a\n * scheme (such as 'http://').\n */\ninterface IpV4UrlStateMachine extends AbstractUrlStateMachine {\n    readonly matchType: UrlStateMachineMatchType.IpV4;\n    octetsEncountered: number; // if we encounter a number of octets other than 4, it's not an IPv4 address\n}\n\n/**\n * State machine for capturing email addresses.\n */\ninterface EmailStateMachine extends AbstractStateMachine {\n    readonly type: StateMachineType.Email;\n}\n\n/**\n * State machine for capturing hashtags.\n */\ninterface HashtagStateMachine extends AbstractStateMachine {\n    readonly type: StateMachineType.Hashtag;\n}\n\n/**\n * State machine for capturing hashtags.\n */\ninterface MentionStateMachine extends AbstractStateMachine {\n    readonly type: StateMachineType.Mention;\n}\n\n/**\n * State machine for capturing phone numbers.\n *\n * Note: this doesn't actually capture phone numbers at the moment, but is used\n * to exclude phone number matches from URLs where the URL matcher would\n * otherwise potentially think a phone number is part of a domain label.\n */\ninterface PhoneNumberStateMachine extends AbstractStateMachine {\n    readonly type: StateMachineType.Phone;\n}\n\nfunction createSchemeUrlStateMachine(startIdx: number, state: State): SchemeUrlStateMachine {\n    return {\n        type: StateMachineType.Url,\n        startIdx,\n        state,\n        acceptStateReached: false,\n        matchType: UrlStateMachineMatchType.Scheme,\n    };\n}\n\nfunction createTldUrlStateMachine(startIdx: number, state: State): TldUrlStateMachine {\n    return {\n        type: StateMachineType.Url,\n        startIdx,\n        state,\n        acceptStateReached: false,\n        matchType: UrlStateMachineMatchType.Tld,\n    };\n}\n\nfunction createIpV4UrlStateMachine(startIdx: number, state: State): IpV4UrlStateMachine {\n    return {\n        type: StateMachineType.Url,\n        startIdx,\n        state,\n        acceptStateReached: false,\n        matchType: UrlStateMachineMatchType.IpV4,\n        octetsEncountered: 1, // starts at 1 because we create this machine when encountering the first octet\n    };\n}\n\nfunction createEmailStateMachine(startIdx: number, state: State): EmailStateMachine {\n    return {\n        type: StateMachineType.Email,\n        startIdx,\n        state,\n        acceptStateReached: false,\n    };\n}\n\nfunction createHashtagStateMachine(startIdx: number, state: State): HashtagStateMachine {\n    return {\n        type: StateMachineType.Hashtag,\n        startIdx,\n        state,\n        acceptStateReached: false,\n    };\n}\n\nfunction createMentionStateMachine(startIdx: number, state: State): MentionStateMachine {\n    return {\n        type: StateMachineType.Mention,\n        startIdx,\n        state,\n        acceptStateReached: false,\n    };\n}\n\nfunction createPhoneNumberStateMachine(startIdx: number, state: State): PhoneNumberStateMachine {\n    return {\n        type: StateMachineType.Phone,\n        startIdx,\n        state,\n        acceptStateReached: false,\n    };\n}\n\nfunction isSchemeUrlStateMachine(machine: StateMachine): machine is SchemeUrlStateMachine {\n    return (\n        machine.type === StateMachineType.Url &&\n        machine.matchType === UrlStateMachineMatchType.Scheme\n    );\n}\n","import {\n    isDigitChar,\n    isAsciiLetterChar,\n    isQuoteChar,\n    isWhitespaceChar,\n    isControlChar,\n} from '../char-utils';\nimport { assertNever } from '../utils';\n\n// For debugging: search for other \"For debugging\" lines\n// import CliTable from 'cli-table';\n\nclass CurrentTag {\n    readonly idx: number; // the index of the '<' in the html string\n    readonly type: 'tag' | 'comment' | 'doctype';\n    readonly name: string;\n    readonly isOpening: boolean; // true if it's an opening tag, OR a self-closing open tag\n    readonly isClosing: boolean; // true if it's a closing tag, OR a self-closing open tag\n\n    constructor(cfg: Partial<CurrentTag> = {}) {\n        this.idx = cfg.idx !== undefined ? cfg.idx : -1;\n        this.type = cfg.type || 'tag';\n        this.name = cfg.name || '';\n        this.isOpening = !!cfg.isOpening;\n        this.isClosing = !!cfg.isClosing;\n    }\n}\n\nconst noCurrentTag = new CurrentTag(); // shared reference for when there is no current tag currently being read\n\n/**\n * Context object containing all the state needed by the HTML parsing state\n * machine function.\n *\n * ## Historical note\n *\n * In v4.1.5, we used nested functions to handle the context via closures, but\n * this necessitated re-creating the functions for each call to `parseHtml()`,\n * which made them difficult for v8 to JIT optimize. In v4.1.6, we lifted all of\n * the functions to the top-level scope and passed the context object between\n * them, which allows the functions to be JIT compiled once and reused.\n */\nclass ParseHtmlContext {\n    public charIdx = 0; // Current character index being processed\n    public readonly html: string; // The input html being parsed\n    public readonly callbacks: ParseHtmlCallbacks;\n    public state: State = State.Data; // begin in the Data state\n    public currentDataIdx = 0; // where the current data start index is\n    public currentTag: CurrentTag = noCurrentTag; // describes the current tag that is being read\n\n    constructor(html: string, callbacks: ParseHtmlCallbacks) {\n        this.html = html;\n        this.callbacks = callbacks;\n    }\n}\n\n/**\n * The callback functions that can be provided to {@link #parseHtml}.\n */\nexport interface ParseHtmlCallbacks {\n    onOpenTag: (tagName: string, offset: number) => void;\n    onCloseTag: (tagName: string, offset: number) => void;\n    onText: (text: string, offset: number) => void;\n    onComment: (offset: number) => void;\n    onDoctype: (offset: number) => void;\n}\n\n/**\n * Parses an HTML string, calling the callbacks to notify of tags and text.\n *\n * ## History\n *\n * This file previously used a regular expression to find html tags in the input\n * text. Unfortunately, we ran into a bunch of catastrophic backtracking issues\n * with certain input text, causing Autolinker to either hang or just take a\n * really long time to parse the string.\n *\n * The current code is intended to be a O(n) algorithm that walks through\n * the string in one pass, and tries to be as cheap as possible. We don't need\n * to implement the full HTML spec, but rather simply determine where the string\n * looks like an HTML tag, and where it looks like text (so that we can autolink\n * that).\n *\n * This state machine parser is intended just to be a simple but performant\n * parser of HTML for the subset of requirements we have. We simply need to:\n *\n * 1. Determine where HTML tags are\n * 2. Determine the tag name (Autolinker specifically only cares about <a>,\n *    <script>, and <style> tags, so as not to link any text within them)\n *\n * We don't need to:\n *\n * 1. Create a parse tree\n * 2. Auto-close tags with invalid markup\n * 3. etc.\n *\n * The other intention behind this is that we didn't want to add external\n * dependencies on the Autolinker utility which would increase its size. For\n * instance, adding htmlparser2 adds 125kb to the minified output file,\n * increasing its final size from 47kb to 172kb (at the time of writing). It\n * also doesn't work exactly correctly, treating the string \"<3 blah blah blah\"\n * as an HTML tag.\n *\n * Reference for HTML spec:\n *\n *     https://www.w3.org/TR/html51/syntax.html#sec-tokenization\n *\n * @param {String} html The HTML to parse\n * @param {Object} callbacks\n * @param {Function} callbacks.onOpenTag Callback function to call when an open\n *   tag is parsed. Called with the tagName as its argument.\n * @param {Function} callbacks.onCloseTag Callback function to call when a close\n *   tag is parsed. Called with the tagName as its argument. If a self-closing\n *   tag is found, `onCloseTag` is called immediately after `onOpenTag`.\n * @param {Function} callbacks.onText Callback function to call when text (i.e\n *   not an HTML tag) is parsed. Called with the text (string) as its first\n *   argument, and offset (number) into the string as its second.\n */\nexport function parseHtml(html: string, callbacks: ParseHtmlCallbacks) {\n    const context = new ParseHtmlContext(html, callbacks);\n\n    // For debugging: search for other \"For debugging\" lines\n    // const table = new CliTable( {\n    // \thead: [ 'charIdx', 'char', 'state', 'currentDataIdx', 'currentOpenTagIdx', 'tag.type' ]\n    // } );\n\n    const len = html.length;\n    while (context.charIdx < len) {\n        const char = html.charAt(context.charIdx);\n        const charCode = html.charCodeAt(context.charIdx);\n\n        // For debugging: search for other \"For debugging\" lines\n        // ALSO: Temporarily remove the 'const' keyword on the State enum\n        // table.push([\n        //     String(charIdx),\n        //     char,\n        //     State[state],\n        //     String(currentDataIdx),\n        //     String(currentTag.idx),\n        //     currentTag.idx === -1 ? '' : currentTag.type\n        // ]);\n\n        switch (context.state) {\n            case State.Data:\n                stateData(context, char);\n                break;\n            case State.TagOpen:\n                stateTagOpen(context, char, charCode);\n                break;\n            case State.EndTagOpen:\n                stateEndTagOpen(context, char, charCode);\n                break;\n            case State.TagName:\n                stateTagName(context, char, charCode);\n                break;\n            case State.BeforeAttributeName:\n                stateBeforeAttributeName(context, char, charCode);\n                break;\n            case State.AttributeName:\n                stateAttributeName(context, char, charCode);\n                break;\n            case State.AfterAttributeName:\n                stateAfterAttributeName(context, char, charCode);\n                break;\n            case State.BeforeAttributeValue:\n                stateBeforeAttributeValue(context, char, charCode);\n                break;\n            case State.AttributeValueDoubleQuoted:\n                stateAttributeValueDoubleQuoted(context, char);\n                break;\n            case State.AttributeValueSingleQuoted:\n                stateAttributeValueSingleQuoted(context, char);\n                break;\n            case State.AttributeValueUnquoted:\n                stateAttributeValueUnquoted(context, char, charCode);\n                break;\n            case State.AfterAttributeValueQuoted:\n                stateAfterAttributeValueQuoted(context, char, charCode);\n                break;\n            case State.SelfClosingStartTag:\n                stateSelfClosingStartTag(context, char);\n                break;\n            case State.MarkupDeclarationOpenState:\n                stateMarkupDeclarationOpen(context);\n                break;\n            case State.CommentStart:\n                stateCommentStart(context, char);\n                break;\n            case State.CommentStartDash:\n                stateCommentStartDash(context, char);\n                break;\n            case State.Comment:\n                stateComment(context, char);\n                break;\n            case State.CommentEndDash:\n                stateCommentEndDash(context, char);\n                break;\n            case State.CommentEnd:\n                stateCommentEnd(context, char);\n                break;\n            case State.CommentEndBang:\n                stateCommentEndBang(context, char);\n                break;\n            case State.Doctype:\n                stateDoctype(context, char);\n                break;\n\n            /* istanbul ignore next */\n            default:\n                assertNever(context.state);\n        }\n\n        // For debugging: search for other \"For debugging\" lines\n        // ALSO: Temporarily remove the 'const' keyword on the State enum\n        // table.push([\n        //     String(context.charIdx),\n        //     char,\n        //     State[context.state],\n        //     String(context.currentDataIdx),\n        //     String(context.currentTag.idx),\n        //     context.currentTag.idx === -1 ? '' : context.currentTag.type\n        // ]);\n\n        context.charIdx++;\n    }\n\n    if (context.currentDataIdx < context.charIdx) {\n        emitText(context);\n    }\n\n    // For debugging: search for other \"For debugging\" lines\n    // console.log( '\\n' + table.toString() );\n}\n\n// Called when non-tags are being read (i.e. the text around HTML †ags)\n// https://www.w3.org/TR/html51/syntax.html#data-state\nfunction stateData(context: ParseHtmlContext, char: string) {\n    if (char === '<') {\n        startNewTag(context);\n    }\n}\n\n// Called after a '<' is read from the Data state\n// https://www.w3.org/TR/html51/syntax.html#tag-open-state\nfunction stateTagOpen(context: ParseHtmlContext, char: string, charCode: number) {\n    if (char === '!') {\n        context.state = State.MarkupDeclarationOpenState;\n    } else if (char === '/') {\n        context.state = State.EndTagOpen;\n        context.currentTag = new CurrentTag({ ...context.currentTag, isClosing: true });\n    } else if (char === '<') {\n        // start of another tag (ignore the previous, incomplete one)\n        startNewTag(context);\n    } else if (isAsciiLetterChar(charCode)) {\n        // tag name start (and no '/' read)\n        context.state = State.TagName;\n        context.currentTag = new CurrentTag({ ...context.currentTag, isOpening: true });\n    } else {\n        // Any other\n        context.state = State.Data;\n        context.currentTag = noCurrentTag;\n    }\n}\n\n// After a '<x', '</x' sequence is read (where 'x' is a letter character),\n// this is to continue reading the tag name\n// https://www.w3.org/TR/html51/syntax.html#tag-name-state\nfunction stateTagName(context: ParseHtmlContext, char: string, charCode: number) {\n    if (isWhitespaceChar(charCode)) {\n        context.currentTag = new CurrentTag({\n            ...context.currentTag,\n            name: captureTagName(context),\n        });\n        context.state = State.BeforeAttributeName;\n    } else if (char === '<') {\n        // start of another tag (ignore the previous, incomplete one)\n        startNewTag(context);\n    } else if (char === '/') {\n        context.currentTag = new CurrentTag({\n            ...context.currentTag,\n            name: captureTagName(context),\n        });\n        context.state = State.SelfClosingStartTag;\n    } else if (char === '>') {\n        context.currentTag = new CurrentTag({\n            ...context.currentTag,\n            name: captureTagName(context),\n        });\n        emitTagAndPreviousTextNode(context); // resets to Data state as well\n    } else if (!isAsciiLetterChar(charCode) && !isDigitChar(charCode) && char !== ':') {\n        // Anything else that does not form an html tag. Note: the colon\n        // character is accepted for XML namespaced tags\n        resetToDataState(context);\n    } else {\n        // continue reading tag name\n    }\n}\n\n// Called after the '/' is read from a '</' sequence\n// https://www.w3.org/TR/html51/syntax.html#end-tag-open-state\nfunction stateEndTagOpen(context: ParseHtmlContext, char: string, charCode: number) {\n    if (char === '>') {\n        // parse error. Encountered \"</>\". Skip it without treating as a tag\n        resetToDataState(context);\n    } else if (isAsciiLetterChar(charCode)) {\n        context.state = State.TagName;\n    } else {\n        // some other non-tag-like character, don't treat this as a tag\n        resetToDataState(context);\n    }\n}\n\n// https://www.w3.org/TR/html51/syntax.html#before-attribute-name-state\nfunction stateBeforeAttributeName(context: ParseHtmlContext, char: string, charCode: number) {\n    if (isWhitespaceChar(charCode)) {\n        // stay in BeforeAttributeName state - continue reading chars\n    } else if (char === '/') {\n        context.state = State.SelfClosingStartTag;\n    } else if (char === '>') {\n        emitTagAndPreviousTextNode(context); // resets to Data state as well\n    } else if (char === '<') {\n        // start of another tag (ignore the previous, incomplete one)\n        startNewTag(context);\n    } else if (char === `=` || isQuoteChar(charCode) || isControlChar(charCode)) {\n        // \"Parse error\" characters that, according to the spec, should be\n        // appended to the attribute name, but we'll treat these characters\n        // as not forming a real HTML tag\n        resetToDataState(context);\n    } else {\n        // Any other char, start of a new attribute name\n        context.state = State.AttributeName;\n    }\n}\n\n// https://www.w3.org/TR/html51/syntax.html#attribute-name-state\nfunction stateAttributeName(context: ParseHtmlContext, char: string, charCode: number) {\n    if (isWhitespaceChar(charCode)) {\n        context.state = State.AfterAttributeName;\n    } else if (char === '/') {\n        context.state = State.SelfClosingStartTag;\n    } else if (char === '=') {\n        context.state = State.BeforeAttributeValue;\n    } else if (char === '>') {\n        emitTagAndPreviousTextNode(context); // resets to Data state as well\n    } else if (char === '<') {\n        // start of another tag (ignore the previous, incomplete one)\n        startNewTag(context);\n    } else if (isQuoteChar(charCode)) {\n        // \"Parse error\" characters that, according to the spec, should be\n        // appended to the attribute name, but we'll treat these characters\n        // as not forming a real HTML tag\n        resetToDataState(context);\n    } else {\n        // anything else: continue reading attribute name\n    }\n}\n\n// https://www.w3.org/TR/html51/syntax.html#after-attribute-name-state\nfunction stateAfterAttributeName(context: ParseHtmlContext, char: string, charCode: number) {\n    if (isWhitespaceChar(charCode)) {\n        // ignore the character - continue reading\n    } else if (char === '/') {\n        context.state = State.SelfClosingStartTag;\n    } else if (char === '=') {\n        context.state = State.BeforeAttributeValue;\n    } else if (char === '>') {\n        emitTagAndPreviousTextNode(context);\n    } else if (char === '<') {\n        // start of another tag (ignore the previous, incomplete one)\n        startNewTag(context);\n    } else if (isQuoteChar(charCode)) {\n        // \"Parse error\" characters that, according to the spec, should be\n        // appended to the attribute name, but we'll treat these characters\n        // as not forming a real HTML tag\n        resetToDataState(context);\n    } else {\n        // Any other character, start a new attribute in the current tag\n        context.state = State.AttributeName;\n    }\n}\n\n// https://www.w3.org/TR/html51/syntax.html#before-attribute-value-state\nfunction stateBeforeAttributeValue(context: ParseHtmlContext, char: string, charCode: number) {\n    if (isWhitespaceChar(charCode)) {\n        // ignore the character - continue reading\n    } else if (char === `\"`) {\n        context.state = State.AttributeValueDoubleQuoted;\n    } else if (char === `'`) {\n        context.state = State.AttributeValueSingleQuoted;\n    } else if (/[>=`]/.test(char)) {\n        // Invalid chars after an '=' for an attribute value, don't count\n        // the current tag as an HTML tag\n        resetToDataState(context);\n    } else if (char === '<') {\n        // start of another tag (ignore the previous, incomplete one)\n        startNewTag(context);\n    } else {\n        // Any other character, consider it an unquoted attribute value\n        context.state = State.AttributeValueUnquoted;\n    }\n}\n\n// https://www.w3.org/TR/html51/syntax.html#attribute-value-double-quoted-state\nfunction stateAttributeValueDoubleQuoted(context: ParseHtmlContext, char: string) {\n    if (char === `\"`) {\n        // end the current double-quoted attribute\n        context.state = State.AfterAttributeValueQuoted;\n    } else {\n        // consume the character as part of the double-quoted attribute value\n    }\n}\n\n// https://www.w3.org/TR/html51/syntax.html#attribute-value-single-quoted-state\nfunction stateAttributeValueSingleQuoted(context: ParseHtmlContext, char: string) {\n    if (char === `'`) {\n        // end the current single-quoted attribute\n        context.state = State.AfterAttributeValueQuoted;\n    } else {\n        // consume the character as part of the double-quoted attribute value\n    }\n}\n\n// https://www.w3.org/TR/html51/syntax.html#attribute-value-unquoted-state\nfunction stateAttributeValueUnquoted(context: ParseHtmlContext, char: string, charCode: number) {\n    if (isWhitespaceChar(charCode)) {\n        context.state = State.BeforeAttributeName;\n    } else if (char === '>') {\n        emitTagAndPreviousTextNode(context);\n    } else if (char === '<') {\n        // start of another tag (ignore the previous, incomplete one)\n        startNewTag(context);\n    } else {\n        // Any other character, treat it as part of the attribute value\n    }\n}\n\n// Called after a double-quoted or single-quoted attribute value is read\n// (i.e. after the closing quote character)\n// https://www.w3.org/TR/html51/syntax.html#after-attribute-value-quoted-state\nfunction stateAfterAttributeValueQuoted(context: ParseHtmlContext, char: string, charCode: number) {\n    if (isWhitespaceChar(charCode)) {\n        context.state = State.BeforeAttributeName;\n    } else if (char === '/') {\n        context.state = State.SelfClosingStartTag;\n    } else if (char === '>') {\n        emitTagAndPreviousTextNode(context);\n    } else if (char === '<') {\n        // start of another tag (ignore the previous, incomplete one)\n        startNewTag(context);\n    } else {\n        // Any other character, \"parse error\". Spec says to switch to the\n        // BeforeAttributeState and re-consume the character, as it may be\n        // the start of a new attribute name\n        context.state = State.BeforeAttributeName;\n        reconsumeCurrentChar(context);\n    }\n}\n\n// A '/' has just been read in the current tag (presumably for '/>'), and\n// this handles the next character\n// https://www.w3.org/TR/html51/syntax.html#self-closing-start-tag-state\nfunction stateSelfClosingStartTag(context: ParseHtmlContext, char: string) {\n    if (char === '>') {\n        context.currentTag = new CurrentTag({ ...context.currentTag, isClosing: true });\n        emitTagAndPreviousTextNode(context); // resets to Data state as well\n    } else {\n        // Note: the spec calls for a character after a '/' within a start\n        // tag to go back into the BeforeAttributeName state (in order to\n        // read more attributes, but for the purposes of Autolinker, this is\n        // most likely not a valid HTML tag. For example: \"<something / other>\"\n        // state = State.BeforeAttributeName;\n\n        // Instead, just treat as regular text\n        resetToDataState(context);\n    }\n}\n\n// https://www.w3.org/TR/html51/syntax.html#markup-declaration-open-state\n// (HTML Comments or !DOCTYPE)\nfunction stateMarkupDeclarationOpen(context: ParseHtmlContext) {\n    const { html, charIdx } = context;\n\n    if (html.slice(charIdx, charIdx + 2) === '--') {\n        // html comment\n        context.charIdx++; // \"consume\" the second '-' character. Next loop iteration will consume the character after the '<!--' sequence\n        context.currentTag = new CurrentTag({ ...context.currentTag, type: 'comment' });\n        context.state = State.CommentStart;\n    } else if (html.slice(charIdx, charIdx + 7).toUpperCase() === 'DOCTYPE') {\n        context.charIdx += 6; // \"consume\" the characters \"OCTYPE\" (the current loop iteraction consumed the 'D'). Next loop iteration will consume the character after the '<!DOCTYPE' sequence\n        context.currentTag = new CurrentTag({ ...context.currentTag, type: 'doctype' });\n        context.state = State.Doctype;\n    } else {\n        // At this point, the spec specifies that the state machine should\n        // enter the \"bogus comment\" state, in which case any character(s)\n        // after the '<!' that were read should become an HTML comment up\n        // until the first '>' that is read (or EOF). Instead, we'll assume\n        // that a user just typed '<!' as part of some piece of non-html\n        // text\n        resetToDataState(context);\n    }\n}\n\n// Handles after the sequence '<!--' has been read\n// https://www.w3.org/TR/html51/syntax.html#comment-start-state\nfunction stateCommentStart(context: ParseHtmlContext, char: string) {\n    if (char === '-') {\n        // We've read the sequence '<!---' at this point (3 dashes)\n        context.state = State.CommentStartDash;\n    } else if (char === '>') {\n        // At this point, we'll assume the comment wasn't a real comment\n        // so we'll just emit it as data. We basically read the sequence\n        // '<!-->'\n        resetToDataState(context);\n    } else {\n        // Any other char, take it as part of the comment\n        context.state = State.Comment;\n    }\n}\n\n// We've read the sequence '<!---' at this point (3 dashes)\n// https://www.w3.org/TR/html51/syntax.html#comment-start-dash-state\nfunction stateCommentStartDash(context: ParseHtmlContext, char: string) {\n    if (char === '-') {\n        // We've read '<!----' (4 dashes) at this point\n        context.state = State.CommentEnd;\n    } else if (char === '>') {\n        // At this point, we'll assume the comment wasn't a real comment\n        // so we'll just emit it as data. We basically read the sequence\n        // '<!--->'\n        resetToDataState(context);\n    } else {\n        // Anything else, take it as a valid comment\n        context.state = State.Comment;\n    }\n}\n\n// Currently reading the comment's text (data)\n// https://www.w3.org/TR/html51/syntax.html#comment-state\nfunction stateComment(context: ParseHtmlContext, char: string) {\n    if (char === '-') {\n        context.state = State.CommentEndDash;\n    } else {\n        // Any other character, stay in the Comment state\n    }\n}\n\n// When we we've read the first dash inside a comment, it may signal the\n// end of the comment if we read another dash\n// https://www.w3.org/TR/html51/syntax.html#comment-end-dash-state\nfunction stateCommentEndDash(context: ParseHtmlContext, char: string) {\n    if (char === '-') {\n        context.state = State.CommentEnd;\n    } else {\n        // Wasn't a dash, must still be part of the comment\n        context.state = State.Comment;\n    }\n}\n\n// After we've read two dashes inside a comment, it may signal the end of\n// the comment if we then read a '>' char\n// https://www.w3.org/TR/html51/syntax.html#comment-end-state\nfunction stateCommentEnd(context: ParseHtmlContext, char: string) {\n    if (char === '>') {\n        emitTagAndPreviousTextNode(context);\n    } else if (char === '!') {\n        context.state = State.CommentEndBang;\n    } else if (char === '-') {\n        // A 3rd '-' has been read: stay in the CommentEnd state\n    } else {\n        // Anything else, switch back to the comment state since we didn't\n        // read the full \"end comment\" sequence (i.e. '-->')\n        context.state = State.Comment;\n    }\n}\n\n// We've read the sequence '--!' inside of a comment\n// https://www.w3.org/TR/html51/syntax.html#comment-end-bang-state\nfunction stateCommentEndBang(context: ParseHtmlContext, char: string) {\n    if (char === '-') {\n        // We read the sequence '--!-' inside of a comment. The last dash\n        // could signify that the comment is going to close\n        context.state = State.CommentEndDash;\n    } else if (char === '>') {\n        // End of comment with the sequence '--!>'\n        emitTagAndPreviousTextNode(context);\n    } else {\n        // The '--!' was not followed by a '>', continue reading the\n        // comment's text\n        context.state = State.Comment;\n    }\n}\n\n/**\n * For DOCTYPES in particular, we don't care about the attributes. Just\n * advance to the '>' character and emit the tag, unless we find a '<'\n * character in which case we'll start a new tag.\n *\n * Example doctype tag:\n *    <!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01//EN\" \"http://www.w3.org/TR/html4/strict.dtd\">\n *\n * Actual spec: https://www.w3.org/TR/html51/syntax.html#doctype-state\n */\nfunction stateDoctype(context: ParseHtmlContext, char: string) {\n    if (char === '>') {\n        emitTagAndPreviousTextNode(context);\n    } else if (char === '<') {\n        startNewTag(context);\n    } else {\n        // stay in the Doctype state\n    }\n}\n\n/**\n * Resets the state back to the Data state, and removes the current tag.\n *\n * We'll generally run this function whenever a \"parse error\" is\n * encountered, where the current tag that is being read no longer looks\n * like a real HTML tag.\n */\nfunction resetToDataState(context: ParseHtmlContext) {\n    context.state = State.Data;\n    context.currentTag = noCurrentTag;\n}\n\n/**\n * Starts a new HTML tag at the current index, ignoring any previous HTML\n * tag that was being read.\n *\n * We'll generally run this function whenever we read a new '<' character,\n * including when we read a '<' character inside of an HTML tag that we were\n * previously reading.\n */\nfunction startNewTag(context: ParseHtmlContext) {\n    context.state = State.TagOpen;\n    context.currentTag = new CurrentTag({ idx: context.charIdx });\n}\n\n/**\n * Once we've decided to emit an open tag, that means we can also emit the\n * text node before it.\n */\nfunction emitTagAndPreviousTextNode(context: ParseHtmlContext) {\n    const textBeforeTag = context.html.slice(context.currentDataIdx, context.currentTag.idx);\n    if (textBeforeTag) {\n        // the html tag was the first element in the html string, or two\n        // tags next to each other, in which case we should not emit a text\n        // node\n        context.callbacks.onText(textBeforeTag, context.currentDataIdx);\n    }\n\n    const currentTag = context.currentTag;\n    if (currentTag.type === 'comment') {\n        context.callbacks.onComment(currentTag.idx);\n    } else if (currentTag.type === 'doctype') {\n        context.callbacks.onDoctype(currentTag.idx);\n    } else {\n        if (currentTag.isOpening) {\n            context.callbacks.onOpenTag(currentTag.name, currentTag.idx);\n        }\n        if (currentTag.isClosing) {\n            // note: self-closing tags will emit both opening and closing\n            context.callbacks.onCloseTag(currentTag.name, currentTag.idx);\n        }\n    }\n\n    // Since we just emitted a tag, reset to the data state for the next char\n    resetToDataState(context);\n    context.currentDataIdx = context.charIdx + 1;\n}\n\nfunction emitText(context: ParseHtmlContext) {\n    const text = context.html.slice(context.currentDataIdx, context.charIdx);\n    context.callbacks.onText(text, context.currentDataIdx);\n\n    context.currentDataIdx = context.charIdx + 1;\n}\n\n/**\n * Captures the tag name from the start of the tag to the current character\n * index, and converts it to lower case\n */\nfunction captureTagName(context: ParseHtmlContext) {\n    const startIdx = context.currentTag.idx + (context.currentTag.isClosing ? 2 : 1);\n    return context.html.slice(startIdx, context.charIdx).toLowerCase();\n}\n\n/**\n * Causes the main loop to re-consume the current character, such as after\n * encountering a \"parse error\" that changed state and needs to reconsume\n * the same character in that new state.\n */\nfunction reconsumeCurrentChar(context: ParseHtmlContext) {\n    context.charIdx--;\n}\n\n/**\n * The subset of the parser states defined in https://www.w3.org/TR/html51/syntax.html\n * which are useful for Autolinker.\n */\n// For debugging: temporarily remove 'const' keyword on the State enum\nexport const enum State {\n    Data = 0,\n    TagOpen,\n    EndTagOpen,\n    TagName,\n    BeforeAttributeName,\n    AttributeName,\n    AfterAttributeName,\n    BeforeAttributeValue,\n    AttributeValueDoubleQuoted,\n    AttributeValueSingleQuoted,\n    AttributeValueUnquoted,\n    AfterAttributeValueQuoted,\n    SelfClosingStartTag,\n    MarkupDeclarationOpenState, // When the sequence '<!' is read for an HTML comment or doctype\n    CommentStart,\n    CommentStartDash,\n    Comment,\n    CommentEndDash,\n    CommentEnd,\n    CommentEndBang,\n    Doctype,\n}\n","import { version } from './version';\nimport { isBoolean, removeWithPredicate } from './utils';\nimport { AnchorTagBuilder } from './anchor-tag-builder';\nimport { Match } from './match/match';\nimport { UrlMatch } from './match/url-match';\nimport { HtmlTag } from './html-tag';\nimport { parseMatches } from './parser/parse-matches';\nimport { parseHtml } from './htmlParser/parse-html';\nimport { MentionService, mentionServices } from './parser/mention-utils';\nimport { HashtagService, hashtagServices } from './parser/hashtag-utils';\n\n/**\n * @class Autolinker\n * @extends Object\n *\n * Utility class used to process a given string of text, and wrap the matches in\n * the appropriate anchor (&lt;a&gt;) tags to turn them into links.\n *\n * Any of the configuration options may be provided in an Object provided\n * to the Autolinker constructor, which will configure how the {@link #link link()}\n * method will process the links.\n *\n * For example:\n *\n *     var autolinker = new Autolinker( {\n *         newWindow : false,\n *         truncate  : 30\n *     } );\n *\n *     var html = autolinker.link( \"Joe went to www.yahoo.com\" );\n *     // produces: 'Joe went to <a href=\"http://www.yahoo.com\">yahoo.com</a>'\n *\n *\n * The {@link #static-link static link()} method may also be used to inline\n * options into a single call, which may be more convenient for one-off uses.\n * For example:\n *\n *     var html = Autolinker.link( \"Joe went to www.yahoo.com\", {\n *         newWindow : false,\n *         truncate  : 30\n *     } );\n *     // produces: 'Joe went to <a href=\"http://www.yahoo.com\">yahoo.com</a>'\n *\n *\n * ## Custom Replacements of Links\n *\n * If the configuration options do not provide enough flexibility, a {@link #replaceFn}\n * may be provided to fully customize the output of Autolinker. This function is\n * called once for each URL/Email/Phone#/Hashtag/Mention (Twitter, Instagram, Soundcloud)\n * match that is encountered.\n *\n * For example:\n *\n *     var input = \"...\";  // string with URLs, Email Addresses, Phone #s, Hashtags, and Mentions (Twitter, Instagram, Soundcloud)\n *\n *     var linkedText = Autolinker.link( input, {\n *         replaceFn : function( match ) {\n *             console.log( \"href = \", match.getAnchorHref() );\n *             console.log( \"text = \", match.getAnchorText() );\n *\n *             switch( match.getType() ) {\n *                 case 'url' :\n *                     console.log( \"url: \", match.getUrl() );\n *\n *                     if( match.getUrl().indexOf( 'mysite.com' ) === -1 ) {\n *                         var tag = match.buildTag();  // returns an `Autolinker.HtmlTag` instance, which provides mutator methods for easy changes\n *                         tag.setAttr( 'rel', 'nofollow' );\n *                         tag.addClass( 'external-link' );\n *\n *                         return tag;\n *\n *                     } else {\n *                         return true;  // let Autolinker perform its normal anchor tag replacement\n *                     }\n *\n *                 case 'email' :\n *                     var email = match.getEmail();\n *                     console.log( \"email: \", email );\n *\n *                     if( email === \"my@own.address\" ) {\n *                         return false;  // don't auto-link this particular email address; leave as-is\n *                     } else {\n *                         return;  // no return value will have Autolinker perform its normal anchor tag replacement (same as returning `true`)\n *                     }\n *\n *                 case 'phone' :\n *                     var phoneNumber = match.getPhoneNumber();\n *                     console.log( phoneNumber );\n *\n *                     return '<a href=\"http://newplace.to.link.phone.numbers.to/\">' + phoneNumber + '</a>';\n *\n *                 case 'hashtag' :\n *                     var hashtag = match.getHashtag();\n *                     console.log( hashtag );\n *\n *                     return '<a href=\"http://newplace.to.link.hashtag.handles.to/\">' + hashtag + '</a>';\n *\n *                 case 'mention' :\n *                     var mention = match.getMention();\n *                     console.log( mention );\n *\n *                     return '<a href=\"http://newplace.to.link.mention.to/\">' + mention + '</a>';\n *             }\n *         }\n *     } );\n *\n *\n * The function may return the following values:\n *\n * - `true` (Boolean): Allow Autolinker to replace the match as it normally\n *   would.\n * - `false` (Boolean): Do not replace the current match at all - leave as-is.\n * - Any String: If a string is returned from the function, the string will be\n *   used directly as the replacement HTML for the match.\n * - An {@link Autolinker.HtmlTag} instance, which can be used to build/modify\n *   an HTML tag before writing out its HTML text.\n */\nexport default class Autolinker {\n    // NOTE: must be 'export default' here for UMD module\n\n    /**\n     * @static\n     * @property {String} version\n     *\n     * The Autolinker version number in the form major.minor.patch\n     *\n     * Ex: 3.15.0\n     */\n    static readonly version = version;\n\n    /**\n     * Automatically links URLs, Email addresses, Phone Numbers, Twitter handles,\n     * Hashtags, and Mentions found in the given chunk of HTML. Does not link URLs\n     * found within HTML tags.\n     *\n     * For instance, if given the text: `You should go to http://www.yahoo.com`,\n     * then the result will be `You should go to &lt;a href=\"http://www.yahoo.com\"&gt;http://www.yahoo.com&lt;/a&gt;`\n     *\n     * Example:\n     *\n     *     var linkedText = Autolinker.link( \"Go to google.com\", { newWindow: false } );\n     *     // Produces: \"Go to <a href=\"http://google.com\">google.com</a>\"\n     *\n     * @static\n     * @param {String} textOrHtml The HTML or text to find matches within (depending\n     *   on if the {@link #urls}, {@link #email}, {@link #phone}, {@link #mention},\n     *   {@link #hashtag}, and {@link #mention} options are enabled).\n     * @param {Object} [options] Any of the configuration options for the Autolinker\n     *   class, specified in an Object (map). See the class description for an\n     *   example call.\n     * @return {String} The HTML text, with matches automatically linked.\n     */\n    static link(textOrHtml: string, options?: AutolinkerConfig) {\n        const autolinker = new Autolinker(options);\n        return autolinker.link(textOrHtml);\n    }\n\n    /**\n     * Parses the input `textOrHtml` looking for URLs, email addresses, phone\n     * numbers, username handles, and hashtags (depending on the configuration\n     * of the Autolinker instance), and returns an array of {@link Autolinker.match.Match}\n     * objects describing those matches (without making any replacements).\n     *\n     * Note that if parsing multiple pieces of text, it is slightly more efficient\n     * to create an Autolinker instance, and use the instance-level {@link #parse}\n     * method.\n     *\n     * Example:\n     *\n     *     var matches = Autolinker.parse(\"Hello google.com, I am asdf@asdf.com\", {\n     *         urls: true,\n     *         email: true\n     *     });\n     *\n     *     console.log(matches.length);         // 2\n     *     console.log(matches[0].getType());   // 'url'\n     *     console.log(matches[0].getUrl());    // 'google.com'\n     *     console.log(matches[1].getType());   // 'email'\n     *     console.log(matches[1].getEmail());  // 'asdf@asdf.com'\n     *\n     * @static\n     * @param {String} textOrHtml The HTML or text to find matches within\n     *   (depending on if the {@link #urls}, {@link #email}, {@link #phone},\n     *   {@link #hashtag}, and {@link #mention} options are enabled).\n     * @param {Object} [options] Any of the configuration options for the Autolinker\n     *   class, specified in an Object (map). See the class description for an\n     *   example call.\n     * @return {Autolinker.match.Match[]} The array of Matches found in the\n     *   given input `textOrHtml`.\n     */\n    static parse(textOrHtml: string, options?: AutolinkerConfig) {\n        const autolinker = new Autolinker(options);\n        return autolinker.parse(textOrHtml);\n    }\n\n    /**\n     * The Autolinker version number exposed on the instance itself.\n     *\n     * Ex: 0.25.1\n     *\n     * @property {String} version\n     */\n    readonly version = Autolinker.version;\n\n    /**\n     * @cfg {Boolean/Object} [urls]\n     *\n     * `true` if URLs should be automatically linked, `false` if they should not\n     * be. Defaults to `true`.\n     *\n     * Examples:\n     *\n     *     urls: true\n     *\n     *     // or\n     *\n     *     urls: {\n     *         schemeMatches : true,\n     *         tldMatches    : true,\n     *         ipV4Matches   : true\n     *     }\n     *\n     * As shown above, this option also accepts an Object form with 3 properties\n     * to allow for more customization of what exactly gets linked. All default\n     * to `true`:\n     *\n     * @cfg {Boolean} [urls.schemeMatches] `true` to match URLs found prefixed\n     *   with a scheme, i.e. `http://google.com`, or `other+scheme://google.com`,\n     *   `false` to prevent these types of matches.\n     * @cfg {Boolean} [urls.tldMatches] `true` to match URLs with known top\n     *   level domains (.com, .net, etc.) that are not prefixed with a scheme\n     *   (such as 'http://'). This option attempts to match anything that looks\n     *   like a URL in the given text. Ex: `google.com`, `asdf.org/?page=1`, etc.\n     *   `false` to prevent these types of matches.\n     * @cfg {Boolean} [urls.ipV4Matches] `true` to match IPv4 addresses in text\n     *   that are not prefixed with a scheme (such as 'http://'). This option\n     *   attempts to match anything that looks like an IPv4 address in text. Ex:\n     *   `192.168.0.1`, `10.0.0.1/?page=1`, etc. `false` to prevent these types\n     *   of matches.\n     */\n    private readonly urls: UrlsConfigObj = {}; // default value just to get the above doc comment in the ES5 output and documentation generator\n\n    /**\n     * @cfg {Boolean} [email=true]\n     *\n     * `true` if email addresses should be automatically linked, `false` if they\n     * should not be.\n     */\n    private readonly email: boolean = true; // default value just to get the above doc comment in the ES5 output and documentation generator\n\n    /**\n     * @cfg {Boolean} [phone=true]\n     *\n     * `true` if Phone numbers (\"(555)555-5555\") should be automatically linked,\n     * `false` if they should not be.\n     */\n    private readonly phone: boolean = true; // default value just to get the above doc comment in the ES5 output and documentation generator\n\n    /**\n     * @cfg {Boolean/String} [hashtag=false]\n     *\n     * A string for the service name to have hashtags (ex: \"#myHashtag\")\n     * auto-linked to. The currently-supported values are:\n     *\n     * - 'twitter'\n     * - 'facebook'\n     * - 'instagram'\n     * - 'tiktok'\n     * - 'youtube'\n     *\n     * Pass `false` to skip auto-linking of hashtags.\n     */\n    private readonly hashtag: HashtagConfig = false; // default value just to get the above doc comment in the ES5 output and documentation generator\n\n    /**\n     * @cfg {String/Boolean} [mention=false]\n     *\n     * A string for the service name to have mentions (ex: \"@myuser\")\n     * auto-linked to. The currently supported values are:\n     *\n     * - 'twitter'\n     * - 'instagram'\n     * - 'soundcloud'\n     * - 'tiktok'\n     * - 'youtube'\n     *\n     * Defaults to `false` to skip auto-linking of mentions.\n     */\n    private readonly mention: MentionConfig = false; // default value just to get the above doc comment in the ES5 output and documentation generator\n\n    /**\n     * @cfg {Boolean} [newWindow=true]\n     *\n     * `true` if the links should open in a new window, `false` otherwise.\n     */\n    private readonly newWindow: boolean = true; // default value just to get the above doc comment in the ES5 output and documentation generator\n\n    /**\n     * @cfg {Boolean/Object} [stripPrefix=true]\n     *\n     * `true` if 'http://' (or 'https://') and/or the 'www.' should be stripped\n     * from the beginning of URL links' text, `false` otherwise. Defaults to\n     * `true`.\n     *\n     * Examples:\n     *\n     *     stripPrefix: true\n     *\n     *     // or\n     *\n     *     stripPrefix: {\n     *         scheme : true,\n     *         www    : true\n     *     }\n     *\n     * As shown above, this option also accepts an Object form with 2 properties\n     * to allow for more customization of what exactly is prevented from being\n     * displayed. Both default to `true`:\n     *\n     * @cfg {Boolean} [stripPrefix.scheme] `true` to prevent the scheme part of\n     *   a URL match from being displayed to the user. Example:\n     *   `'http://google.com'` will be displayed as `'google.com'`. `false` to\n     *   not strip the scheme. NOTE: Only an `'http://'` or `'https://'` scheme\n     *   will be removed, so as not to remove a potentially dangerous scheme\n     *   (such as `'file://'` or `'javascript:'`)\n     * @cfg {Boolean} [stripPrefix.www] www (Boolean): `true` to prevent the\n     *   `'www.'` part of a URL match from being displayed to the user. Ex:\n     *   `'www.google.com'` will be displayed as `'google.com'`. `false` to not\n     *   strip the `'www'`.\n     */\n    private readonly stripPrefix: Required<StripPrefixConfigObj> = {\n        scheme: true,\n        www: true,\n    }; // default value just to get the above doc comment in the ES5 output and documentation generator\n\n    /**\n     * @cfg {Boolean} [stripTrailingSlash=true]\n     *\n     * `true` to remove the trailing slash from URL matches, `false` to keep\n     *  the trailing slash.\n     *\n     *  Example when `true`: `http://google.com/` will be displayed as\n     *  `http://google.com`.\n     */\n    private readonly stripTrailingSlash: boolean = true; // default value just to get the above doc comment in the ES5 output and documentation generator\n\n    /**\n     * @cfg {Boolean} [decodePercentEncoding=true]\n     *\n     * `true` to decode percent-encoded characters in URL matches, `false` to keep\n     *  the percent-encoded characters.\n     *\n     *  Example when `true`: `https://en.wikipedia.org/wiki/San_Jos%C3%A9` will\n     *  be displayed as `https://en.wikipedia.org/wiki/San_José`.\n     */\n    private readonly decodePercentEncoding: boolean = true; // default value just to get the above doc comment in the ES5 output and documentation generator\n\n    /**\n     * @cfg {Number/Object} [truncate=0]\n     *\n     * ## Number Form\n     *\n     * A number for how many characters matched text should be truncated to\n     * inside the text of a link. If the matched text is over this number of\n     * characters, it will be truncated to this length by adding a two period\n     * ellipsis ('..') to the end of the string.\n     *\n     * For example: A url like 'http://www.yahoo.com/some/long/path/to/a/file'\n     * truncated to 25 characters might look something like this:\n     * 'yahoo.com/some/long/pat..'\n     *\n     * Example Usage:\n     *\n     *     truncate: 25\n     *\n     *\n     *  Defaults to `0` for \"no truncation.\"\n     *\n     *\n     * ## Object Form\n     *\n     * An Object may also be provided with two properties: `length` (Number) and\n     * `location` (String). `location` may be one of the following: 'end'\n     * (default), 'middle', or 'smart'.\n     *\n     * Example Usage:\n     *\n     *     truncate: { length: 25, location: 'middle' }\n     *\n     * @cfg {Number} [truncate.length=0] How many characters to allow before\n     *   truncation will occur. Defaults to `0` for \"no truncation.\"\n     * @cfg {\"end\"/\"middle\"/\"smart\"} [truncate.location=\"end\"]\n     *\n     * - 'end' (default): will truncate up to the number of characters, and then\n     *   add an ellipsis at the end. Ex: 'yahoo.com/some/long/pat..'\n     * - 'middle': will truncate and add the ellipsis in the middle. Ex:\n     *   'yahoo.com/s..th/to/a/file'\n     * - 'smart': for URLs where the algorithm attempts to strip out unnecessary\n     *   parts first (such as the 'www.', then URL scheme, hash, etc.),\n     *   attempting to make the URL human-readable before looking for a good\n     *   point to insert the ellipsis if it is still too long. Ex:\n     *   'yahoo.com/some..to/a/file'. For more details, see\n     *   {@link Autolinker.truncate.TruncateSmart}.\n     */\n    private readonly truncate: Required<TruncateConfigObj> = {\n        length: 0,\n        location: 'end',\n    }; // default value just to get the above doc comment in the ES5 output and documentation generator\n\n    /**\n     * @cfg {String} className\n     *\n     * A CSS class name to add to the generated links. This class will be added\n     * to all links, as well as this class plus match suffixes for styling\n     * url/email/phone/hashtag/mention links differently.\n     *\n     * For example, if this config is provided as \"myLink\", then:\n     *\n     * - URL links will have the CSS classes: \"myLink myLink-url\"\n     * - Email links will have the CSS classes: \"myLink myLink-email\", and\n     * - Phone links will have the CSS classes: \"myLink myLink-phone\"\n     * - Hashtag links will have the CSS classes: \"myLink myLink-hashtag\"\n     * - Mention links will have the CSS classes: \"myLink myLink-mention myLink-[type]\"\n     *   where [type] is either \"instagram\", \"twitter\" or \"soundcloud\"\n     */\n    private readonly className: string = ''; // default value just to get the above doc comment in the ES5 output and documentation generator\n\n    /**\n     * @cfg {Function} replaceFn\n     *\n     * A function to individually process each match found in the input string.\n     *\n     * See the class's description for usage.\n     *\n     * The `replaceFn` can be called with a different context object (`this`\n     * reference) using the {@link #context} cfg.\n     *\n     * This function is called with the following parameter:\n     *\n     * @cfg {Autolinker.match.Match} replaceFn.match The Match instance which\n     *   can be used to retrieve information about the match that the `replaceFn`\n     *   is currently processing. See {@link Autolinker.match.Match} subclasses\n     *   for details.\n     */\n    private readonly replaceFn: ReplaceFn | null = null; // default value just to get the above doc comment in the ES5 output and documentation generator\n\n    /**\n     * @cfg {Object} context\n     *\n     * The context object (`this` reference) to call the `replaceFn` with.\n     *\n     * Defaults to this Autolinker instance.\n     */\n    private readonly context: object | undefined = undefined; // default value just to get the above doc comment in the ES5 output and documentation generator\n\n    /**\n     * @cfg {Boolean} [sanitizeHtml=false]\n     *\n     * `true` to HTML-encode the start and end brackets of existing HTML tags found\n     * in the input string. This will escape `<` and `>` characters to `&lt;` and\n     * `&gt;`, respectively.\n     *\n     * Setting this to `true` will prevent XSS (Cross-site Scripting) attacks,\n     * but will remove the significance of existing HTML tags in the input string. If\n     * you would like to maintain the significance of existing HTML tags while also\n     * making the output HTML string safe, leave this option as `false` and use a\n     * tool like https://github.com/cure53/DOMPurify (or others) on the input string\n     * before running Autolinker.\n     */\n    private readonly sanitizeHtml: boolean = false; // default value just to get the above doc comment in the ES5 output and documentation generator\n\n    /**\n     * @private\n     * @property {Autolinker.AnchorTagBuilder} tagBuilder\n     *\n     * The AnchorTagBuilder instance used to build match replacement anchor tags.\n     * Note: this is lazily instantiated in the {@link #getTagBuilder} method.\n     */\n    private tagBuilder: AnchorTagBuilder | null = null;\n\n    /**\n     * @method constructor\n     * @param {Object} [cfg] The configuration options for the Autolinker instance,\n     *   specified in an Object (map).\n     */\n    constructor(cfg: AutolinkerConfig = {}) {\n        // Note: when `this.something` is used in the rhs of these assignments,\n        //       it refers to the default values set above the constructor\n        this.urls = normalizeUrlsCfg(cfg.urls);\n        this.email = isBoolean(cfg.email) ? cfg.email : this.email;\n        this.phone = isBoolean(cfg.phone) ? cfg.phone : this.phone;\n        this.hashtag = cfg.hashtag || this.hashtag;\n        this.mention = cfg.mention || this.mention;\n        this.newWindow = isBoolean(cfg.newWindow) ? cfg.newWindow : this.newWindow;\n        this.stripPrefix = normalizeStripPrefixCfg(cfg.stripPrefix);\n        this.stripTrailingSlash = isBoolean(cfg.stripTrailingSlash)\n            ? cfg.stripTrailingSlash\n            : this.stripTrailingSlash;\n        this.decodePercentEncoding = isBoolean(cfg.decodePercentEncoding)\n            ? cfg.decodePercentEncoding\n            : this.decodePercentEncoding;\n        this.sanitizeHtml = cfg.sanitizeHtml || false;\n\n        // Validate the value of the `mention` cfg\n        const mention = this.mention;\n        if (mention !== false && mentionServices.indexOf(mention) === -1) {\n            throw new Error(`invalid \\`mention\\` cfg '${mention}' - see docs`);\n        }\n\n        // Validate the value of the `hashtag` cfg\n        const hashtag = this.hashtag;\n        if (hashtag !== false && hashtagServices.indexOf(hashtag) === -1) {\n            throw new Error(`invalid \\`hashtag\\` cfg '${hashtag}' - see docs`);\n        }\n\n        this.truncate = normalizeTruncateCfg(cfg.truncate);\n        this.className = cfg.className || this.className;\n        this.replaceFn = cfg.replaceFn || this.replaceFn;\n        this.context = cfg.context || this;\n    }\n\n    /**\n     * Parses the input `textOrHtml` looking for URLs, email addresses, phone\n     * numbers, username handles, and hashtags (depending on the configuration\n     * of the Autolinker instance), and returns an array of {@link Autolinker.match.Match}\n     * objects describing those matches (without making any replacements).\n     *\n     * This method is used by the {@link #link} method, but can also be used to\n     * simply do parsing of the input in order to discover what kinds of links\n     * there are and how many.\n     *\n     * Example usage:\n     *\n     *     var autolinker = new Autolinker( {\n     *         urls: true,\n     *         email: true\n     *     } );\n     *\n     *     var matches = autolinker.parse( \"Hello google.com, I am asdf@asdf.com\" );\n     *\n     *     console.log( matches.length );           // 2\n     *     console.log( matches[ 0 ].getType() );   // 'url'\n     *     console.log( matches[ 0 ].getUrl() );    // 'google.com'\n     *     console.log( matches[ 1 ].getType() );   // 'email'\n     *     console.log( matches[ 1 ].getEmail() );  // 'asdf@asdf.com'\n     *\n     * @param {String} textOrHtml The HTML or text to find matches within\n     *   (depending on if the {@link #urls}, {@link #email}, {@link #phone},\n     *   {@link #hashtag}, and {@link #mention} options are enabled).\n     * @return {Autolinker.match.Match[]} The array of Matches found in the\n     *   given input `textOrHtml`.\n     */\n    parse(textOrHtml: string) {\n        const skipTagNames = ['a', 'style', 'script'];\n        let skipTagsStackCount = 0; // used to only Autolink text outside of anchor/script/style tags. We don't want to autolink something that is already linked inside of an <a> tag, for instance\n\n        let matches: Match[] = [];\n\n        // Find all matches within the `textOrHtml` (but not matches that are\n        // already nested within <a>, <style> and <script> tags)\n        parseHtml(textOrHtml, {\n            onOpenTag: (tagName: string) => {\n                if (skipTagNames.indexOf(tagName) >= 0) {\n                    skipTagsStackCount++;\n                }\n            },\n            onText: (text: string, offset: number) => {\n                // Only process text nodes that are not within an <a>, <style> or <script> tag\n                if (skipTagsStackCount === 0) {\n                    // \"Walk around\" common HTML entities. An '&nbsp;' (for example)\n                    // could be at the end of a URL, but we don't want to\n                    // include the trailing '&' in the URL. See issue #76\n                    // TODO: Handle HTML entities separately in parseHtml() and\n                    // don't emit them as \"text\" except for &amp; entities\n                    const htmlCharacterEntitiesRegex =\n                        /(&nbsp;|&#160;|&lt;|&#60;|&gt;|&#62;|&quot;|&#34;|&#39;)/gi; // NOTE: capturing group is significant to include the split characters in the .split() call below\n                    const textSplit = text.split(htmlCharacterEntitiesRegex);\n\n                    let currentOffset = offset;\n                    textSplit.forEach((splitText, i) => {\n                        // even number matches are text, odd numbers are html entities\n                        if (i % 2 === 0) {\n                            const textNodeMatches = this.parseText(splitText, currentOffset);\n                            matches.push(...textNodeMatches);\n                        }\n                        currentOffset += splitText.length;\n                    });\n                }\n            },\n            onCloseTag: (tagName: string) => {\n                if (skipTagNames.indexOf(tagName) >= 0) {\n                    skipTagsStackCount = Math.max(skipTagsStackCount - 1, 0); // attempt to handle extraneous </a> tags by making sure the stack count never goes below 0\n                }\n            },\n            onComment: (/*_offset: number*/) => {}, // no need to process comment nodes\n            onDoctype: (/*_offset: number*/) => {}, // no need to process doctype nodes\n        });\n\n        // After we have found all matches, remove subsequent matches that\n        // overlap with a previous match. This can happen for instance with an\n        // email address where the local-part of the email is also a top-level\n        // domain, such as in \"google.com@aaa.com\". In this case, the entire\n        // email address should be linked rather than just the 'google.com'\n        // part.\n        matches = this.compactMatches(matches);\n\n        // And finally, remove matches for match types that have been turned\n        // off. We needed to have all match types turned on initially so that\n        // things like hashtags could be filtered out if they were really just\n        // part of a URL match (for instance, as a named anchor).\n        matches = this.removeUnwantedMatches(matches);\n\n        return matches;\n    }\n\n    /**\n     * After we have found all matches, we need to remove matches that overlap\n     * with a previous match. This can happen for instance with an\n     * email address where the local-part of the email is also a top-level\n     * domain, such as in \"google.com@aaa.com\". In this case, the entire email\n     * address should be linked rather than just the 'google.com' part.\n     *\n     * @private\n     * @param {Autolinker.match.Match[]} matches\n     * @return {Autolinker.match.Match[]}\n     */\n    private compactMatches(matches: Match[]) {\n        // First, the matches need to be sorted in order of offset in the input\n        // string\n        matches.sort(byMatchOffset);\n\n        let i = 0;\n        while (i < matches.length - 1) {\n            const match = matches[i];\n            const offset = match.getOffset();\n            const matchedTextLength = match.getMatchedText().length;\n\n            if (i + 1 < matches.length) {\n                // Remove subsequent matches that equal offset with current match\n                // This can happen when matching the text \"google.com@aaa.com\"\n                // where we have both a URL ('google.com') and an email. We\n                // should only keep the email match in this case.\n                if (matches[i + 1].getOffset() === offset) {\n                    // Remove the shorter match\n                    const removeIdx =\n                        matches[i + 1].getMatchedText().length > matchedTextLength ? i : i + 1;\n                    matches.splice(removeIdx, 1);\n                    continue;\n                }\n\n                // Remove subsequent matches that overlap with the current match\n                //\n                // NOTE: This was a fundamental snippet of the Autolinker.js v3\n                // algorithm where we had multiple regular expressions searching\n                // the input string for matches. The regexes would sometimes\n                // overlap such as in the case of \"google.com/#link\", where we\n                // would have both a URL match and a hashtag match.\n                //\n                // However, the Autolinker.js v4 algorithm uses a state machine\n                // parser and knows that the '#link' part of 'google.com/#link'\n                // is part of the URL that precedes it, so we don't need this\n                // piece of code any more. Keeping it here commented for now in\n                // case we need to put it back at some point, but none of the\n                // test cases are currently able to trigger the need for it.\n                // const endIdx = offset + matchedTextLength;\n                // if (matches[i + 1].getOffset() < endIdx) {\n                //     matches.splice(i + 1, 1);\n                //     continue;\n                // }\n            }\n            i++;\n        }\n\n        return matches;\n    }\n\n    /**\n     * Removes matches for matchers that were turned off in the options. For\n     * example, if {@link #hashtag hashtags} were not to be matched, we'll\n     * remove them from the `matches` array here.\n     *\n     * Note: we *must* use all Matchers on the input string, and then filter\n     * them out later. For example, if the options were `{ url: false, hashtag: true }`,\n     * we wouldn't want to match the text '#link' as a HashTag inside of the text\n     * 'google.com/#link'. The way the algorithm works is that we match the full\n     * URL first (which prevents the accidental HashTag match), and then we'll\n     * simply throw away the URL match.\n     *\n     * @private\n     * @param {Autolinker.match.Match[]} matches The array of matches to remove\n     *   the unwanted matches from. Note: this array is mutated for the\n     *   removals.\n     * @return {Autolinker.match.Match[]} The mutated input `matches` array.\n     */\n    private removeUnwantedMatches(matches: Match[]) {\n        if (!this.hashtag)\n            removeWithPredicate(matches, (match: Match) => {\n                return match.getType() === 'hashtag';\n            });\n        if (!this.email)\n            removeWithPredicate(matches, (match: Match) => {\n                return match.getType() === 'email';\n            });\n        if (!this.phone)\n            removeWithPredicate(matches, (match: Match) => {\n                return match.getType() === 'phone';\n            });\n        if (!this.mention)\n            removeWithPredicate(matches, (match: Match) => {\n                return match.getType() === 'mention';\n            });\n        if (!this.urls.schemeMatches) {\n            removeWithPredicate(\n                matches,\n                (m: Match) =>\n                    m.getType() === 'url' && (m as UrlMatch).getUrlMatchType() === 'scheme'\n            );\n        }\n        if (!this.urls.tldMatches) {\n            removeWithPredicate(\n                matches,\n                (m: Match) => m.getType() === 'url' && (m as UrlMatch).getUrlMatchType() === 'tld'\n            );\n        }\n        if (!this.urls.ipV4Matches) {\n            removeWithPredicate(\n                matches,\n                (m: Match) => m.getType() === 'url' && (m as UrlMatch).getUrlMatchType() === 'ipV4'\n            );\n        }\n\n        return matches;\n    }\n\n    /**\n     * Parses the input `text` looking for URLs, email addresses, phone\n     * numbers, username handles, and hashtags (depending on the configuration\n     * of the Autolinker instance), and returns an array of {@link Autolinker.match.Match}\n     * objects describing those matches.\n     *\n     * This method processes a **non-HTML string**, and is used to parse and\n     * match within the text nodes of an HTML string. This method is used\n     * internally by {@link #parse}.\n     *\n     * @private\n     * @param {String} text The text to find matches within (depending on if the\n     *   {@link #urls}, {@link #email}, {@link #phone},\n     *   {@link #hashtag}, and {@link #mention} options are enabled). This must be a non-HTML string.\n     * @param {Number} [offset=0] The offset of the text node within the\n     *   original string. This is used when parsing with the {@link #parse}\n     *   method to generate correct offsets within the {@link Autolinker.match.Match}\n     *   instances, but may be omitted if calling this method publicly.\n     * @return {Autolinker.match.Match[]} The array of Matches found in the\n     *   given input `text`.\n     */\n    private parseText(text: string, offset: number) {\n        offset = offset || 0;\n        const matches: Match[] = parseMatches(text, {\n            tagBuilder: this.getTagBuilder(),\n            stripPrefix: this.stripPrefix,\n            stripTrailingSlash: this.stripTrailingSlash,\n            decodePercentEncoding: this.decodePercentEncoding,\n            hashtagServiceName: this.hashtag as HashtagService,\n            mentionServiceName: (this.mention as MentionService) || 'twitter',\n        });\n\n        // Correct the offset of each of the matches. They are originally\n        // the offset of the match within the provided text node, but we\n        // need to correct them to be relative to the original HTML input\n        // string (i.e. the one provided to #parse).\n        for (let i = 0, numTextMatches = matches.length; i < numTextMatches; i++) {\n            matches[i].setOffset(offset + matches[i].getOffset());\n        }\n\n        return matches;\n    }\n\n    /**\n     * Automatically links URLs, Email addresses, Phone numbers, Hashtags,\n     * and Mentions (Twitter, Instagram, Soundcloud) found in the given chunk of HTML. Does not link\n     * URLs found within HTML tags.\n     *\n     * For instance, if given the text: `You should go to http://www.yahoo.com`,\n     * then the result will be `You should go to\n     * &lt;a href=\"http://www.yahoo.com\"&gt;http://www.yahoo.com&lt;/a&gt;`\n     *\n     * This method finds the text around any HTML elements in the input\n     * `textOrHtml`, which will be the text that is processed. Any original HTML\n     * elements will be left as-is, as well as the text that is already wrapped\n     * in anchor (&lt;a&gt;) tags.\n     *\n     * @param {String} textOrHtml The HTML or text to autolink matches within\n     *   (depending on if the {@link #urls}, {@link #email}, {@link #phone}, {@link #hashtag}, and {@link #mention} options are enabled).\n     * @return {String} The HTML, with matches automatically linked.\n     */\n    link(textOrHtml: string) {\n        if (!textOrHtml) {\n            return '';\n        } // handle `null` and `undefined` (for JavaScript users that don't have TypeScript support), and nothing to do with an empty string too\n\n        /* We would want to sanitize the start and end characters of a tag\n         * before processing the string in order to avoid an XSS scenario.\n         * This behaviour can be changed by toggling the sanitizeHtml option.\n         */\n        if (this.sanitizeHtml) {\n            textOrHtml = textOrHtml.replace(/</g, '&lt;').replace(/>/g, '&gt;');\n        }\n\n        const matches = this.parse(textOrHtml);\n        const newHtml = new Array<string>(matches.length * 2 + 1);\n        let lastIndex = 0;\n\n        for (let i = 0, len = matches.length; i < len; i++) {\n            const match = matches[i];\n\n            newHtml.push(textOrHtml.substring(lastIndex, match.getOffset()));\n            newHtml.push(this.createMatchReturnVal(match));\n\n            lastIndex = match.getOffset() + match.getMatchedText().length;\n        }\n        newHtml.push(textOrHtml.substring(lastIndex)); // handle the text after the last match\n\n        return newHtml.join('');\n    }\n\n    /**\n     * Creates the return string value for a given match in the input string.\n     *\n     * This method handles the {@link #replaceFn}, if one was provided.\n     *\n     * @private\n     * @param {Autolinker.match.Match} match The Match object that represents\n     *   the match.\n     * @return {String} The string that the `match` should be replaced with.\n     *   This is usually the anchor tag string, but may be the `matchStr` itself\n     *   if the match is not to be replaced.\n     */\n    private createMatchReturnVal(match: Match): string {\n        // Handle a custom `replaceFn` being provided\n        let replaceFnResult: ReplaceFnReturn;\n        if (this.replaceFn) {\n            replaceFnResult = this.replaceFn.call(this.context, match); // Autolinker instance is the context\n        }\n\n        if (typeof replaceFnResult === 'string') {\n            return replaceFnResult; // `replaceFn` returned a string, use that\n        } else if (replaceFnResult === false) {\n            return match.getMatchedText(); // no replacement for the match\n        } else if (replaceFnResult instanceof HtmlTag) {\n            return replaceFnResult.toAnchorString();\n        } else {\n            // replaceFnResult === true, or no/unknown return value from function\n            // Perform Autolinker's default anchor tag generation\n            const anchorTag = match.buildTag(); // returns an Autolinker.HtmlTag instance\n\n            return anchorTag.toAnchorString();\n        }\n    }\n\n    /**\n     * Returns the {@link #tagBuilder} instance for this Autolinker instance,\n     * lazily instantiating it if it does not yet exist.\n     *\n     * @private\n     * @return {Autolinker.AnchorTagBuilder}\n     */\n    private getTagBuilder() {\n        let tagBuilder = this.tagBuilder;\n\n        if (!tagBuilder) {\n            tagBuilder = this.tagBuilder = new AnchorTagBuilder({\n                newWindow: this.newWindow,\n                truncate: this.truncate,\n                className: this.className,\n            });\n        }\n\n        return tagBuilder;\n    }\n}\n\n/**\n * Normalizes the {@link #urls} config into an Object with its 2 properties:\n * `schemeMatches` and `tldMatches`, both booleans.\n *\n * See {@link #urls} config for details.\n *\n * @private\n * @param {Boolean/Object} urls\n * @return {Object}\n */\nfunction normalizeUrlsCfg(urls: UrlsConfig | undefined): Required<UrlsConfigObj> {\n    if (urls == null) urls = true; // default to `true`\n\n    if (isBoolean(urls)) {\n        return { schemeMatches: urls, tldMatches: urls, ipV4Matches: urls };\n    } else {\n        // object form\n        return {\n            schemeMatches: isBoolean(urls.schemeMatches) ? urls.schemeMatches : true,\n            tldMatches: isBoolean(urls.tldMatches) ? urls.tldMatches : true,\n            ipV4Matches: isBoolean(urls.ipV4Matches) ? urls.ipV4Matches : true,\n        };\n    }\n}\n\n/**\n * Normalizes the {@link #stripPrefix} config into an Object with 2\n * properties: `scheme`, and `www` - both Booleans.\n *\n * See {@link #stripPrefix} config for details.\n *\n * @private\n * @param {Boolean/Object} stripPrefix\n * @return {Object}\n */\nfunction normalizeStripPrefixCfg(\n    stripPrefix: StripPrefixConfig | undefined\n): Required<StripPrefixConfigObj> {\n    if (stripPrefix == null) stripPrefix = true; // default to `true`\n\n    if (isBoolean(stripPrefix)) {\n        return { scheme: stripPrefix, www: stripPrefix };\n    } else {\n        // object form\n        return {\n            scheme: isBoolean(stripPrefix.scheme) ? stripPrefix.scheme : true,\n            www: isBoolean(stripPrefix.www) ? stripPrefix.www : true,\n        };\n    }\n}\n\n/**\n * Normalizes the {@link #truncate} config into an Object with 2 properties:\n * `length` (Number), and `location` (String).\n *\n * See {@link #truncate} config for details.\n *\n * @private\n * @param {Number/Object} truncate\n * @return {Object}\n */\nfunction normalizeTruncateCfg(truncate: TruncateConfig | undefined): Required<TruncateConfigObj> {\n    if (typeof truncate === 'number') {\n        return { length: truncate, location: 'end' };\n    } else {\n        // object, or undefined/null\n        return {\n            length: Number.POSITIVE_INFINITY,\n            location: 'end',\n            ...truncate,\n        };\n    }\n}\n\n/**\n * Helper function for Array.prototype.sort() to sort the Matches by\n * their offset in the input string.\n */\nfunction byMatchOffset(a: Match, b: Match) {\n    return a.getOffset() - b.getOffset();\n}\n\nexport interface AutolinkerConfig {\n    urls?: UrlsConfig;\n    email?: boolean;\n    phone?: boolean;\n    hashtag?: HashtagConfig;\n    mention?: MentionConfig;\n    newWindow?: boolean;\n    stripPrefix?: StripPrefixConfig;\n    stripTrailingSlash?: boolean;\n    truncate?: TruncateConfig;\n    className?: string;\n    replaceFn?: ReplaceFn | null;\n    context?: object;\n    sanitizeHtml?: boolean;\n    decodePercentEncoding?: boolean;\n}\n\nexport type UrlsConfig = boolean | UrlsConfigObj;\nexport interface UrlsConfigObj {\n    schemeMatches?: boolean;\n    tldMatches?: boolean;\n    ipV4Matches?: boolean;\n}\n\nexport type StripPrefixConfig = boolean | StripPrefixConfigObj;\nexport interface StripPrefixConfigObj {\n    scheme?: boolean;\n    www?: boolean;\n}\n\nexport type TruncateConfig = number | TruncateConfigObj;\nexport interface TruncateConfigObj {\n    length?: number;\n    location?: 'end' | 'middle' | 'smart';\n}\n\nexport type HashtagConfig = false | HashtagService;\nexport type MentionConfig = false | MentionService;\n\nexport type ReplaceFn = (match: Match) => ReplaceFnReturn;\nexport type ReplaceFnReturn = boolean | string | HtmlTag | null | undefined | void;\n"],"names":[],"mappings":"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","x_google_ignoreList":[0]}